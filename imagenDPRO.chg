"17:37:47, 06 February 2021: Compressed sources"!

"Ensure all structures have calculated size to avoid recompilation messages later"
ExternalStructure allSubclasses do: [:e | e ensureDefined]!

SessionManager current bootFinished!

DevelopmentSessionManager installNew!

SessionManager current defaultResourceLibrary loadFlags: 0.
SessionManager current stashBootInfo!

"Mark all the booted packages as base"
Package manager markAllPackagesAsBase!

"Save the booted image"
| devsesh |
SourceManager default flushChanges.
devsesh := SessionManager current.
devsesh onPreSaveImage.
[devsesh primSnapshot: devsesh imageFileName
	backup: false
	type: 0
	maxObjects: 24576*1024
] ensure: [devsesh onPostSaveImage]!

"Remove unnecessary .chg files"
File delete: 'DBOOT.chg'!

SessionManager current onExit; primQuit: 0!

"17:13:44, 27 April 2021: Dolphin Smalltalk Professional started"!

5 between:1 and:3 squared + 4.!

5 between:1 and:3 squared + 4.!

5 between:1 and:3 squared + 4.!

5 between:1 and:3 squared + 4.!

5 between:1 and:3 squared + 4.!

5 between:1 and:3 squared + 4.!

5 between:1 and:3 squared + 4.!

5 between:1 and:3 squared + 4.!

"20:49:21, 27 April 2021: Image saved"!

"19:12:30, 03 May 2021: Dolphin Smalltalk Professional started"!

Object subclass: #UnPunto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
UnPunto guid: (GUID fromString: '{1f1a92ce-44e8-4a02-803e-fa6725763faf}')!
UnPunto comment: ''!
!UnPunto categoriesForClass!Kernel-Objects! !
Object subclass: #UnPunto
	instanceVariableNames: ' unX  uny'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #UnPunto
	instanceVariableNames: 'unX uny'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #UnPunto
	instanceVariableNames: 'unX uny'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!UnPunto methodsFor!
verX
^unX.! !
!UnPunto categoriesFor: #verX!public! !

Object subclass: #UnPunto
	instanceVariableNames: 'unX unY'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!UnPunto methodsFor!
verY
^unY.! !
!UnPunto categoriesFor: #verY!public! !

!UnPunto methodsFor!
verY
	^unY! !
!UnPunto categoriesFor: #verY!public! !

!UnPunto methodsFor!
verY
	^unY! !
!UnPunto categoriesFor: #verY!public! !

!

!UnPunto methodsFor!
new
	^Error notYetImplemented! !
!UnPunto categoriesFor: #new!public! !

!UnPunto methodsFor!
crearPuntoX:Unx Y:Uny
^(self new ).! !
!UnPunto categoriesFor: #crearPuntoX:Y:!public! !

UnPunto removeSelector: #new ifAbsent: []!

UnPunto removeSelector: #crearPuntoX:Y: ifAbsent: []!

!UnPunto class methodsFor!
crearPuntoX:Unx Y:Uny
^(self new ).! !
!UnPunto class categoriesFor: #crearPuntoX:Y:!public! !

!

!UnPunto class methodsFor!
crearPuntoX:UnX Y:UnY
^(self new ) inicrearPuntoX:UnX Y:UnY.! !
!UnPunto class categoriesFor: #crearPuntoX:Y:!public! !

!UnPunto class methodsFor!
crearPuntoX:UnX Y:UnY
^(self new ) inicrearPuntoX:UnX Y:UnY.! !
!UnPunto class categoriesFor: #crearPuntoX:Y:!public! !

|p1 x y|
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
p1 inspect.!

Object subclass: #Libro
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Libro guid: (GUID fromString: '{07db9e77-6425-4e48-85c5-18d0ba8b844f}')!
Libro comment: ''!
!Libro categoriesForClass!Kernel-Objects! !
Object subclass: #Libro
	instanceVariableNames: 'isbn titulo autor editorial estado dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Libro class methodsFor!
crearLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

| l1 l2 i t a e|!

|p1 x y|
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
p1 inspect.!


| l1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.!


| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.!

| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.
t := Prompter prompt: 'Ingrese un título'.
a := Prompter prompt: 'Ingrese un autor'.!

|p1 x y|
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
p1 inspect.!

| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.
t := Prompter prompt: 'Ingrese un título'.
a := Prompter prompt: 'Ingrese un autor'.
e := Prompter prompt: 'Ingrese una editorial'.
L1 := Libro crearLibroIsbn:i tit:t aut:a edit:e.!

| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.
t := Prompter prompt: 'Ingrese un título'.
a := Prompter prompt: 'Ingrese un autor'.
e := Prompter prompt: 'Ingrese una editorial'.
L1 := Libro crearLibroIsbn:i tit:t aut:a edit:e.!

| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.!

| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.
t := Prompter prompt: 'Ingrese un título'.!

| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.
t := Prompter prompt: 'Ingrese un título'.
a := Prompter prompt: 'Ingrese un autor'.
e := Prompter prompt: 'Ingrese una editorial'.
L1 := Libro crearLibroIsbn:i tit:t aut:a edit:e.!

|p1 x y|
x := Prompter prompt: 'ingrese una x'.!

|p1 x y|
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.!

|p1 x y|
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.!

!UnPunto methodsFor!
verY
^unY.! !
!UnPunto categoriesFor: #verY!public! !

!UnPunto class methodsFor!
crearPuntoX:x Y:y! !
!UnPunto class categoriesFor: #crearPuntoX:Y:!public! !

!UnPunto class methodsFor!
crearPuntoX:x Y:y! !
!UnPunto class categoriesFor: #crearPuntoX:Y:!public! !

|p1 x y|
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.!

|p1 x y|
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
p1 inspect.!

|p1 x y|
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
(x verX =1) ifTrue:[
^'bien'].
p1 inspect.!

|p1 x y|
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
(x verX =1) ifTrue:[
^'bien'].!

|p1 x y veri |
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
veri :=Prompter prompt: 'ingrese una x'.
(x verX =veri) ifTrue:[
^'bien'].!

nil!

^'bien'.!

|p1 x y veri |
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
veri :=Prompter prompt: 'ingrese una x'.
p1 verX.!

|p1 x y veri |
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
veri :=Prompter prompt: 'ingrese una x'.
(p1 verX =veri) ifTrue:[
^'bien'].!

|p1 x y veri |
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
veri :=Prompter prompt: 'ingrese una x'.
(p1 verX =veri) ifTrue:[
^'bien'].!

|p1 x y veri |
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
veri :=Prompter prompt: 'ingrese una x'.
(p1 verX).!

|p1 x y |
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
p1 inspect.
!

| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.
t := Prompter prompt: 'Ingrese un título'.
a := Prompter prompt: 'Ingrese un autor'.
e := Prompter prompt: 'Ingrese una editorial'.
L1 := Libro crearLibroIsbn:i tit:t aut:a edit:e.!

!Libro class methodsFor!
crearLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
^(self new) iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

!Libro class methodsFor!
crearLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
^(self new) iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.
t := Prompter prompt: 'Ingrese un título'.
a := Prompter prompt: 'Ingrese un autor'.
e := Prompter prompt: 'Ingrese una editorial'.
L1 := Libro crearLibroIsbn:i tit:t aut:a edit:e.!

!Libro class methodsFor!
crearLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.
t := Prompter prompt: 'Ingrese un título'.
a := Prompter prompt: 'Ingrese un autor'.
e := Prompter prompt: 'Ingrese una editorial'.
L1 := Libro crearLibroIsbn:i tit:t aut:a edit:e.!

!Libro methodsFor!
crearLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
^(self new) iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit.! !
!Libro categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.
t := Prompter prompt: 'Ingrese un título'.
a := Prompter prompt: 'Ingrese un autor'.
e := Prompter prompt: 'Ingrese una editorial'.
L1 := Libro crearLibroIsbn:i tit:t aut:a edit:e.!

| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.
t := Prompter prompt: 'Ingrese un título'.
a := Prompter prompt: 'Ingrese un autor'.
e := Prompter prompt: 'Ingrese una editorial'.
L1 := Libro crearLibroIsbn:i tit:t aut:a edit:e.
L1 inspect.
!

|p1 x y |
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
p1 verX!

|p1 x y |
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
p1 verX.!

|p1 x y |
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
p1 verX inspect.!

|p2|
p2 := UnPunto new.!

|p1 x y |
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.!

|p2|
p2 := UnPunto new.!

|p2|
p2 := UnPunto new.!

|p1 x y |
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
p1 inspect.!

|p1 x y |
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.!

!UnPunto class methodsFor!
crearPuntoX:x Y:y
^(self new ) iniUnpunto:x y.! !
!UnPunto class categoriesFor: #crearPuntoX:Y:!public! !

!UnPunto class methodsFor!
crearPuntoX:unX Y:unY
^(self new ) iniUnpuntoX:unX Y:unY.! !
!UnPunto class categoriesFor: #crearPuntoX:Y:!public! !

!UnPunto class methodsFor!
crearPuntoX:unX Y:unY
^(self new ) iniUnpuntoX:unX Y:unY.! !
!UnPunto class categoriesFor: #crearPuntoX:Y:!public! !

!UnPunto class methodsFor!
crearPuntoX:unX Y:unY
^(self new ) iniUnpuntoX:unX Y:unY.! !
!UnPunto class categoriesFor: #crearPuntoX:Y:!public! !

|p2|
p2 := UnPunto new.!

|p1 x y |
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
p1 inspect.!

!UnPunto class methodsFor!
crearPuntoX:unX Y:unY! !
!UnPunto class categoriesFor: #crearPuntoX:Y:!public! !

Object subclass: #UnPunto
	instanceVariableNames: 'UnX UnY'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!UnPunto methodsFor!
modix: unX
UnX = unX.! !
!UnPunto categoriesFor: #modix:!public! !

!UnPunto methodsFor!
verY
^UnY.! !
!UnPunto categoriesFor: #verY!public! !

!UnPunto methodsFor!
verX
^UnX.! !
!UnPunto categoriesFor: #verX!public! !

!UnPunto methodsFor!
modix: uny
UnX = uny.! !
!UnPunto categoriesFor: #modix:!public! !

!UnPunto methodsFor!
modix: unX
UnX = unX.! !
!UnPunto categoriesFor: #modix:!public! !

!UnPunto methodsFor!
modix: unX
UnX = unX.! !
!UnPunto categoriesFor: #modix:!public! !

!UnPunto methodsFor!
modiy: uny
UnY = uny.! !
!UnPunto categoriesFor: #modiy:!public! !

|p2|
p2 := UnPunto new.!

|p2|
p2 := UnPunto new.
p2 modix: 1.!

|p2|
p2 := UnPunto new.
p2 modix: 1.!

|p2|
p2 := UnPunto new.
p2 modix: 1.!

|p2|
p2 := UnPunto new.
p2 modix: 1.!

|p2|
p2 := UnPunto new.
p2 modix: 1.
p2 inspect.!

|p2|
p2 := UnPunto new.
p2 modix: 1.
p2 inspect.!

!UnPunto methodsFor!
initialize
	UnX := 0.
	UnY := 0.! !
!UnPunto categoriesFor: #initialize!public! !

|p2|
p2 := UnPunto new.
p2 modix: 1.
p2 inspect.!

|p2|
p2 := UnPunto new.
p2 modix: 1.!

|p1 x y |
x := Prompter prompt: 'ingrese una x'.
y := Prompter prompt: 'ingrese una y'.
p1 :=UnPunto crearPuntoX: x Y: y.
p1 inspect.
!

|p2|
p2 := UnPunto new.
p2 modix: 1.!

Libro removeSelector: #crearLibroIsbn:tit:aut:edit: ifAbsent: []!

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.
t := Prompter prompt: 'Ingrese un título'.
a := Prompter prompt: 'Ingrese un autor'.
e := Prompter prompt: 'Ingrese una editorial'.
L1 := Libro crearLibroIsbn:i tit:t aut:a edit:e.
L1 inspect.!

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
isbn:= unIsbn.! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
isbn:= unIsbn.
titulo:= unAut.! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.
t := Prompter prompt: 'Ingrese un título'.
a := Prompter prompt: 'Ingrese un autor'.
e := Prompter prompt: 'Ingrese una editorial'.
L1 := Libro crearLibroIsbn:i tit:t aut:a edit:e.
L1 inspect.!

!Libro class methodsFor!
crearLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
^(self new) iniLibroIsbn: unIsbn tit: unTit aut: unAut edit: unaEdit.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.
t := Prompter prompt: 'Ingrese un título'.
a := Prompter prompt: 'Ingrese un autor'.
e := Prompter prompt: 'Ingrese una editorial'.
L1 := Libro crearLibroIsbn:i tit:t aut:a edit:e.
L1 inspect.!

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
isbn:= unIsbn.
titulo:= unTit .
autor:= unAut.
editorial:= unaEdit.! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.
t := Prompter prompt: 'Ingrese un título'.
a := Prompter prompt: 'Ingrese un autor'.
e := Prompter prompt: 'Ingrese una editorial'.
L1 := Libro crearLibroIsbn:i tit:t aut:a edit:e.
L1 inspect.!

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit est:unEst
isbn:= unIsbn.
titulo:= unTit .
autor:= unAut.
editorial:= unaEdit.
estado:=unEst.! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:est:!public! !

Libro removeSelector: #iniLibroIsbn:tit:aut:edit:est: ifAbsent: []!

Object subclass: #Libro
	instanceVariableNames: 'isbn titulo autor editorial'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!


| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.
t := Prompter prompt: 'Ingrese un título'.
a := Prompter prompt: 'Ingrese un autor'.
e := Prompter prompt: 'Ingrese una editorial'.
L1 := Libro crearLibroIsbn:i tit:t aut:a edit:e.
L1 inspect.!

| L1 l2 i t a e|
i := Prompter prompt: 'Ingrese un isbn'.
t := Prompter prompt: 'Ingrese un título'.
a := Prompter prompt: 'Ingrese un autor'.
e := Prompter prompt: 'Ingrese una editorial'.
L1 := Libro crearLibroIsbn:i tit:t aut:a edit:e.
L1 inspect.!

Object subclass: #Biblioteca
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Biblioteca guid: (GUID fromString: '{e3ec5006-b983-4637-9df4-d45425b21d9b}')!
Biblioteca comment: ''!
!Biblioteca categoriesForClass!Kernel-Objects! !
!Biblioteca class methodsFor!
crearBiblioNom:unNom! !
!Biblioteca class categoriesFor: #crearBiblioNom:!public! !

!Biblioteca methodsFor!
iniBiblioNom:unNom! !
!Biblioteca categoriesFor: #iniBiblioNom:!public! !

Object subclass: #Biblioteca
	instanceVariableNames: 'nombre'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Biblioteca methodsFor!
iniBiblioNom:unNom
nombre:= unNom.! !
!Biblioteca categoriesFor: #iniBiblioNom:!public! !

!Biblioteca class methodsFor!
crearBiblioNom:unNom
^(self new) iniBiblioNom: unNom! !
!Biblioteca class categoriesFor: #crearBiblioNom:!public! !

!Biblioteca methodsFor!
iniBibliotecaNom: unNom
	nombre := unNom! !
!Biblioteca categoriesFor: #iniBibliotecaNom:!public! !

Biblioteca removeSelector: #iniBibliotecaNom: ifAbsent: []!

!Biblioteca methodsFor!
iniBibliotecaNom:unNom
nombre:= unNom.! !
!Biblioteca categoriesFor: #iniBibliotecaNom:!public! !

Biblioteca removeSelector: #iniBiblioNom: ifAbsent: []!

!Biblioteca class methodsFor!
crearBibliotecaNom:unNom
^(self new) iniBibliotecaNom: unNom.! !
!Biblioteca class categoriesFor: #crearBibliotecaNom:!public! !

Biblioteca class removeSelector: #crearBiblioNom: ifAbsent: []!

!Biblioteca methodsFor!
verNom
^nombre.! !
!Biblioteca categoriesFor: #verNom!public! !

!Biblioteca methodsFor!
modificarNom: nuevonom
nombre:=nuevonom.! !
!Biblioteca categoriesFor: #modificarNom:!public! !

Object subclass: #Biblioteca
	instanceVariableNames: 'nombre conjuntoLibro'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Biblioteca
	instanceVariableNames: 'nombre conjuntoLibro'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Biblioteca methodsFor!
AgregarLibro:libro
conjuntoLibro:=libro.! !
!Biblioteca categoriesFor: #AgregarLibro:!public! !

!Biblioteca methodsFor!
iniBibliotecaNom:unNom
nombre:= unNom.
conjuntoLibro := OrderedCollection new.! !
!Biblioteca categoriesFor: #iniBibliotecaNom:!public! !

!Biblioteca methodsFor!
verNombreBiblioteca
^nombre.! !
!Biblioteca categoriesFor: #verNombreBiblioteca!public! !

Biblioteca removeSelector: #verNom ifAbsent: []!

!Biblioteca methodsFor!
modificarNomBiblioteca: nuevonom
nombre:=nuevonom.! !
!Biblioteca categoriesFor: #modificarNomBiblioteca:!public! !

Biblioteca removeSelector: #modificarNom: ifAbsent: []!

!Biblioteca methodsFor!
AgregarLibro:unlibro
conjuntoLibro:=unlibro.
! !
!Biblioteca categoriesFor: #AgregarLibro:!public! !

!Biblioteca methodsFor!
eliminarLibro:unLibro! !
!Biblioteca categoriesFor: #eliminarLibro:!public! !

!Biblioteca methodsFor!
existeLibro:unLibro! !
!Biblioteca categoriesFor: #existeLibro:!public! !

!Biblioteca methodsFor!
esVacia! !
!Biblioteca categoriesFor: #esVacia!public! !

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

!Biblioteca methodsFor!
todosLosLibros! !
!Biblioteca categoriesFor: #todosLosLibros!public! !

!Biblioteca methodsFor!
AgregarLibro:unLibro
conjuntoLibro add:unLibro.! !
!Biblioteca categoriesFor: #AgregarLibro:!public! !

!Biblioteca methodsFor!
eliminarLibro:unLibro
conjuntoLibro remove:unLibro.! !
!Biblioteca categoriesFor: #eliminarLibro:!public! !

!Biblioteca methodsFor!
existeLibro:unLibro
^ conjuntoLibro includes:unLibro.! !
!Biblioteca categoriesFor: #existeLibro:!public! !

!Biblioteca methodsFor!
esVacia
^ conjuntoLibro empty.! !
!Biblioteca categoriesFor: #esVacia!public! !

!Biblioteca methodsFor!
todosLosLibros
^conjuntoLibro.! !
!Biblioteca categoriesFor: #todosLosLibros!public! !

"09:37:03, 08 May 2021: Dolphin Smalltalk Professional started"!

"10:49:45, 08 May 2021: Image saved"!

"21:39:52, 09 May 2021: Dolphin Smalltalk Professional started"!

Object subclass: #Libro
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Libro guid: (GUID fromString: '{9394ad7a-65c7-4930-bd16-efba730c635d}')!
Libro comment: ''!
!Libro categoriesForClass!Kernel-Objects! !
!Libro class methodsFor!
crearLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

Object subclass: #Libro
	instanceVariableNames: 'isbn titulo autor editorial estado dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro class methodsFor!
crearLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
^(self new) iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

!Libro class methodsFor!
crearLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
^(self new) iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
isbn:= isbn.
titulo:= unTit.
autor:= unAut.
editorial:= unaEdit.! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

Object subclass: #Biblioteca
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Biblioteca guid: (GUID fromString: '{84abae94-82cb-492b-81af-2ed1579f4224}')!
Biblioteca comment: ''!
!Biblioteca categoriesForClass!Kernel-Objects! !
!Biblioteca class methodsFor!
crearBiblioNom:unNom! !
!Biblioteca class categoriesFor: #crearBiblioNom:!public! !

Object subclass: #Biblioteca
	instanceVariableNames: 'nombre biblioteca'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Biblioteca class methodsFor!
crearBiblioNom:unNom
^(self new) iniBiblioNom:unNom.! !
!Biblioteca class categoriesFor: #crearBiblioNom:!public! !

!Biblioteca methodsFor!
iniBiblioNom:unNom! !
!Biblioteca categoriesFor: #iniBiblioNom:!public! !

!Biblioteca methodsFor!
iniBiblioNom:unNom
nombre:=unNom.
biblioteca := OrderedCollection new.! !
!Biblioteca categoriesFor: #iniBiblioNom:!public! !

!Biblioteca methodsFor!
iniBiblioNom:unNom
nombre:=unNom.
biblioteca := OrderedCollection new.! !
!Biblioteca categoriesFor: #iniBiblioNom:!public! !

!Biblioteca class methodsFor!
crearBiblioNom:unNom
^(self new) iniBiblioNom:unNom.! !
!Biblioteca class categoriesFor: #crearBiblioNom:!public! !

!Biblioteca methodsFor!
verNom
^nombre.! !
!Biblioteca categoriesFor: #verNom!public! !

!Biblioteca methodsFor!
verNombreBiblioteca
^nombre.! !
!Biblioteca categoriesFor: #verNombreBiblioteca!public! !

Biblioteca removeSelector: #verNom ifAbsent: []!

!Biblioteca methodsFor!
modiNombreBiblioteca:unNom
nombre:= unNom.! !
!Biblioteca categoriesFor: #modiNombreBiblioteca:!public! !

!Biblioteca methodsFor!
agregarLibro:unLibro
! !
!Biblioteca categoriesFor: #agregarLibro:!public! !

!Biblioteca methodsFor!
eliminarLibro:unLibro! !
!Biblioteca categoriesFor: #eliminarLibro:!public! !

!Biblioteca methodsFor!
existeLibro:unLibro! !
!Biblioteca categoriesFor: #existeLibro:!public! !

!Biblioteca methodsFor!
esVacia! !
!Biblioteca categoriesFor: #esVacia!public! !

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

Object subclass: #Biblioteca
	instanceVariableNames: 'nombre libros'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Biblioteca methodsFor!
todosLos 
^libros.! !
!Biblioteca categoriesFor: #todosLos!public! !

!Biblioteca methodsFor!
iniBiblioNom:unNom
nombre:=unNom.
libros := OrderedCollection new.! !
!Biblioteca categoriesFor: #iniBiblioNom:!public! !

!Biblioteca methodsFor!
agregarLibro:unLibro
libros add:unLibro.! !
!Biblioteca categoriesFor: #agregarLibro:!public! !

!Biblioteca methodsFor!
eliminarLibro:unLibro
libros remove:unLibro.! !
!Biblioteca categoriesFor: #eliminarLibro:!public! !

!Biblioteca methodsFor!
esVacia
^ libros empty.! !
!Biblioteca categoriesFor: #esVacia!public! !

!Biblioteca methodsFor!
existeLibro:unLibro
^ libros includes:unLibro.! !
!Biblioteca categoriesFor: #existeLibro:!public! !

|b n l is t a e col1 col2|
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:3 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[col2 add:(col1 at:i)] ].
1 to: col2 size do:[:i|(col2 at:i) verTitulo inspect].!

"18:35:18, 10 May 2021: Image saved"!

|b n l is t a e col1 col2|
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:3 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[col2 add:(col1 at:i)] ].
1 to: col2 size do:[:i|(col2 at:i) verTitulo inspect].!

"18:35:34, 10 May 2021: Image saved"!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:1 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[col2 add:(col1 at:i)] ].
1 to: col2 size do:[:i|(col2 at:i) verTitulo inspect].!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:1 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].
1 to: col2 size do:[:i|(col2 at:i) verTitulo inspect].!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:1 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:1 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:1 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.!

!Biblioteca methodsFor!
todosLos 
^libros size.! !
!Biblioteca categoriesFor: #todosLos!public! !

"19:00:44, 10 May 2021: Image saved"!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:1 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:1 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:1 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:1 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:1 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:1 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:1 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:1 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].!

!Biblioteca methodsFor!
todosLos 
^libros size.! !
!Biblioteca categoriesFor: #todosLos!public! !

!Biblioteca methodsFor!
todosLosLibros 
^libros size.! !
!Biblioteca categoriesFor: #todosLosLibros!public! !

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:1 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].

col1:=b todosLosLibros.!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].

col1:=b todosLosLibros.!

!Biblioteca methodsFor!
todosLosLibros 
^libros size.
^nombre.! !
!Biblioteca categoriesFor: #todosLosLibros!public! !

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].

col1:=b todosLosLibros.!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].!

!Biblioteca methodsFor!
todosLosLibros 
^libros.! !
!Biblioteca categoriesFor: #todosLosLibros!public! !

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].

col1:=b todosLosLibros.!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].

col1:=b todosLosLibros.!

!Libro methodsFor!
 verEstado
^estado.! !
!Libro categoriesFor: #verEstado!public! !

!Libro methodsFor!
verTitulo
^titulo.
! !
!Libro categoriesFor: #verTitulo!public! !

!Libro methodsFor!
cambiarEstado:nuEstado
estado:=nuEstado.! !
!Libro categoriesFor: #cambiarEstado:!public! !

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
isbn:= isbn.
titulo:= unTit.
autor:= unAut.
editorial:= unaEdit.
estado:=false.! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
ModiEstado:nuEstado
estado:=nuEstado.! !
!Libro categoriesFor: #ModiEstado:!public! !

!Libro methodsFor!
modiEstado:nuEstado
estado:=nuEstado.! !
!Libro categoriesFor: #modiEstado:!public! !

Libro removeSelector: #ModiEstado: ifAbsent: []!

Libro removeSelector: #cambiarEstado: ifAbsent: []!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
(col1 at:1).!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
(col1 at:1).!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
(col1 at:1).
1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].!

|b n l is t a e col1 col2 |
n:= Prompter prompt: 'Ingrese un nombre'.
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= Prompter prompt:'Ingrese un autor'.
e:= Prompter prompt: 'Ingrese una editorial'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
(col1 at:1).
1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].!

|b n l is t a e col1 col2 |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
(col1 at:1).!

!Libro methodsFor!
verEstado
^estado.! !
!Libro categoriesFor: #verEstado!public! !

!Libro methodsFor!
verEstado
^estado.! !
!Libro categoriesFor: #verEstado!public! !

|b n l is t a e col1 col2 |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
(col1 at:1).
1 to: col1 size do:[:i|((col1 at:i) verEstado==false) ifTrue:[ col2 add:(col1 at:i)] ].
1 to: col2 size do:[:i|(col2 at:i) verTitulo inspect].!

|b n l is t a e col1 col2 |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
(col1 at:1).
1 to: col1 size do:[:i|((col1 at:i) verEstado==false) ifTrue:[ col2 add:(col1 at:i)] ].!

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
isbn:= unIsbn .
titulo:= unTit.
autor:= unAut.
editorial:= unaEdit.
estado:=false.! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
isbn:= unIsbn.
titulo:= unTit.
autor:= unAut.
editorial:= unaEdit.
estado:=false.! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

|b n l is t a e col1 col2 |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
(col1 at:1).
1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].!

|b n l is t a e col1 col2 |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.!

|b n l is t a e col1 col2 |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1)."
1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].!

n:= 'biblioteca'!

n:= 'biblioteca'.!

n:= 'biblioteca'.!

n:= 'biblioteca'.!

n:= 'biblioteca'.!

n:= 'biblioteca'.!

!Biblioteca methodsFor!
vercantidadelement
^ libros size.! !
!Biblioteca categoriesFor: #vercantidadelement!public! !

|b n l is t a e col1 col2 |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
(col1 at:1) verEstado .!

|b n l is t a e col1 col2 test |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
test:=l.
b agregarLibro:l].
col1:=b todosLosLibros.
(col1 at:1) verEstado .!

|b n l is t a e col1 col2 test |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
test:=l.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado .!

!

"20:04:24, 10 May 2021: Image saved"!

"20:04:28, 10 May 2021: Image saved"!

|b n l is t a e col1 col2 test |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
test:=l.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado .
col2 add:(col1 at:1).
!

|b n l is t a e col1 col2 test |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
test:=l.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado .
col2 := OrderedCollection new.
col2 add:(col1 at:1).!

|b n l is t a e col1 col2 |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].!

Biblioteca removeSelector: #todosLos ifAbsent: []!

|b n l is t a e col1 col2 |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
"col2 := OrderedCollection new."


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].
!

|b n l is t a e col1 col2 |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].!

|b n l is t a e col1 col2 |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].

1 to: col2 size do:[:i|(col2 at:i) verTitulo inspect].!

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
libros select: [:unlibro | unlibro verTitulo ].! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

!Libro methodsFor!
verIsbn
^isbn .
! !
!Libro categoriesFor: #verIsbn!public! !

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
libros select: [:unlibro | unlibro verIsbn ].! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
1 to: libros size do:[:i|((libros at:i) verIsbn = unIsbn ) ifTrue:[ ^(libros at:i)] ].

! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

|b n l is t a e col1 col2 |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].
col1 buscarLibroIsbn: 1.!

|b n l is t a e col1 col2 |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].
col1 buscarLibroIsbn: '1'.!

|b n l is t a e col1 col2 |
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].

1 to: col2 size do:[:i|(col2 at:i) verTitulo inspect].
1 to: col2 size do:[:i|((col2 at:i) verIsbn = '1' ) ifTrue:[ ^(col2 at:i)] ].!

|b n l is t a e col1 col2 exist|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].

"1 to: col2 size do:[:i|(col2 at:i) verTitulo inspect]."
1 to: col2 size do:[:i|((col2 at:i) verIsbn = '1' ) ifTrue:[ exist:='true' ]].
exist inspect.!

|b n l is t a e col1 col2 exist|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].

"1 to: col2 size do:[:i|(col2 at:i) verTitulo inspect]."
1 to: col2 size do:[:i|((col2 at:i) verIsbn = '12' ) ifTrue:[ exist:='true' ]].
exist inspect.!

|b n l is t a e col1 col2 exist|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].

"1 to: col2 size do:[:i|(col2 at:i) verTitulo inspect]."
1 to: col2 size do:[:i|((col2 at:i) verIsbn = '12' ) ifTrue:[ exist:='true'.
(col2 at:i) inspect .
 ]].
exist inspect.!

|b n l is t a e col1 col2 exist|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].

"col1 buscarLibroIsbn: unIsbn."



"1 to: col2 size do:[:i|(col2 at:i) verTitulo inspect]."
1 to: col2 size do:[:i|((col2 at:i) verIsbn = '1' ) ifTrue:[ exist:='true'.
(col2 at:i) inspect .
 ]].!

|b n l is t a e col1 col2 exist|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].

"col1 buscarLibroIsbn: unIsbn."



"1 to: col2 size do:[:i|(col2 at:i) verTitulo inspect]."
1 to: col2 size do:[:i|((col2 at:i) verIsbn = '1' ) ifTrue:[ exist:='true'.
(col2 at:i) inspect .
 ]].!

|b n l is t a e col1 col2 exist|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].

col1 buscarLibroIsbn: '1'.!

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
1 to: libros size do:[:i|((libros at:i) verIsbn = unIsbn ) ifTrue:[ ^ true "(libros at:i)"] ].

! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

|b n l is t a e col1 col2 exist|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].

col1 buscarLibroIsbn: '1'.!

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
|l1|
1 to: libros size do:[:i|((libros at:i) verIsbn = unIsbn ) ifTrue:[  l1 :=(libros at:i) ] ].
^l1.
! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

|b n l is t a e col1 col2 exist|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].

col1 buscarLibroIsbn: '1'.!

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
1 to: libros size do:[:i|(( libros at:i) verIsbn = '1' ) ifTrue:[ 
(libros at:i) inspect .
 ]].! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

|b n l is t a e col1 col2 exist|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].

col1 buscarLibroIsbn: '1'.!

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
1 to: libros size do:[:i|(( libros at:i) verIsbn = unIsbn ) ifTrue:[ 
(libros at:i).
 ]].! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

|b n l is t a e col1 col2 exist|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].

col1 buscarLibroIsbn: '1'.!

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
|bi1 l1|
bi1:=libros.
1 to: bi1 size do:[:i|(( bi1 at:i) verIsbn = unIsbn ) ifTrue:[ 
l1 :=(libros at:i).
 ]].
^l1.! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

|b n l is t a e col1 col2 exist|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].

col1 buscarLibroIsbn: '1'.!

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
|bi1 l1|
bi1:=libros.
l1:=(libros at: 1).
"1 to: bi1 size do:[:i|(( bi1 at:i) verIsbn = unIsbn ) ifTrue:[ 
l1 :=(libros at:i).
 ]]."
^l1.! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

|b n l is t a e col1 col2 exist|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].

col1 buscarLibroIsbn: '1'.!

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
"1 to: bi1 size do:[:i|(( bi1 at:i) verIsbn = unIsbn ) ifTrue:[ 
l1 :=(libros at:i).
 ]]."
^nombre.! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

|b n l is t a e col1 col2 exist|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


1 to: col1 size do:[:i|((col1 at:i) verEstado=false) ifTrue:[ col2 add:(col1 at:i)] ].

col1 buscarLibroIsbn: '1'.!

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
^nombre.! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

|b n l is t a e col1 col2 exist|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.
col1 buscarLibroIsbn: '1'.!

|b n l is t a e col1 col2 exist|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.
 col1 modiNombreBiblioteca: 'nuevo'.!

|b n l is t a e col1 col2 exist|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.
col1 modiNombreBiblioteca: 'nuevo'!

|b n l is t a e col1 col2 exist lib|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
lib:=l.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.
col1 modiNombreBiblioteca: 'nuevo'!

|b n l is t a e col1 col2 exist lib|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
lib:=l.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


col1 existeLibro: lib.!

|b n l is t a e col1 col2 exist lib|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
lib:=l.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


b buscarLibroIsbn: '1'.

!

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
1 to: libros size do:[:i|(( libros at:i) verIsbn = unIsbn ) ifTrue:[ 
^(libros at:i).
 ]].! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

|b n l is t a e col1 col2 exist lib|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
lib:=l.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


b buscarLibroIsbn: '1'.!

|b n l is t a e col1 col2 exist lib|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


 lib :=b buscarLibroIsbn: '1'.
lib inspect.!

|b n l is t a e col1 col2 exist lib|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


 lib :=b buscarLibroIsbn: '12'.
lib inspect.
!

|b n l is t a e col1 col2 exist lib|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


 lib :=b buscarLibroIsbn: '12'.!

|b n l is t a e col1 col2 exist lib|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


 lib :=b buscarLibroIsbn: '1'.!

|b n l is t a e col1 col2 exist lib|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


 lib :=b buscarLibroIsbn: '1'.!

|b n l is t a e col1 col2 exist lib|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


 lib :=b buscarLibroIsbn: '12'.!

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
|lib|
1 to: libros size do:[:i|(( libros at:i) verIsbn = unIsbn ) ifTrue:[ 
lib :=(libros at:i).
 ]
].
^lib.! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

|b n l is t a e col1 col2 exist lib|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


 lib :=b buscarLibroIsbn: '12'.!

|b n l is t a e col1 col2 exist lib|
n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


 lib :=b buscarLibroIsbn: '1'.!

|b n l is t a e col1 col2 exist lib|

n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


 lib :=b buscarLibroIsbn: Prompter prompt:'Ingrese un autor'.!

|b n l is t a e col1 col2 exist lib|

n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.


 lib :=b buscarLibroIsbn: Prompter prompt:'Ingrese un autor'.!

|b n l is t a e col1 col2 exist lib|

n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.

exist:=Prompter prompt:'Ingrese un autor'.
 lib :=b buscarLibroIsbn: exist.!

|b n l is t a e col1 col2 exist lib|

n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.

exist:=Prompter prompt:'Ingrese un autor'.
 lib :=b buscarLibroIsbn: exist.!

|b n l is t a e col1 col2 exist lib|

n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.

exist:=Prompter prompt:'Ingrese un autor'.
 lib :=b buscarLibroIsbn: exist.
 "'1'."
lib inspect.
!

"21:58:10, 10 May 2021: Image saved"!

"21:58:18, 10 May 2021: Image saved"!

"21:58:27, 10 May 2021: Image saved"!

"21:58:48, 10 May 2021: Image saved"!

"17:21:08, 11 May 2021: Dolphin Smalltalk Professional started"!

"17:22:08, 11 May 2021: Image saved"!

"17:54:57, 11 May 2021: Dolphin Smalltalk Professional started"!

|b n l is t a e col1 col2 exist lib|

n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= '12'.
"Prompter prompt: 'Ingrese un isbn'."
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.

exist:=Prompter prompt:'Ingrese un isbn'.
 lib :=b buscarLibroIsbn: exist.!

!Libro methodsFor!
vertitulo
^titulo.! !
!Libro categoriesFor: #vertitulo!public! !

Libro removeSelector: #vertitulo ifAbsent: []!

!Libro methodsFor!
verEditorial
^editorial.! !
!Libro categoriesFor: #verEditorial!public! !

!Libro methodsFor!
verAutor
^autor.! !
!Libro categoriesFor: #verAutor!public! !

|b n l is t a e col1 col2 exist lib|

n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.

exist:=Prompter prompt:'Ingrese un isbn'.
 lib :=b buscarLibroIsbn: exist.!

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
|lib|
lib:=nil.
1 to: libros size do:[:i|(( libros at:i) verIsbn = unIsbn ) ifTrue:[ 
lib :=(libros at:i).
 ]
].
^lib.! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

|b n l is t a e col1 col2 exist lib|

n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.

exist:=Prompter prompt:'Ingrese un isbn'.
 lib :=b buscarLibroIsbn: exist.!

|b n l is t a e col1 col2 exist lib|

n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
t:= Prompter prompt:'Ingrese un título'.
a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.

exist:=Prompter prompt:'Ingrese un isbn'.
 lib :=b buscarLibroIsbn: exist.
!

"18:43:55, 11 May 2021: Image saved"!

"14:47:15, 12 May 2021: Image saved"!

"20:57:57, 21 May 2021: Dolphin Smalltalk Professional started"!

|suma |
1 to:7 do:[:n| 
	(n+7=0) ifTrue:[ suma:=n ].
	
	].
suma inspect.!


|suma |
1 to:7 do:[:n| 
	(n%7=0) ifTrue:[ suma:=n ].
	
	].
suma inspect.!

|suma |
1 to:7 do:[:n| 
	(n%7=0 and n=7) ifTrue:[ suma:=n ].
	
	].
suma inspect.!

|suma |
1 to:7 do:[:n| 
	(n%7=0 and n=7) ifTrue:[ suma:=n ].
	
	].
suma inspect.!


|suma |
1 to:7 do:[:n| 
	(n%7=0 & n=7) ifTrue:[ suma:=n ].
	
	].
suma inspect.!

|suma |
suma:=0.
1 to:100 do:[:n| 
	(n%7=0) ifTrue:[ 
	(n%2=0)ifTrue:[suma:=suma+n. ].
].
	
	].
suma inspect.!

|suma nums|
suma:=0.
nums:= OrderedCollection new.
1 to:100 do:[:n| 
	(n%7=0) ifTrue:[ 
	(n%2=0)ifTrue:[suma:=suma+n.
	nums add:n.
	].
].
	
	].
suma inspect.
nums inspect.!

|suma nums|
suma:=0.
nums:= OrderedCollection new.
1 to:100 do:[:n| 
	(n%7=0) ifTrue:[ 
	(n%2!!=0)ifTrue:[suma:=suma+n.
	nums add:n.
	].
].
	
	].
suma inspect.
nums inspect.!

|suma nums|
suma:=0.
nums:= OrderedCollection new.
1 to:100 do:[:n| 
	(n%7=0) ifTrue:[ 
	(n%2!!=0)ifTrue:[suma:=suma+n.
	nums add:n.
	].
].
	
	].
suma inspect.
nums inspect.!

|suma nums|
suma:=0.
nums:= OrderedCollection new.
1 to:100 do:[:n| 
	(n%7=0) ifTrue:[ 
	(n%2!!0)ifTrue:[suma:=suma+n.
	nums add:n.
	].
].
	
	].
suma inspect.
nums inspect.!

|suma nums|
suma:=0.
nums:= OrderedCollection new.
1 to:100 do:[:n| 
	(n%7=0) ifTrue:[ 
	(n%2<>0)ifTrue:[suma:=suma+n.
	nums add:n.
	].
].
	
	].
suma inspect.
nums inspect.!

|suma nums|
suma:=0.
nums:= OrderedCollection new.
1 to:100 do:[:n| 
	(n%7=0) ifTrue:[ 
	(n%2=0)ifTrue:[suma:=suma+n.
	nums add:n.
	].
].
	
	].
suma inspect.
nums inspect.!

|suma nums|
suma:=0.
nums:= OrderedCollection new.
1 to:100 do:[:n| 
	(n%7=0) ifTrue:[ 
	(n%2=0 not)ifTrue:[suma:=suma+n.
	nums add:n.
	].
].
	
	].
suma inspect.
nums inspect.!

|suma nums|
suma:=0.
nums:= OrderedCollection new.
1 to:100 do:[:n| 
	(n%7=0) ifTrue:[ 
	(n%2=0)ifTrue: [ suma:=suma+n.
	nums add:n.
	].
].
	
	].
suma inspect.
nums inspect.!

|suma nums|
suma:=0.
nums:= OrderedCollection new.
1 to:100 do:[:n| 
	(n%7=0) ifTrue:[ 
	(n%2!!=0)ifTrue: [ suma:=suma+n.
	nums add:n.
	].
].
	
	].
suma inspect.
nums inspect.!

|suma nums|
suma:=0.
nums:= OrderedCollection new.
1 to:100 do:[:n| 
	(n%7=0) ifTrue:[ 
	(n%2=0)ifFalse:[ suma:=suma+n.
	nums add:n.
	].
].
	
	].
suma inspect.
nums inspect.!

"b) Escribir un código Smalltalk que sume y retorne los números
múltiplos de 7 que no sean pares, dentro de los 100 primeros números
naturales."

|suma nums|
suma:=0.
nums:= OrderedCollection new.
1 to:100 do:[:n| 
	(n%7=0) ifTrue:[ 
	(n%2=0)ifFalse:[ suma:=suma+n.
	nums add:n.
	].
].
	
	].
suma inspect.
nums inspect.!

"21:43:34, 21 May 2021: Image saved"!

"19:00:37, 30 May 2021: Dolphin Smalltalk Professional started"!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.
rta3:=d at:'pavo'.
d at:'fuego' ifAbsent:['no lo se'].
d removeKey:'fuego' ifAbsent:[^nil].!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.
rta3:=d at:'pavo'.!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.
rta3:=d at:'pavo'.!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.
rta3:=d at:'pavo'.!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.
rta3:=d at:'pavo'.!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.

rta3:=d at:'golondrina'.!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.

rta3:=d at:'pavo'.!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.

rta3:=d at:'golondrin'.!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.

rta3:=d at:'golondrin'a.!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.

rta3:=d at:'golondrin'.!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.

rta3:=d at:'golondrina'.!

!Biblioteca methodsFor!
buscarLibroIsbnDetect:unIsbn
|lib|
lib:=nil.
1 to: libros size do:[:i|(( libros at:i) verIsbn = unIsbn ) ifTrue:[ 
lib :=(libros at:i).
 ]
].
^lib.! !
!Biblioteca categoriesFor: #buscarLibroIsbnDetect:!public! !

!Biblioteca methodsFor!
buscarLibroIsbnDetect:unIsbn
|lib|
lib:= libros detect:[:alu| alu isbn=unIsbn ] ifNone:[^nil]! !
!Biblioteca categoriesFor: #buscarLibroIsbnDetect:!public! !

|b n l is t a e col1 col2 exist lib|

n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
	t:= Prompter prompt:'Ingrese un título'.
	a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
	e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
	l:= Libro crearLibroIsbn: is tit:t aut:a edit:e.
	b agregarLibro:l].!

|b n l is t a e col1 col2 exist lib|

n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
	t:= Prompter prompt:'Ingrese un título'.
	a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
	e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
	l:= Libro crearLibroIsbn: is tit:t aut:a edit:e.
	b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.

exist:=Prompter prompt:'Ingrese el isbn a buscar'.
 lib :=b buscarLibroIsbnDetect:exist.
lib inspect.!

!Biblioteca methodsFor!
buscarLibroIsbnDetect:unIsbn
|lib|
lib= libros detect:[:libr| libr verIsbn =unIsbn ] ifNone:[^nil].! !
!Biblioteca categoriesFor: #buscarLibroIsbnDetect:!public! !

|b n l is t a e col1 col2 exist lib|

n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
	t:= Prompter prompt:'Ingrese un título'.
	a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
	e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
	l:= Libro crearLibroIsbn: is tit:t aut:a edit:e.
	b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.

exist:=Prompter prompt:'Ingrese el isbn a buscar'.
 lib :=b buscarLibroIsbnDetect:exist.
lib inspect.!

!Biblioteca methodsFor!
buscarLibroIsbnDetect:unIsbn
 | libroret |
    "Retorna el libro de Isbn unIsbn si existe, nil en cc"
    libroret := libros detect: [:lib | lib verIsbn = unIsbn] ifNone: [^nil].
    ^libroret! !
!Biblioteca categoriesFor: #buscarLibroIsbnDetect:!public! !

|b n l is t a e col1 col2 exist lib|

n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:2 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
	t:= Prompter prompt:'Ingrese un título'.
	a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
	e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
	l:= Libro crearLibroIsbn: is tit:t aut:a edit:e.
	b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.

exist:=Prompter prompt:'Ingrese el isbn a buscar'.
 lib :=b buscarLibroIsbnDetect:exist.
lib inspect.!

!Biblioteca methodsFor!
buscarLibroIsbnDetect:unIsbn
 | libroret |
    "Retorna el libro de Isbn unIsbn si existe, nil en cc"
    libroret := libros detect: [:lib | lib verIsbn = unIsbn] ifNone: [^nil].
    "^libroret"! !
!Biblioteca categoriesFor: #buscarLibroIsbnDetect:!public! !

|b n l is t a e col1 col2 exist lib|

n:= 'biblioteca'.
"Prompter prompt: 'Ingrese un nombre'."
b:= Biblioteca crearBiblioNom:n.
1 to:1 do:[:i| is:= Prompter prompt: 'Ingrese un isbn'.
	t:= Prompter prompt:'Ingrese un título'.
	a:= 'autor1'.
"Prompter prompt:'Ingrese un autor'."
	e:= 'editor1'.
"Prompter prompt: 'Ingrese una editorial'."
	l:= Libro crearLibroIsbn: is tit:t aut:a edit:e.
	b agregarLibro:l].
col1:=b todosLosLibros.
"(col1 at:1) verEstado ."
"((col1 at:1) verEstado=false) ifTrue:[(col1 at:1)modiEstado: true ].
(col1 at:1) verEstado ."
col2 := OrderedCollection new.

exist:=Prompter prompt:'Ingrese el isbn a buscar'.
 lib :=b buscarLibroIsbnDetect:exist.
lib inspect.!

!Biblioteca methodsFor!
buscarLibroIsbnDetect:unIsbn
 | libroret |
    "Retorna el libro de Isbn unIsbn si existe, nil en cc"
    libroret := libros detect: [:lib | lib verIsbn = unIsbn] ifNone: [^nil].
    ^libroret! !
!Biblioteca categoriesFor: #buscarLibroIsbnDetect:!public! !

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.
"rta3:=d at:'pavo'. "
"Rte3 da error porque el valor pavo no esta en el diccionario"
d at:'fuego' ifAbsent:['no lo se'].
d removeKey:'fuego' ifAbsent:[^nil].!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.
"rta3:=d at:'pavo'. "
"Rte3 da error porque el valor pavo no esta en el diccionario"
d at:'fuego' ifAbsent:['no lo se'].
d removeKey:'fuego' ifAbsent:[^nil].!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.
"rta3:=d at:'pavo'. "
"Rte3 da error porque el valor pavo no esta en el diccionario"
d at:'fuego' ifAbsent:['no lo se'].!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.
"rta3:=d at:'pavo'. "
"Rte3 da error porque el valor pavo no esta en el diccionario"
d at:'fuego' ifAbsent:['no lo se'].!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.
"rta3:=d at:'pavo'. "
"Rte3 da error porque el valor pavo no esta en el diccionario"
d at:'fuego' ifAbsent:['no lo se'].
d removeKey:'fuego' ifAbsent:[^nil].!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.
"rta3:=d at:'pavo'. "
"Rte3 da error porque el valor pavo no esta en el diccionario"
d at:'olmo' ifAbsent:['no lo se'].!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.
"rta3:=d at:'pavo'. "
"Rte3 da error porque el valor pavo no esta en el diccionario"
d at:'árbol' ifAbsent:['no lo se'].!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.
"rta3:=d at:'pavo'. "
"Rte3 da error porque el valor pavo no esta en el diccionario"
d at:'árbol' ifAbsent:['no lo se'].!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.
"rta3:=d at:'pavo'. "
"Rte3 da error porque el valor pavo no esta en el diccionario"
d at:'olmo' ifAbsent:['no lo se'].!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.
"rta3:=d at:'pavo'. "
"Rte3 da error porque el valor pavo no esta en el diccionario"
d at:'fuego' ifAbsent:['no lo se'].
d removeKey:'fuego' ifAbsent:[^nil].!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.
"rta3:=d at:'pavo'. "
"Rte3 da error porque el valor pavo no esta en el diccionario"
d at:'fuego' ifAbsent:['no lo se'].
d removeKey:'fu2ego' ifAbsent:[^nil].!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.
"rta3:=d at:'pavo'. "
"Rte3 da error porque el valor pavo no esta en el diccionario"
d at:'fuego' ifAbsent:['no lo se'].
d removeKey:'fuego3r' ifAbsent:[^nil].!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.
"rta3:=d at:'pavo'. "
"Rte3 da error porque el valor pavo no esta en el diccionario"
d at:'fuego24' ifAbsent:['no lo se'].!

"20:16:13, 30 May 2021: Image saved"!

"20:09:09, 04 June 2021: Image saved"!

"18:16:30, 08 June 2021: Dolphin Smalltalk Professional started"!

"22:25:44, 09 June 2021: Image saved"!

"18:54:58, 13 June 2021: Dolphin Smalltalk Professional started"!

"18:55:29, 13 June 2021: Image saved"!

"19:17:58, 13 June 2021: Dolphin Smalltalk Professional started"!

Object subclass: #Producto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Producto guid: (GUID fromString: '{5ace5718-0b11-435a-962c-6c7364b221fb}')!
Producto comment: ''!
!Producto categoriesForClass!Kernel-Objects! !
!Producto methodsFor!
iniProducto:unidentificador nombre:unnombre ! !
!Producto categoriesFor: #iniProducto:nombre:!public! !

Object subclass: #Producto
	instanceVariableNames: ' identificador nombre precioUnitario stock'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Producto class methodsFor!
crearProducto:unidentificador nombre:unnombre 
^(self new) iniProducto: unidentificador nombre: unnombre! !
!Producto class categoriesFor: #crearProducto:nombre:!public! !

!Producto methodsFor!
iniProducto:unidentificador nombre:unnombre precioUnitario:unprecio stock:unstock
identificador:=unidentificador.
! !
!Producto categoriesFor: #iniProducto:nombre:precioUnitario:stock:!public! !

Producto removeSelector: #iniProducto:nombre: ifAbsent: []!

!Producto methodsFor!
iniProducto:unidentificador nombre:unnombre precioUnitario:unprecio stock:unstock
identificador:=unidentificador.
nombre:= unnombre.
precioUnitario:=unprecio.
stock:=unstock.
! !
!Producto categoriesFor: #iniProducto:nombre:precioUnitario:stock:!public! !

!Producto methodsFor!
iniProducto: unidentificador nombre: unnombre precioUnitario: unprecio stock: unstock
	identificador := unidentificador.
	nombre := unnombre.
	precioUnitario := unprecio.
	stock := unstock! !
!Producto categoriesFor: #iniProducto:nombre:precioUnitario:stock:!public! !

!Producto methodsFor!
iniProducto: unidentificador nombre: unnombre precioUnitario: unprecio stock: unstock
	identificador := unidentificador.
	nombre := unnombre.
	precioUnitario := unprecio.
	stock := unstock! !
!Producto categoriesFor: #iniProducto:nombre:precioUnitario:stock:!public! !

!Producto class methodsFor!
crearProducto:unidentificador nombre:unnombre precioUnitario: unprecio stock: unstock
^(self new) iniProducto: unidentificador nombre: unnombre precioUnitario: unprecio stock: unstock! !
!Producto class categoriesFor: #crearProducto:nombre:precioUnitario:stock:!public! !

!Producto methodsFor!
verStock
^stock .! !
!Producto categoriesFor: #verStock!public! !

!Producto methodsFor!
descontarStock: cantidad
stock:=stock-cantidad.! !
!Producto categoriesFor: #descontarStock:!public! !

!Producto methodsFor!
verPrecio
^precioUnitario .! !
!Producto categoriesFor: #verPrecio!public! !

!Producto methodsFor!
modificarPrecio:nuevoprecio
precioUnitario:=nuevoprecio.! !
!Producto categoriesFor: #modificarPrecio:!public! !

Object subclass: #CarritodeCompras
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
CarritodeCompras guid: (GUID fromString: '{978b4b69-3093-4974-9a0b-77e20c0721ff}')!
CarritodeCompras comment: ''!
!CarritodeCompras categoriesForClass!Kernel-Objects! !
Object subclass: #CarritodeCompras
	instanceVariableNames: 'ListadeProducto PrecioTotal'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Producto class removeSelector: #crearProducto:nombre: ifAbsent: []!

Object subclass: #CarritodeCompras
	instanceVariableNames: 'listadeProducto precioTotal'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!CarritodeCompras methodsFor!
iniCarrito
precioTotal := 0.
listadeProducto := OrderedCollection new.! !
!CarritodeCompras categoriesFor: #iniCarrito!public! !

!CarritodeCompras class methodsFor!
crearCarrito
^(self new) iniCarrito.! !
!CarritodeCompras class categoriesFor: #crearCarrito!public! !

!CarritodeCompras methodsFor!
iniCarrito
precioTotal := 0.
listadeProducto := OrderedCollection new.! !
!CarritodeCompras categoriesFor: #iniCarrito!public! !

!CarritodeCompras methodsFor!
agregarProducto: unproducto
listadeProducto  add:unproducto.! !
!CarritodeCompras categoriesFor: #agregarProducto:!public! !

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta|
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .]! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
agregarProducto: unproducto
listadeProducto  add:unproducto.
unproducto descontarStock: 1.! !
!CarritodeCompras categoriesFor: #agregarProducto:!public! !

!Producto methodsFor!
devolverproducto
stock:=stock+1.! !
!Producto categoriesFor: #devolverproducto!public! !

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta|
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .]! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
verCarrito
^listadeProducto.! !
!CarritodeCompras categoriesFor: #verCarrito!public! !

|productoa productob carrito1 |

productoa :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.!

|productoa productob carrito1 |

productoa :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 1 stock: 2.
productoB :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.!

|productoa productob carrito1 |

productoa :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 1 stock: 2.
productoB :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.!

|productoa productob carrito1 |

productoa :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 1 stock: 2.
productoB :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.

carrito1 agregarProducto: productoa!

|productoa productob carrito1 |

productoa :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 1 stock: 2.
productoB :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.

carrito1 agregarProducto: productoa .!

|productoa productob carrito1 |

productoa :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 1 stock: 2.
productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.

carrito1 agregarProducto: productoa .

productoa verStock.!

|productoa productob carrito1 |

productoa :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 1 stock: 2.
productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.

carrito1 agregarProducto: productoa .

productoa verStock.

carrito1 verCarrito.!

|productoa productob carrito1 |

productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.
productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.

carrito1 agregarProducto: productoa .

productoa verStock.

carrito1 verCarrito.!

|productoa productob carrito1 |

productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.
productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.

carrito1 agregarProducto: productoa .

productoa verStock.

carrito1 verCarrito.

carrito1 quitarProducto: productob.!

|productoa productob carrito1 |

productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.
productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.

carrito1 agregarProducto: productoa .

productoa verStock.

carrito1 verCarrito.

carrito1 quitarProducto: productoa.

productoa verStock.!

|productoa productob carrito1 |

productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.
productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.

carrito1 agregarProducto: productoa .

productoa verStock.

carrito1 verCarrito.

carrito1 quitarProducto: productoa.

productoa verStock.!

Object subclass: #Factura
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Factura guid: (GUID fromString: '{a6b4297f-4fc2-453b-b785-d8a8b62a9f73}')!
Factura comment: ''!
!Factura categoriesForClass!Kernel-Objects! !
Object subclass: #Factura
	instanceVariableNames: 'numerofactura medioDePago fecha descuento importetotal'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Factura methodsFor!
iniFacturanumfactura:unnumfac mediodepago:unmediodepago fecha:unafecha descuento:undescuento importetotal:unimportetotal
numerofactura:=unnumfac.
medioDePago:=unmediodepago.
fecha:=unafecha.
descuento:=undescuento.
importetotal:=importetotal.! !
!Factura categoriesFor: #iniFacturanumfactura:mediodepago:fecha:descuento:importetotal:!public! !

!Factura class methodsFor!
CrearFacturanumfactura:unnumfac mediodepago:unmediodepago fecha:unafecha descuento:undescuento importetotal:unimportetotal
^(self  new )iniFacturanumfactura: unnumfac mediodepago: unmediodepago fecha: unafecha descuento: undescuento importetotal: unimportetotal.! !
!Factura class categoriesFor: #CrearFacturanumfactura:mediodepago:fecha:descuento:importetotal:!public! !

!Factura methodsFor!
EmitirTiket
^numerofactura, importetotal.! !
!Factura categoriesFor: #EmitirTiket!public! !

Object subclass: #Supermercado
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Supermercado guid: (GUID fromString: '{6abba832-c3d9-44d3-b560-0b0fef5b7e2e}')!
Supermercado comment: ''!
!Supermercado categoriesForClass!Kernel-Objects! !
!Supermercado class methodsFor!
crearSuperNom:unNom
"Retorna una instancia de Supermercado inicializada"
^(self new) iniSuperNom:unNom.! !
!Supermercado class categoriesFor: #crearSuperNom:!public! !

Object subclass: #Supermercado
	instanceVariableNames: 'nombre clientes empleados productos facturas'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Supermercado methodsFor!
iniSuperNom:unNom
"Inicializa una instancia de Biblioteca"
nombre:=unNom.
clientes:= OrderedCollection new.
empleados:= OrderedCollection new.
productos:= OrderedCollection new.
facturas:= OrderedCollection new.! !
!Supermercado categoriesFor: #iniSuperNom:!public! !

!Supermercado methodsFor!
agregarProducto:unProducto
"Agrega un empleado"
productos add:unProducto.! !
!Supermercado categoriesFor: #agregarProducto:!public! !

!Supermercado methodsFor!
agregarFactura:unFactura
"Agrega un empleado"
facturas add:unFactura.! !
!Supermercado categoriesFor: #agregarFactura:!public! !

!Supermercado methodsFor!
agregarEmpleado:unEmpleado
"Agrega un empleado"
empleados add:unEmpleado.! !
!Supermercado categoriesFor: #agregarEmpleado:!public! !

!Supermercado methodsFor!
agregarCliente:unCliente
"Agrega un cliente"
clientes add:unCliente.! !
!Supermercado categoriesFor: #agregarCliente:!public! !

"20:50:16, 13 June 2021: Image saved"!

"20:50:22, 13 June 2021: Image saved"!

"20:50:23, 13 June 2021: Image saved"!

"20:50:37, 13 June 2021: Image saved"!

"20:54:17, 13 June 2021: Image saved"!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Persona
	instanceVariableNames: 'nombre apellido dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!
Persona comment: ''!

Persona comment:
''!
!Persona categoriesForClass!Kernel-Objects! !
!Persona methodsFor!
iniPersona:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.! !
!Persona methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Persona methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Persona methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.! !
!Persona methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Persona methodsFor!
verDni
"Retorna el apellido"
^dni.! !
!Persona methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Persona categoriesFor: #iniPersona:nom:ape:!public! !

!Persona categoriesFor: #modiApellido:!public! !

!Persona categoriesFor: #modiDni:!public! !

!Persona categoriesFor: #modiNombre:!public! !

!Persona categoriesFor: #verApellido!public! !

!Persona categoriesFor: #verDni!public! !

!Persona categoriesFor: #verNombre!public! !

!Persona class methodsFor!
crearPersona:unDni nom:unNombre ape:unApellido
"Retorna una instancia de Libro inicializada"
^(self new) iniPersona:unDni nom:unNombre ape:unApellido.! !
!Persona class categoriesFor: #crearPersona:nom:ape:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Persona
	instanceVariableNames: 'nombre apellido dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!
Persona comment: ''!

Persona comment:
''!
!Persona methodsFor!
iniPersona:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.! !
!Persona methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Persona methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Persona methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.! !
!Persona methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Persona methodsFor!
verDni
"Retorna el apellido"
^dni.! !
!Persona methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Persona categoriesFor: #iniPersona:nom:ape:!public! !

!Persona categoriesFor: #modiApellido:!public! !

!Persona categoriesFor: #modiDni:!public! !

!Persona categoriesFor: #modiNombre:!public! !

!Persona categoriesFor: #verApellido!public! !

!Persona categoriesFor: #verDni!public! !

!Persona categoriesFor: #verNombre!public! !

!Persona class methodsFor!
crearPersona:unDni nom:unNombre ape:unApellido
"Retorna una instancia de Libro inicializada"
^(self new) iniPersona:unDni nom:unNombre ape:unApellido.! !
!Persona class categoriesFor: #crearPersona:nom:ape:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Persona
	instanceVariableNames: 'nombre apellido dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!
Persona comment: ''!

Persona comment:
''!
!Persona methodsFor!
iniPersona:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.! !
!Persona methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Persona methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Persona methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.! !
!Persona methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Persona methodsFor!
verDni
"Retorna el apellido"
^dni.! !
!Persona methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Persona categoriesFor: #iniPersona:nom:ape:!public! !

!Persona categoriesFor: #modiApellido:!public! !

!Persona categoriesFor: #modiDni:!public! !

!Persona categoriesFor: #modiNombre:!public! !

!Persona categoriesFor: #verApellido!public! !

!Persona categoriesFor: #verDni!public! !

!Persona categoriesFor: #verNombre!public! !

!Persona class methodsFor!
crearPersona:unDni nom:unNombre ape:unApellido
"Retorna una instancia de Libro inicializada"
^(self new) iniPersona:unDni nom:unNombre ape:unApellido.! !
!Persona class categoriesFor: #crearPersona:nom:ape:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Persona
	instanceVariableNames: 'nombre apellido dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!
Persona comment: ''!

Persona comment:
''!
!Persona methodsFor!
iniPersona:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.! !
!Persona methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Persona methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Persona methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.! !
!Persona methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Persona methodsFor!
verDni
"Retorna el apellido"
^dni.! !
!Persona methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Persona categoriesFor: #iniPersona:nom:ape:!public! !

!Persona categoriesFor: #modiApellido:!public! !

!Persona categoriesFor: #modiDni:!public! !

!Persona categoriesFor: #modiNombre:!public! !

!Persona categoriesFor: #verApellido!public! !

!Persona categoriesFor: #verDni!public! !

!Persona categoriesFor: #verNombre!public! !

!Persona class methodsFor!
crearPersona:unDni nom:unNombre ape:unApellido
"Retorna una instancia de Libro inicializada"
^(self new) iniPersona:unDni nom:unNombre ape:unApellido.! !
!Persona class categoriesFor: #crearPersona:nom:ape:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Persona
	instanceVariableNames: 'nombre apellido dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!
Persona comment: ''!

Persona comment:
''!
!Persona methodsFor!
iniPersona:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.! !
!Persona methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Persona methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Persona methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.! !
!Persona methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Persona methodsFor!
verDni
"Retorna el apellido"
^dni.! !
!Persona methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Persona categoriesFor: #iniPersona:nom:ape:!public! !

!Persona categoriesFor: #modiApellido:!public! !

!Persona categoriesFor: #modiDni:!public! !

!Persona categoriesFor: #modiNombre:!public! !

!Persona categoriesFor: #verApellido!public! !

!Persona categoriesFor: #verDni!public! !

!Persona categoriesFor: #verNombre!public! !

!Persona class methodsFor!
crearPersona:unDni nom:unNombre ape:unApellido
"Retorna una instancia de Libro inicializada"
^(self new) iniPersona:unDni nom:unNombre ape:unApellido.! !
!Persona class categoriesFor: #crearPersona:nom:ape:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Persona subclass: #Cliente
	instanceVariableNames: 'credito'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Cliente guid: (GUID fromString: '{cff8b5d2-951e-470b-9a64-de9ba8c43043}')!

Cliente guid: (GUID fromString: '{cff8b5d2-951e-470b-9a64-de9ba8c43043}')!
Cliente comment: ''!

Cliente comment:
''!
!Cliente categoriesForClass!Kernel-Objects! !
!Cliente methodsFor!
iniPersonaCliente:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.
credito:=0.! !
!Cliente methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Cliente methodsFor!
modiCredito:unCred
"Modifica el dni de persona"
credito :=unCred.! !
!Cliente methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Cliente methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.
! !
!Cliente methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Cliente methodsFor!
verCredito
"Retorna el nombre"
^credito.! !
!Cliente methodsFor!
verDni
"Retorna el apellido"
^dni.
! !
!Cliente methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Cliente categoriesFor: #iniPersonaCliente:nom:ape:!public! !

!Cliente categoriesFor: #modiApellido:!public! !

!Cliente categoriesFor: #modiCredito:!public! !

!Cliente categoriesFor: #modiDni:!public! !

!Cliente categoriesFor: #modiNombre:!public! !

!Cliente categoriesFor: #verApellido!public! !

!Cliente categoriesFor: #verCredito!public! !

!Cliente categoriesFor: #verDni!public! !

!Cliente categoriesFor: #verNombre!public! !

!Cliente class methodsFor!
crearPersonaCliente:unDni nom:unNombre ape:unApellido 
"Retorna una instancia de Libro inicializada"
^(self new) iniPersonaCliente:unDni nom:unNombre ape:unApellido.! !
!Cliente class categoriesFor: #crearPersonaCliente:nom:ape:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Persona subclass: #Empleado
	instanceVariableNames: 'puesto salario'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Empleado guid: (GUID fromString: '{5e3a3679-5ba0-4926-b5df-5f9237ceb1c2}')!

Empleado guid: (GUID fromString: '{5e3a3679-5ba0-4926-b5df-5f9237ceb1c2}')!
Empleado comment: ''!

Empleado comment:
''!
!Empleado categoriesForClass!Kernel-Objects! !
!Empleado methodsFor!
iniPersonaEmpleado:unDni nom:unNombre ape:unApellido pues:unPuesto sal:unSalario
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.
puesto:=unPuesto.
salario:=unSalario.
! !
!Empleado methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Empleado methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Empleado methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.! !
!Empleado methodsFor!
modiPuesto:unPuesto
"Modifica el puesto de empleado"
puesto:=unPuesto.! !
!Empleado methodsFor!
modiSalario:unSalario
"Modifica el dni de persona"
salario:=unSalario.! !
!Empleado methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Empleado methodsFor!
verDni
"Retorna el apellido"
^dni.! !
!Empleado methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Empleado methodsFor!
verPuesto
"Retorna el nombre"
^puesto.! !
!Empleado methodsFor!
verSalario
"Retorna el nombre"
^salario.! !
!Empleado categoriesFor: #iniPersonaEmpleado:nom:ape:pues:sal:!public! !

!Empleado categoriesFor: #modiApellido:!public! !

!Empleado categoriesFor: #modiDni:!public! !

!Empleado categoriesFor: #modiNombre:!public! !

!Empleado categoriesFor: #modiPuesto:!public! !

!Empleado categoriesFor: #modiSalario:!public! !

!Empleado categoriesFor: #verApellido!public! !

!Empleado categoriesFor: #verDni!public! !

!Empleado categoriesFor: #verNombre!public! !

!Empleado categoriesFor: #verPuesto!public! !

!Empleado categoriesFor: #verSalario!public! !

!Empleado class methodsFor!
crearPersonaEmpleado:unDni nom:unNombre ape:unApellido pues:unPuesto sal:unSalario
"Retorna una instancia de Libro inicializada"
^(self new) iniPersonaEmpleado:unDni nom:unNombre ape:unApellido pues:unPuesto sal:unSalario.! !
!Empleado class categoriesFor: #crearPersonaEmpleado:nom:ape:pues:sal:!public! !

!

|productoa productob carrito1 n s c e p|
n:= Prompter prompt:'Ingrese un nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 2 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.






productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.
productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.

carrito1 agregarProducto: productoa .

productoa verStock.

carrito1 verCarrito.

carrito1 quitarProducto: productoa.

productoa verStock.!

|productoa productob carrito1 n s c e p|
n:= Prompter prompt:'Ingrese un nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Daicabrera' ape: 'Nizua'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 2 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.
productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.

carrito1 agregarProducto: productoa .

productoa verStock.

carrito1 verCarrito.

carrito1 quitarProducto: productoa.

productoa verStock.!

!Supermercado methodsFor!
iniSuperNom:unNom
nombre:=unNom.
clientes:= OrderedCollection new.
empleados:= OrderedCollection new.
productos:= OrderedCollection new.
facturas:= OrderedCollection new.! !
!Supermercado categoriesFor: #iniSuperNom:!public! !

!Supermercado methodsFor!
agregarProducto:unProducto
"Agrega un producto"
productos add:unProducto.! !
!Supermercado categoriesFor: #agregarProducto:!public! !

|productoa productob carrito1 n s c e p|
n:= Prompter prompt:'Ingrese un nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Daicabrera' ape: 'Nizua'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 2 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.
productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa .
productoa verStock.
carrito1 verCarrito.
carrito1 quitarProducto: productoa.
productoa verStock.!

"21:10:49, 13 June 2021: Image saved"!

"21:10:58, 13 June 2021: Image saved"!

"21:11:03, 13 June 2021: Image saved"!

"21:11:07, 13 June 2021: Image saved"!

"15:22:42, 21 June 2021: Dolphin Smalltalk Professional started"!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Supermercado
	instanceVariableNames: 'nombre clientes empleados productos facturas'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Supermercado guid: (GUID fromString: '{a8e61913-e7ea-4bba-8b7c-b733d9b8c678}')!

Supermercado guid: (GUID fromString: '{a8e61913-e7ea-4bba-8b7c-b733d9b8c678}')!
Supermercado comment: ''!

Supermercado comment:
''!
!Supermercado methodsFor!
agregarCliente:unCliente
"Agrega un cliente"
clientes add:unCliente.! !
!Supermercado methodsFor!
agregarEmpleado:unEmpleado
"Agrega un empleado"
empleados add:unEmpleado.! !
!Supermercado methodsFor!
agregarFactura:unFactura
"Agrega un empleado"
facturas add:unFactura.! !
!Supermercado methodsFor!
agregarProducto:unProducto
"Agrega un empleado"
productos add:unProducto.! !
!Supermercado methodsFor!
iniSuperNom:unNom
"Inicializa una instancia de Supermercado"
nombre:=unNom.
clientes:= OrderedCollection new.
empleados:= OrderedCollection new.
productos:= OrderedCollection new.
facturas:= OrderedCollection new.! !
!Supermercado methodsFor!
listarProducos
|a  identificador nom precio stock|
1 to: productos size do:[:i| ((productos at:i) verStock>0 ) ifTrue: [
a:=i printString.
identificador:=(productos at: i) verIdentificador printString.
nom:=(productos at: i) verNombre.
precio:=(productos at: i) verPrecio printString.
stock:=(productos at: i) verStock printString.
Transcript show: a,') Identificador[',identificador,'] ', nom, ' $', precio ,' Stock[', stock, ']'; cr.] ].
! !
!Supermercado methodsFor!
listarProducosIdentificador
|a  identificador nom precio stock|
1 to: productos size do:[:i| ((productos at:i) verStock>0 ) ifTrue: [
a:=i printString.
identificador:=(productos at: i) verIdentificador printString.
nom:=(productos at: i) verNombre.
precio:=(productos at: i) verPrecio printString.
stock:=(productos at: i) verStock printString.
Transcript show: a,') Identificador[',identificador,'] ', nom, ' $', precio ,' Stock[', stock, ']'; cr.] ].
! !
!Supermercado categoriesFor: #agregarCliente:!public! !

!Supermercado categoriesFor: #agregarEmpleado:!public! !

!Supermercado categoriesFor: #agregarFactura:!public! !

!Supermercado categoriesFor: #agregarProducto:!public! !

!Supermercado categoriesFor: #iniSuperNom:!public! !

!Supermercado categoriesFor: #listarProducos!public! !

!Supermercado categoriesFor: #listarProducosIdentificador!public! !

!Supermercado class methodsFor!
crearSuperNom:unNom
"Retorna una instancia de Supermercado inicializada"
^(self new) iniSuperNom:unNom.! !
!Supermercado class categoriesFor: #crearSuperNom:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Supermercado
	instanceVariableNames: 'nombre clientes empleados productos facturas'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Supermercado guid: (GUID fromString: '{a8e61913-e7ea-4bba-8b7c-b733d9b8c678}')!

Supermercado guid: (GUID fromString: '{a8e61913-e7ea-4bba-8b7c-b733d9b8c678}')!
Supermercado comment: ''!

Supermercado comment:
''!
!Supermercado methodsFor!
agregarCliente:unCliente
"Agrega un cliente"
clientes add:unCliente.! !
!Supermercado methodsFor!
agregarEmpleado:unEmpleado
"Agrega un empleado"
empleados add:unEmpleado.! !
!Supermercado methodsFor!
agregarFactura:unFactura
"Agrega un empleado"
facturas add:unFactura.! !
!Supermercado methodsFor!
agregarProducto:unProducto
"Agrega un empleado"
productos add:unProducto.! !
!Supermercado methodsFor!
iniSuperNom:unNom
"Inicializa una instancia de Supermercado"
nombre:=unNom.
clientes:= OrderedCollection new.
empleados:= OrderedCollection new.
productos:= OrderedCollection new.
facturas:= OrderedCollection new.! !
!Supermercado methodsFor!
listarProducos
|a  identificador nom precio stock|
1 to: productos size do:[:i| ((productos at:i) verStock>0 ) ifTrue: [
a:=i printString.
identificador:=(productos at: i) verIdentificador printString.
nom:=(productos at: i) verNombre.
precio:=(productos at: i) verPrecio printString.
stock:=(productos at: i) verStock printString.
Transcript show: a,') Identificador[',identificador,'] ', nom, ' $', precio ,' Stock[', stock, ']'; cr.] ].
! !
!Supermercado methodsFor!
listarProducosIdentificador
|a  identificador nom precio stock|
1 to: productos size do:[:i| ((productos at:i) verStock>0 ) ifTrue: [
a:=i printString.
identificador:=(productos at: i) verIdentificador printString.
nom:=(productos at: i) verNombre.
precio:=(productos at: i) verPrecio printString.
stock:=(productos at: i) verStock printString.
Transcript show: a,') Identificador[',identificador,'] ', nom, ' $', precio ,' Stock[', stock, ']'; cr.] ].
! !
!Supermercado categoriesFor: #agregarCliente:!public! !

!Supermercado categoriesFor: #agregarEmpleado:!public! !

!Supermercado categoriesFor: #agregarFactura:!public! !

!Supermercado categoriesFor: #agregarProducto:!public! !

!Supermercado categoriesFor: #iniSuperNom:!public! !

!Supermercado categoriesFor: #listarProducos!public! !

!Supermercado categoriesFor: #listarProducosIdentificador!public! !

!Supermercado class methodsFor!
crearSuperNom:unNom
"Retorna una instancia de Supermercado inicializada"
^(self new) iniSuperNom:unNom.! !
!Supermercado class categoriesFor: #crearSuperNom:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Producto
	instanceVariableNames: 'identificador nombre precioUnitario stock'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Producto guid: (GUID fromString: '{7f7c382b-7171-4d7b-9380-436e17255d55}')!

Producto guid: (GUID fromString: '{7f7c382b-7171-4d7b-9380-436e17255d55}')!
Producto comment: ''!

Producto comment:
''!
!Producto methodsFor!
descontarStock: cantidad
stock:=stock-cantidad.! !
!Producto methodsFor!
iniProducto: unidentificador nombre: unnombre precioUnitario: unprecio stock: unstock
    identificador := unidentificador.
    nombre := unnombre.
    precioUnitario := unprecio.
    stock := unstock.! !
!Producto methodsFor!
modificarPrecio: nuevoprecio
precioUnitario := nuevoprecio! !
!Producto methodsFor!
verIdentificador
^identificador.! !
!Producto methodsFor!
verNombre
^nombre.! !
!Producto methodsFor!
verPrecio
^precioUnitario .! !
!Producto methodsFor!
verStock
^stock .! !
!Producto categoriesFor: #descontarStock:!public! !

!Producto categoriesFor: #iniProducto:nombre:precioUnitario:stock:!public! !

!Producto categoriesFor: #modificarPrecio:!public! !

!Producto categoriesFor: #verIdentificador!public! !

!Producto categoriesFor: #verNombre!public! !

!Producto categoriesFor: #verPrecio!public! !

!Producto categoriesFor: #verStock!public! !

!Producto class methodsFor!
crearProducto:unidentificador nombre:unnombre precioUnitario: unprecio stock: unstock
^(self new) iniProducto: unidentificador nombre: unnombre precioUnitario: unprecio stock: unstock! !
!Producto class categoriesFor: #crearProducto:nombre:precioUnitario:stock:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Producto
	instanceVariableNames: 'identificador nombre precioUnitario stock'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Producto guid: (GUID fromString: '{7f7c382b-7171-4d7b-9380-436e17255d55}')!

Producto guid: (GUID fromString: '{7f7c382b-7171-4d7b-9380-436e17255d55}')!
Producto comment: ''!

Producto comment:
''!
!Producto methodsFor!
descontarStock: cantidad
stock:=stock-cantidad.! !
!Producto methodsFor!
iniProducto: unidentificador nombre: unnombre precioUnitario: unprecio stock: unstock
    identificador := unidentificador.
    nombre := unnombre.
    precioUnitario := unprecio.
    stock := unstock.! !
!Producto methodsFor!
modificarPrecio: nuevoprecio
precioUnitario := nuevoprecio! !
!Producto methodsFor!
verIdentificador
^identificador.! !
!Producto methodsFor!
verNombre
^nombre.! !
!Producto methodsFor!
verPrecio
^precioUnitario .! !
!Producto methodsFor!
verStock
^stock .! !
!Producto categoriesFor: #descontarStock:!public! !

!Producto categoriesFor: #iniProducto:nombre:precioUnitario:stock:!public! !

!Producto categoriesFor: #modificarPrecio:!public! !

!Producto categoriesFor: #verIdentificador!public! !

!Producto categoriesFor: #verNombre!public! !

!Producto categoriesFor: #verPrecio!public! !

!Producto categoriesFor: #verStock!public! !

!Producto class methodsFor!
crearProducto:unidentificador nombre:unnombre precioUnitario: unprecio stock: unstock
^(self new) iniProducto: unidentificador nombre: unnombre precioUnitario: unprecio stock: unstock! !
!Producto class categoriesFor: #crearProducto:nombre:precioUnitario:stock:!public! !

!

|productoa productob carrito1 n s c e p|
"n:= Prompter prompt:'Ingrese un nombre'."
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'Ramon' ape: 'Peralta' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 2 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.
productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
Transcript clear.
s listarProducos.!

!CarritodeCompras methodsFor!
iniCarrito
precioTotal := 0.
"listadeProducto := OrderedCollection new."
listadeProducto :=Dictionary new. 
! !
!CarritodeCompras categoriesFor: #iniCarrito!public! !

!CarritodeCompras methodsFor!
agregarProducto: unproducto
listadeProducto  add:unproducto.
listadeProducto at: unproducto put: (unproducto verStock).
unproducto descontarStock: 1.
precioTotal:=unproducto verPrecio.! !
!CarritodeCompras categoriesFor: #agregarProducto:!public! !

!CarritodeCompras methodsFor!
agregarProducto: unproducto
"listadeProducto  add:unproducto."
listadeProducto at: unproducto put: (unproducto verStock).
unproducto descontarStock: 1.
precioTotal:=unproducto verPrecio.! !
!CarritodeCompras categoriesFor: #agregarProducto:!public! !

!CarritodeCompras methodsFor!
agregarProducto: unproducto
"listadeProducto  add:unproducto."
listadeProducto at: unproducto put: (unproducto verStock).
unproducto descontarStock: 1.
precioTotal:= precioTotal+ (unproducto verPrecio).! !
!CarritodeCompras categoriesFor: #agregarProducto:!public! !

!CarritodeCompras methodsFor!
agregarProducto: unproducto
"listadeProducto  add:unproducto."
"(a < b) ifTrue:[a:=a +1]
ifFalse:[a:= b*2]."
listadeProducto at: unproducto put: (unproducto verStock).
unproducto descontarStock: 1.
precioTotal:= precioTotal+ (unproducto verPrecio).! !
!CarritodeCompras categoriesFor: #agregarProducto:!public! !

dct := Dictionary new.
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'"
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'"
dct at: 'tres' put: 'three'.
dct at: 'cuatro' put: 'four'. !

dct := Dictionary new.
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'"
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'"
dct at: 'tres' put: 'three'.
dct at: 'cuatro' put: 'four'. 
dct at: 'tres' "devuelve 'three'"!

dct := Dictionary new.
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'"
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'"
dct at: 'tres' put: 'three'.
dct at: 'cuatro' put: 'four'. 
dct at: 'tres' "devuelve 'three'"
dct at: 'cinco' "tira error"!

dct := Dictionary new.
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'"
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'"
dct at: 'tres' put: 'three'.
dct at: 'cuatro' put: 'four'. 
dct at: 'tres' "devuelve 'three'"
dct at: 'cinco' "tira error"
dct at: 'cinco' ifAbsent: ['no se'] "devuelve 'no se'"!

dct := Dictionary new.
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'"
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'"
dct at: 'tres' put: 'three'.
dct at: 'cuatro' put: 'four'. 
dct at: 'tres' "devuelve 'three'"
"dct at: 'cinco'"   "tira error"
dct at: 'cinco' ifAbsent: ['no se'] "devuelve 'no se'"
dct at: 'tres' ifAbsent: ['no se'] "devuelve 'three'" !

dct := Dictionary new.
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'"
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'"
dct at: 'tres' put: 'three'.
dct at: 'cuatro' put: 'four'. 
dct at: 'tres' "devuelve 'three'"

dct at: 'cinco' ifAbsent: ['no se'] "devuelve 'no se'"!

dct := Dictionary new.
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'"
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'"
dct at: 'tres' put: 'three'.
dct at: 'cuatro' put: 'four'. 

dct at: 'cinco' ifAbsent: ['no se'] "devuelve 'no se'" 
!

|h|
dct := Dictionary new.
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'"
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'"
dct at: 'tres' put: 'three'.
dct at: 'cuatro' put: 'four'. 

dct at: 'cinco' ifAbsent: [ h:=1. ]

inspect h.!

|h|
dct := Dictionary new.
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'"
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'"
dct at: 'tres' put: 'three'.
dct at: 'cuatro' put: 'four'. 

dct at: 'cinco' ifAbsent: [ h:=1. ]!

|h|

dct := Dictionary new.
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'"
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'"
dct at: 'tres' put: 'three'.
dct at: 'cuatro' put: 'four'. 

dct at: 'cinco' ifAbsent: [ h:=1. ]

inspect h.!

|h|

dct := Dictionary new.
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'"
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'"
dct at: 'tres' put: 'three'.
dct at: 'cuatro' put: 'four'. 

dct at: 'cinco' ifAbsent: [ h:=1. ]
!

!CarritodeCompras methodsFor!
agregarProducto: unproducto unidad:unidad
"listadeProducto  add:unproducto."
|stock esta|
stock:=unproducto verStock.
"ve si el  producto esta en el la lista de carrito"
esta:=true.
"listadeProducto at: unproducto ifAbsent: [ esta :=false . ]"



( stock > unidad ) ifTrue:[
unproducto descontarStock: 1.
precioTotal:= precioTotal+ (unproducto verPrecio).
	( esta ) ifTrue:[
	listadeProducto at: unproducto put: (unproducto verStock).

	]
]
ifFalse:[" " ].

! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

!CarritodeCompras methodsFor!
agregarProducto: unproducto unidad:unidad
"listadeProducto  add:unproducto."
|stock esta|
stock:=unproducto verStock.
"ve si el  producto esta en el la lista de carrito"
esta:=true.
"listadeProducto at: unproducto ifAbsent: [ esta :=false . ]"



( stock > unidad ) ifTrue:[
unproducto descontarStock: 1.
precioTotal:= precioTotal+ (unproducto verPrecio).
	( esta ) ifTrue:[
	listadeProducto at: unproducto put: (unproducto verStock).

	]
]
ifFalse:[" " ].

! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

!CarritodeCompras methodsFor!
agregarProducto: unproducto unidad:unidad
"listadeProducto  add:unproducto."
|stock esta|
stock:=unproducto verStock.
"ve si el  producto esta en el la lista de carrito"
esta:=true.
listadeProducto at: 'cinco' ifAbsent: [ esta :=1. ].

( stock > unidad ) ifTrue:[
unproducto descontarStock: 1.
precioTotal:= precioTotal+ (unproducto verPrecio).
	( esta ) ifTrue:[
	listadeProducto at: unproducto put: (unproducto verStock).

	]
]
ifFalse:[" " ].

! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

!CarritodeCompras methodsFor!
agregarProducto: unproducto unidad:unidad
"listadeProducto  add:unproducto."
|stock esta|
stock:=unproducto verStock.
"ve si el  producto esta en el la lista de carrito"
esta:=true.
listadeProducto at: 'cinco' ifAbsent: [ esta :=1. ].

( stock > unidad ) ifTrue:[
unproducto descontarStock: 1.
precioTotal:= precioTotal+ (unproducto verPrecio).
	( esta ) ifTrue:[
	listadeProducto at: unproducto put: (unproducto verStock).

	]
]
ifFalse:[" " ].

! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

|h|

dct := Dictionary new.
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'"
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'"
dct at: 'tres' put: 'three'.
dct at: 'cuatro' put: 'four'. 


dct at: 'tres' put: 'tres 3'.!


dct := Dictionary new.
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'"
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'"
dct at: 'tres' put: 'three'.
dct at: 'cuatro' put: 'four'. 


dct at: 'tres' put: 'tres 3'.

dct  inspect.!

|h|

dct := Dictionary new.
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'"
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'"
dct at: 'tres' put: 'three'.
dct at: 'cuatro' put: 'four'. 


dct at: 'tres' put: 'tres 3'.

dct at: 'tres'.!

!CarritodeCompras methodsFor!
agregarProducto: unproducto unidad:unidad
"listadeProducto  add:unproducto."
|stock esta nuevacantidad|
stock:=unproducto verStock.
"Averiguo si el producto esta en la lista de productos del carrito"
esta:=true.
listadeProducto at: 'cinco' ifAbsent: [ esta :=false . ].
"ve que la unida no sea superior a el stock"
( stock > unidad ) ifTrue:[
unproducto descontarStock: unidad .
precioTotal:= precioTotal+ ((unproducto verPrecio)*unidad ).
	( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: 'tres') +(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: unproducto put: nuevacantidad .

	]
"si no esta agrega el producto y la cantidad de unidades"
ifFalse:[  listadeProducto at: unproducto put: (unproducto verStock).].

]
ifFalse:["Lo siento no hay stock disponible" ].

! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

CarritodeCompras removeSelector: #agregarProducto: ifAbsent: []!

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta|
"esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: 'cinco' ifAbsent: [ esta :=false . ].! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta|
"esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: 'cinco' ifAbsent: [ esta :=false . ].
! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
agregarProducto: unproducto unidad:unidad
"listadeProducto  add:unproducto."
|stock esta nuevacantidad|
stock:=unproducto verStock.
"Averiguo si el producto esta en la lista de productos del carrito"
esta:=true.
listadeProducto at: 'cinco' ifAbsent: [ esta :=false . ].
"ve que la unida no sea superior a el stock"
( stock > unidad ) ifTrue:[
unproducto descontarStock: unidad .
precioTotal:= precioTotal+ ((unproducto verPrecio)*unidad ).
	( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: 'tres') +(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: unproducto put: nuevacantidad .

	]
"si no esta agrega el producto y la cantidad de unidades"
	ifFalse:[  listadeProducto at: unproducto put: (unproducto verStock).].

]
ifFalse:["Lo siento no hay stock disponible" ].

! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta|
"esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: 'cinco' ifAbsent: [ esta :=false . ].
( esta ) ifTrue:[
	"nuevacantidad:=(listadeProducto at: 'tres') +(unproducto verStock)."
	" actualiza la nueva cantidad que tiene del producto"
	"listadeProducto at: unproducto put: nuevacantidad ."

	]
! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta nuevacantidad|
"esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: 'cinco' ifAbsent: [ esta :=false . ].
( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: 'tres') +(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: unproducto put: nuevacantidad .

	]
! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta nuevacantidad|
"esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: 'cinco' ifAbsent: [ esta :=false . ].
( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: 'tres') -(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: unproducto put: nuevacantidad .

	]
! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
agregarProducto: unproducto unidad:unidad
"listadeProducto  add:unproducto."
|stock esta nuevacantidad|
stock:=unproducto verStock.
"Averiguo si el producto esta en la lista de productos del carrito"
esta:=true.
listadeProducto at: unproducto ifAbsent: [ esta :=false . ].
"ve que la unida no sea superior a el stock"
( stock > unidad ) ifTrue:[
unproducto descontarStock: unidad .
precioTotal:= precioTotal+ ((unproducto verPrecio)*unidad ).
	( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: unproducto ) +(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: unproducto put: nuevacantidad .

	]
"si no esta agrega el producto y la cantidad de unidades"
	ifFalse:[  listadeProducto at: unproducto put: (unproducto verStock).].

]
ifFalse:["Lo siento no hay stock disponible" ].

! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta nuevacantidad|
"esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: 'cinco' ifAbsent: [ esta :=false . ].
( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: 'tres') -(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: unproducto put: nuevacantidad .

	]
ifFalse:["Lo siento no Posee Producto en el carrito" ].
! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta nuevacantidad|
"esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: 'cinco' ifAbsent: [ esta :=false . ].
( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: unproducto ) -(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: unproducto put: nuevacantidad .

	]
ifFalse:["Lo siento no Posee Producto en el carrito" ].
! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta nuevacantidad|
"esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: 'cinco' ifAbsent: [ esta :=false . ].
( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: unproducto ) -(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: unproducto put: nuevacantidad .
	precioTotal:= precioTotal- unproducto  verPrecio .

	]
ifFalse:["Lo siento no Posee Producto en el carrito" ].
! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta nuevacantidad|
"esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: unproducto ifAbsent: [ esta :=false . ].
( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: unproducto ) -(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: unproducto put: nuevacantidad .
	precioTotal:= precioTotal- unproducto  verPrecio .

	]
ifFalse:["Lo siento no Posee Producto en el carrito" ].
! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
agregarProducto: unproducto unidad:unidad
"listadeProducto  add:unproducto."
|stock esta nuevacantidad|
stock:=unproducto verStock.
"Averiguo si el producto esta en la lista de productos del carrito"
esta:=true.
listadeProducto at: unproducto ifAbsent: [ esta :=false . ].
"ve que la unida no sea superior a el stock"
( stock > unidad ) ifTrue:[
unproducto descontarStock: unidad .
precioTotal:= precioTotal+ ((unproducto verPrecio)*unidad ).
	( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: unproducto ) +(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: unproducto put: nuevacantidad .

	]
"si no esta agrega el producto y la cantidad de unidades"
	ifFalse:[  listadeProducto at: unproducto put: (unproducto verStock).].

]
ifFalse:['Lo siento no hay stock disponible'].

! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

!CarritodeCompras methodsFor!
agregarProducto: unproducto unidad:unidad
"listadeProducto  add:unproducto."
|stock esta nuevacantidad|
stock:=unproducto verStock.
"Averiguo si el producto esta en la lista de productos del carrito"
esta:=true.
listadeProducto at: unproducto ifAbsent: [ esta :=false . ].
"ve que la unida no sea superior a el stock"
( stock > unidad ) ifTrue:[
unproducto descontarStock: unidad .
precioTotal:= precioTotal+ ((unproducto verPrecio)*unidad ).
	( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: unproducto ) +(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: unproducto put: nuevacantidad .

	]
"si no esta agrega el producto y la cantidad de unidades"
	ifFalse:[  listadeProducto at: unproducto put: (unproducto verStock).].

]
ifFalse:[ Transcript show: 'No hay Stock Disponible' ].

! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.
productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa .
productoa verStock.
carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.
productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.
!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.
productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.
productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa .!

!CarritodeCompras methodsFor!
agregarProducto: unproducto unidad:unidad
"listadeProducto  add:unproducto."
|stock esta nuevacantidad|
stock:=unproducto verStock.
"Averiguo si el producto esta en la lista de productos del carrito"
esta:=true.
listadeProducto at: unproducto ifAbsent: [ esta :=false . ].
"ve que la unida no sea superior a el stock"
( stock > unidad ) ifTrue:[
unproducto descontarStock: unidad .
precioTotal:= precioTotal+ ((unproducto verPrecio)*unidad ).
	( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: unproducto ) +(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: unproducto put: nuevacantidad .

	]
"si no esta agrega el producto y la cantidad de unidades"
	ifFalse:[  listadeProducto at: unproducto put: (unproducto verStock).].

]
ifFalse:[ Transcript show: 'No hay Stock Disponible' ].

! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.
productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.
productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1
productoa verStock.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.
productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.
productoa verStock.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1
productoa verStock.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1
"productoa verStock."


carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
productoa verStock.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
"productoa verStock."


carrito1 verCarrito.
!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 1.
"productoa verStock."


carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."


carrito1 verCarrito.
!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."


carrito1 verCarrito.!

!CarritodeCompras methodsFor!
agregarProducto: unproducto unidad:unidad
"listadeProducto  add:unproducto."
|stock esta nuevacantidad|
stock:=unproducto verStock.
"Averiguo si el producto esta en la lista de productos del carrito"
esta:=true.
listadeProducto at: unproducto ifAbsent: [ esta :=false . ].
"ve que la unida no sea superior a el stock"
( stock >= unidad ) ifTrue:[
unproducto descontarStock: unidad .
precioTotal:= precioTotal+ ((unproducto verPrecio)*unidad ).
	( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: unproducto ) +(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: unproducto put: nuevacantidad .

	]
"si no esta agrega el producto y la cantidad de unidades"
	ifFalse:[  listadeProducto at: unproducto put: (unproducto verStock).].

]
ifFalse:[ Transcript show: 'No hay Stock Disponible' ].

! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."


carrito1 verCarrito.
!

!CarritodeCompras methodsFor!
agregarProducto: unproducto unidad:unidad
"listadeProducto  add:unproducto."
|stock esta nuevacantidad|
stock:=unproducto verStock.
"Averiguo si el producto esta en la lista de productos del carrito"
esta:=true.
listadeProducto at: unproducto ifAbsent: [ esta :=false . ].
"ve que la unida no sea superior a el stock"
( stock >= unidad ) ifTrue:[
unproducto descontarStock: unidad .
precioTotal:= precioTotal+ ((unproducto verPrecio)*unidad ).
	( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: unproducto ) +(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: unproducto put: nuevacantidad .

	]
"si no esta agrega el producto y la cantidad de unidades"
	ifFalse:[  listadeProducto at: unproducto put: unidad .].

]
ifFalse:[ Transcript show: 'No hay Stock Disponible' ].

! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."


carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."
carrito1 quitarProducto: productoa.

carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 3.
"productoa verStock."
carrito1 quitarProducto: productoa.

carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 3.
"productoa verStock."
carrito1 quitarProducto: productoa.

carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 3.
"productoa verStock."
carrito1 quitarProducto: productoa.

carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 3.
"productoa verStock."
carrito1 quitarProducto: productoa.

carrito1 verCarrito.
!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."


carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."

carrito1 quitarProducto: productoa.
carrito1 verCarrito.!

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta nuevacantidad|
"esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: unproducto ifAbsent: [ esta :=false . ].
( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: unproducto ) -(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: unproducto put: nuevacantidad .
	precioTotal:= precioTotal- unproducto  verPrecio .
	( listadeProducto  at: unproducto <1 )ifFalse: [listadeProducto removeKey: unproducto ifAbsent:['Ya se quito el producto']  ]
	]
ifFalse:["Lo siento no Posee Producto en el carrito" ].
! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."

carrito1 quitarProducto: productoa.
carrito1 verCarrito.

!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."
!

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta nuevacantidad|
"esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: unproducto ifAbsent: [ esta :=false . ].
( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: unproducto ) -(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: unproducto put: nuevacantidad .
	precioTotal:= precioTotal- unproducto  verPrecio .
	( listadeProducto  at: unproducto <1 )ifFalse: [listadeProducto removeKey: unproducto ifAbsent:['Ya se quito el producto']  ]
	]
ifFalse:["Lo siento no Posee Producto en el carrito" ].
! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
agregarProducto: unproducto unidad:unidad
"listadeProducto  add:unproducto."
|stock esta nuevacantidad nombre|
nombre:= unproducto verNombre.
stock:=unproducto verStock.
"Averiguo si el producto esta en la lista de productos del carrito"
esta:=true.
listadeProducto at: nombre ifAbsent: [ esta :=false . ].
"ve que la unida no sea superior a el stock"
( stock >= unidad ) ifTrue:[
unproducto descontarStock: unidad .
precioTotal:= precioTotal+ ((unproducto verPrecio)*unidad ).
	( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: nombre ) +(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: nombre put: nuevacantidad .

	]
"si no esta agrega el producto y la cantidad de unidades"
	ifFalse:[  listadeProducto at: nombre put: unidad .].

]
ifFalse:[ Transcript show: 'No hay Stock Disponible' ].

! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta nuevacantidad nombre|
nombre:= unproducto verNombre.
"esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: nombre ifAbsent: [ esta :=false . ].
( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: nombre ) -(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: nombre put: nuevacantidad .
	precioTotal:= precioTotal- unproducto  verPrecio .
	( listadeProducto  at: nombre <1 )ifFalse: [listadeProducto removeKey: nombre ifAbsent:['Ya se quito el producto']  ]
	]
ifFalse:["Lo siento no Posee Producto en el carrito" ].
! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
agregarProducto: unproducto unidad:unidad
"listadeProducto  add:unproducto."
|stock esta nuevacantidad nombre|
nombre:= unproducto verNombre.
stock:=unproducto verStock.
"Averiguo si el producto esta en la lista de productos del carrito"
esta:=true.
listadeProducto at: nombre ifAbsent: [ esta :=false . ].
"ve que la unida no sea superior a el stock"
( stock >= unidad ) ifTrue:[
unproducto descontarStock: unidad .
precioTotal:= precioTotal+ ((unproducto verPrecio)*unidad ).
	( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: nombre ) +(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: nombre put: nuevacantidad .

	]
"si no esta agrega el producto y la cantidad de unidades"
	ifFalse:[  listadeProducto at: nombre put: unidad .].

]
ifFalse:[ Transcript show: 'No hay Stock Disponible' ].

! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta nuevacantidad nombre cantidad|
nombre:= unproducto verNombre.
cantidad :=listadeProducto  at: nombre.
"esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: nombre ifAbsent: [ esta :=false . ].
( esta ) ifTrue:[
	nuevacantidad:=(listadeProducto at: nombre ) -(unproducto verStock).
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: nombre put: nuevacantidad .
	precioTotal:= precioTotal- unproducto  verPrecio .
	( cantidad <1 )ifFalse: [listadeProducto removeKey: nombre ifAbsent:['Ya se quito el producto']  ]
	]
ifFalse:["Lo siento no Posee Producto en el carrito" ].
! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."
carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."
carrito1 verCarrito.
carrito1 quitarProducto: productoa.
carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."
carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto1 A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto B' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."
carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto B' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto B' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.!

|d|
d:=Dictionary new at:'gorrión' put: 'pájaro';
at:'olmo 'put: 'árbol';
at: 'golondrina' put:'pájaro';
at:'sauce' put:'árbol';
yourself.


rta1:=d at:'golondrina'.
rta2:=d at:'gorrión'.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto B' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."
carrito1 verCarrito.
carrito1 quitarProducto: productoa.
carrito1 verCarrito.
!

"18:52:47, 21 June 2021: Image saved"!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto B' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."
carrito1 verCarrito.
carrito1 quitarProducto: productoa.
carrito1 verCarrito.

productoa verStock.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto B' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."
"carrito1 verCarrito."
carrito1 quitarProducto: productoa.
carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 1 stock: 2.


productob :=Producto crearProducto: 1 nombre: 'Producto B' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."
"carrito1 verCarrito."
carrito1 quitarProducto: productoa.
"carrito1 verCarrito."

productoa verStock.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 1 stock: 2.
productoa verStock.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 1 stock: 2.
productoa verStock.

productob :=Producto crearProducto: 1 nombre: 'Producto B' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."
"carrito1 verCarrito."
carrito1 quitarProducto: productoa.
"carrito1 verCarrito."

productoa verStock.!

	!

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta nuevacantidad nombre cantidad|
nombre:= unproducto verNombre .
cantidad :=listadeProducto  at: nombre.
"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: nombre ifAbsent: [ esta :=false . ].
( esta ) ifTrue:[
	unproducto devolverproducto.
	nuevacantidad:=(listadeProducto at: nombre ) - 1.
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: nombre put: nuevacantidad .
	precioTotal:= precioTotal- unproducto  verPrecio .
	( cantidad <1 )ifFalse: [listadeProducto removeKey: nombre ifAbsent:['Ya se quito el producto']  ]
	]
ifFalse:["Lo siento no Posee Producto en el carrito" ].
! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta nuevacantidad nombre cantidad|
nombre:= unproducto verNombre .
cantidad :=listadeProducto  at: nombre.
"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: nombre ifAbsent: [ esta :=false . ].
( esta ) ifTrue:[
	unproducto devolverproducto.
	nuevacantidad:=(listadeProducto at: nombre ) - 1.
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: nombre put: nuevacantidad .
	precioTotal:= precioTotal- unproducto  verPrecio .
	( cantidad <1 )ifFalse: [listadeProducto removeKey: nombre ifAbsent:['Ya se quito el producto']  ]
	]
ifFalse:["Lo siento no Posee Producto en el carrito" ].
! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta nuevacantidad nombre cantidad|
nombre:= unproducto verNombre .
cantidad :=listadeProducto  at: nombre.
"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: nombre ifAbsent: [ esta :=false . ].
( esta ) ifTrue:[
	unproducto devolverproducto.
	nuevacantidad:=(listadeProducto at: nombre ) - 1.
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: nombre put: nuevacantidad .
	precioTotal:= precioTotal- unproducto  verPrecio .
	( cantidad <1 )ifFalse: [listadeProducto removeKey: nombre ifAbsent:['Ya se quito el producto']  ]
	]
ifFalse:["Lo siento no Posee Producto en el carrito" ].
! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
quitarProducto:unproducto
|esta nuevacantidad nombre cantidad|
nombre:= unproducto verNombre .
cantidad :=listadeProducto  at: nombre.
"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: nombre ifAbsent: [ esta :=false . ].
( esta ) ifTrue:[
	unproducto devolverproducto.
	nuevacantidad:=(listadeProducto at: nombre ) - 1.
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: nombre put: nuevacantidad .
	precioTotal:= precioTotal- unproducto  verPrecio .
	( cantidad <1 )ifFalse: [listadeProducto removeKey: nombre ifAbsent:['Ya se quito el producto']  ]
	]
ifFalse:["Lo siento no Posee Producto en el carrito" ].
! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Producto A' precioUnitario: 1 stock: 2.
productoa verStock.

productob :=Producto crearProducto: 1 nombre: 'Producto B' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."
"carrito1 verCarrito."
carrito1 quitarProducto: productoa.
"carrito1 verCarrito."

productoa verStock.!

"18:59:41, 21 June 2021: Image saved"!

"18:59:54, 21 June 2021: Image saved"!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Arroz' precioUnitario: 1 stock: 2.
productoa verStock.

productob :=Producto crearProducto: 1 nombre: 'Fideo' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."
"carrito1 verCarrito."
carrito1 quitarProducto: productoa.
"carrito1 verCarrito."

productoa verStock.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Arroz' precioUnitario: 1 stock: 2.
productoa verStock.

productob :=Producto crearProducto: 1 nombre: 'Fideo' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."
"carrito1 verCarrito."
carrito1 quitarProducto: productoa.
carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Arroz' precioUnitario: 1 stock: 2.
productoa verStock.

productob :=Producto crearProducto: 1 nombre: 'Fideo' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."
"carrito1 verCarrito."
carrito1 quitarProducto: productoa.
carrito1 verCarrito.

"En stock del producto tiene que devolver 2 porque devolví el arroz "
productoa verStock.!

"19:04:30, 21 June 2021: Image saved"!

"19:04:50, 21 June 2021: Image saved"!

"19:07:02, 21 June 2021: Image saved"!

"19:07:08, 21 June 2021: Image saved"!

"19:05:50, 22 June 2021: Dolphin Smalltalk Professional started"!

"19:11:19, 22 June 2021: Image saved"!

"19:11:28, 22 June 2021: Dolphin Smalltalk Professional started"!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Arroz' precioUnitario: 1 stock: 2.
productoa verStock.

productob :=Producto crearProducto: 1 nombre: 'Fideo' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."
"carrito1 verCarrito."
carrito1 quitarProducto: productoa.
carrito1 verCarrito.

"En stock del producto tiene que devolver 2 porque devolví el arroz "
productoa verStock.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Arroz' precioUnitario: 1 stock: 2.
productoa verStock.

productob :=Producto crearProducto: 1 nombre: 'Fideo' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Arroz' precioUnitario: 1 stock: 2.
productoa verStock.

productob :=Producto crearProducto: 1 nombre: 'Fideo' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.
carrito1 agregarProducto: productob unidad: 2.
"productoa verStock."
"carrito1 verCarrito."
carrito1 quitarProducto: productoa.
carrito1 verCarrito.

"En stock del producto tiene que devolver 2 porque devolví el arroz "
productoa verStock.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Arroz' precioUnitario: 1 stock: 2.
productoa verStock.

productob :=Producto crearProducto: 1 nombre: 'Fideo' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Arroz' precioUnitario: 1 stock: 2.
productoa verStock.

productob :=Producto crearProducto: 1 nombre: 'Fideo' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.
carrito1 agregarProducto: productob unidad: 2.
productoa verStock.!

|productoa productob carrito1|
"crear productos"
productoa :=Producto crearProducto: 1 nombre: 'Arroz' precioUnitario: 1 stock: 2.
productoa verStock.

productob :=Producto crearProducto: 1 nombre: 'Fideo' precioUnitario: 2 stock: 2.

carrito1:= CarritodeCompras crearCarrito.
carrito1 agregarProducto: productoa unidad: 1.
carrito1 verCarrito.
carrito1 agregarProducto: productob unidad: 2.
productoa verStock.
carrito1 verCarrito.!

"19:39:21, 22 June 2021: Image saved"!

"20:12:40, 28 June 2021: Dolphin Smalltalk Professional started"!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProducto: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProducto: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProducto: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProducto: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProducto: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProducto: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProducto: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProducto: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProducto: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProducto: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProducto: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProducto: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProducto: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProducto: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProducto: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProducto: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProducto: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProducto: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProducto: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProducto: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProducto: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProducto: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProducto: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProducto: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProducto: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProducto: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProducto: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    "s listarProductos."
	s verCarrito
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

!Supermercado methodsFor!
listarProductos
	| a identificador nom precio stock |
	1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre.
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]]! !
!Supermercado categoriesFor: #listarProductos!public! !

Supermercado removeSelector: #listarProducos ifAbsent: []!

!Supermercado methodsFor!
listarProductosIdentificador
|a  identificador nom precio stock|
1 to: productos size do:[:i| ((productos at:i) verStock>0 ) ifTrue: [
a:=i printString.
identificador:=(productos at: i) verIdentificador printString.
nom:=(productos at: i) verNombre.
precio:=(productos at: i) verPrecio printString.
stock:=(productos at: i) verStock printString.
Transcript show: a,') Identificador[',identificador,'] ', nom, ' $', precio ,' Stock[', stock, ']'; cr.] ].
! !
!Supermercado categoriesFor: #listarProductosIdentificador!public! !

Supermercado removeSelector: #listarProducosIdentificador ifAbsent: []!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProducto: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProducto: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProducto: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

!CarritodeCompras methodsFor!
iniCarrito:supermercado
precioTotal := 0.
"listadeProducto := OrderedCollection new."
listadeProducto :=Dictionary new. 
! !
!CarritodeCompras categoriesFor: #iniCarrito:!public! !

CarritodeCompras removeSelector: #iniCarrito ifAbsent: []!

!CarritodeCompras methodsFor!
iniCarrito:supermercado cliente:idliente
precioTotal := 0.
"listadeProducto := OrderedCollection new."
listadeProducto :=Dictionary new. 
! !
!CarritodeCompras categoriesFor: #iniCarrito:cliente:!public! !

!CarritodeCompras methodsFor!
iniCarrito: supermercado cliente: idliente
	precioTotal := 0.
	"listadeProducto := OrderedCollection new."
	listadeProducto := Dictionary new! !
!CarritodeCompras categoriesFor: #iniCarrito:cliente:!public! !

!CarritodeCompras methodsFor!
iniCarrito
precioTotal := 0.
"listadeProducto := OrderedCollection new."
listadeProducto :=Dictionary new. 
! !
!CarritodeCompras categoriesFor: #iniCarrito!public! !

CarritodeCompras removeSelector: #iniCarrito: ifAbsent: []!

CarritodeCompras removeSelector: #iniCarrito:cliente: ifAbsent: []!

!CarritodeCompras class methodsFor!
crearCarrito:supermercado cliente: idliente
^(self new) iniCarrito.! !
!CarritodeCompras class categoriesFor: #crearCarrito:cliente:!public! !

Object subclass: #CarritodeCompras
	instanceVariableNames: 'listadeProducto precioTotal DatosdeSupermercado'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #CarritodeCompras
	instanceVariableNames: 'listadeProducto precioTotal DatosdeSupermercado'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #CarritodeCompras
	instanceVariableNames: 'listadeProducto precioTotal datosdeSupermercado'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #CarritodeCompras
	instanceVariableNames: 'listadeProducto precioTotal datosdeSupermercado'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!CarritodeCompras methodsFor!
BuscarElProductoEnSupermercado:idProducto
|unproducto product listaProduct|
listadeProducto:=datosdeSupermercado .

! !
!CarritodeCompras categoriesFor: #BuscarElProductoEnSupermercado:!private! !

!Supermercado methodsFor!
VerProductosDisponibles
^ productos.! !
!Supermercado categoriesFor: #VerProductosDisponibles!public! !

!Supermercado methodsFor!
verProductosDisponibles
	^productos! !
!Supermercado categoriesFor: #verProductosDisponibles!public! !

Supermercado removeSelector: #VerProductosDisponibles ifAbsent: []!

!Supermercado methodsFor!
verProductosDisponibles
	^productos! !
!Supermercado categoriesFor: #verProductosDisponibles!public! !

!CarritodeCompras methodsFor!
BuscarElProductoEnSupermercado:idProducto
|unproducto product listaProduct|
listadeProducto:=datosdeSupermercado verProductosDisponibles.
unproducto:= listadeProducto detect: [:product | product ].

! !
!CarritodeCompras categoriesFor: #BuscarElProductoEnSupermercado:!private! !

!CarritodeCompras methodsFor!
BuscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listadeProducto := datosdeSupermercado verProductosDisponibles.
	unproducto := listadeProducto detect: [:product | product]! !
!CarritodeCompras categoriesFor: #BuscarElProductoEnSupermercado:!private! !

!CarritodeCompras methodsFor!
BuscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listadeProducto := datosdeSupermercado verProductosDisponibles.
	unproducto := listadeProducto detect: [:product | product verIdentificador ]! !
!CarritodeCompras categoriesFor: #BuscarElProductoEnSupermercado:!private! !

!Producto methodsFor!
verIdentificadorProducto
^identificador.! !
!Producto categoriesFor: #verIdentificadorProducto!public! !

!Producto methodsFor!
verIdentificadorProducto
	^identificador! !
!Producto categoriesFor: #verIdentificadorProducto!public! !

Producto removeSelector: #verIdentificador ifAbsent: []!

!CarritodeCompras methodsFor!
BuscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listadeProducto := datosdeSupermercado verProductosDisponibles.
	unproducto := listadeProducto detect: [:product | product verIdentificadorProducto =idProducto ] ifNone:[^'No se encuentra el Prducto'].! !
!CarritodeCompras categoriesFor: #BuscarElProductoEnSupermercado:!private! !

!CarritodeCompras methodsFor!
BuscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listadeProducto := datosdeSupermercado verProductosDisponibles.
	unproducto := listadeProducto detect: [:product | product verIdentificadorProducto = idProducto]
				ifNone: [^'No se encuentra el Prducto']! !
!CarritodeCompras categoriesFor: #BuscarElProductoEnSupermercado:!private! !

!CarritodeCompras methodsFor!
BuscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listadeProducto := datosdeSupermercado verProductosDisponibles.
	unproducto := listadeProducto detect: [:product | product verIdentificadorProducto = idProducto]
				ifNone: 
					[Transcript show: 'No hay Stock Disponible'.
					^'No se encuentra el Prducto']! !
!CarritodeCompras categoriesFor: #BuscarElProductoEnSupermercado:!private! !

!CarritodeCompras methodsFor!
BuscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listadeProducto := datosdeSupermercado verProductosDisponibles.
	unproducto := listadeProducto detect: [:product | product verIdentificadorProducto = idProducto]
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^ nil]! !
!CarritodeCompras categoriesFor: #BuscarElProductoEnSupermercado:!private! !

!CarritodeCompras methodsFor!
BuscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listadeProducto := datosdeSupermercado verProductosDisponibles.
	unproducto := listadeProducto detect: [:product | product verIdentificadorProducto = idProducto]
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil]! !
!CarritodeCompras categoriesFor: #BuscarElProductoEnSupermercado:!private! !

!CarritodeCompras methodsFor!
BuscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listadeProducto := datosdeSupermercado verProductosDisponibles.
	unproducto := listadeProducto detect: [:product | product verIdentificadorProducto = idProducto]
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil]! !
!CarritodeCompras categoriesFor: #BuscarElProductoEnSupermercado:!private! !

!CarritodeCompras methodsFor!
agregarProducto: idproducto unidad: unidad
	"listadeProducto  add:unproducto."

	| stock esta nuevacantidad nombre unproducto |
	"Se busca que el producto exista en el supermercado"
	nombre := unproducto verNombre.
	stock := unproducto verStock.
	"Averiguo si el producto esta en la lista de productos del carrito"
	esta := true.
	listadeProducto at: nombre ifAbsent: [esta := false].
	"ve que la unida no sea superior a el stock"
	stock >= unidad
		ifTrue: 
			[unproducto descontarStock: unidad.
			precioTotal := precioTotal + (unproducto verPrecio * unidad).
			esta
				ifTrue: 
					[nuevacantidad := (listadeProducto at: nombre) + unproducto verStock.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: nombre put: nuevacantidad]
				ifFalse: [listadeProducto at: nombre put: unidad]
			"si no esta agrega el producto y la cantidad de unidades"]
		ifFalse: [Transcript show: 'No hay Stock Disponible']! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

!CarritodeCompras methodsFor!
agregarProducto: idproducto unidad: unidad
	"listadeProducto  add:unproducto."
	| stock esta nuevacantidad nombre unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto:=self BuscarElProductoEnSupermercado: idproducto.
	
 unproducto <> nil
		ifTrue: [
	nombre := unproducto verNombre.
	stock := unproducto verStock.
	"Averiguo si el producto esta en la lista de productos del carrito"
	esta := true.
	listadeProducto at: nombre ifAbsent: [esta := false].
	"ve que la unida no sea superior a el stock"
	stock >= unidad
		ifTrue: 
			[unproducto descontarStock: unidad.
			precioTotal := precioTotal + (unproducto verPrecio * unidad).
			esta
				ifTrue: 
					[nuevacantidad := (listadeProducto at: nombre) + unproducto verStock.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: nombre put: nuevacantidad]
				ifFalse: [listadeProducto at: nombre put: unidad]
			"si no esta agrega el producto y la cantidad de unidades"]
		ifFalse: [Transcript show: 'No hay Stock Disponible']
"Se finaliza la función si encuenta al producto en suppermercado"
].! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

!CarritodeCompras methodsFor!
agregarProducto: idproducto unidad: unidad
	"listadeProducto  add:unproducto."

	| stock esta nuevacantidad nombre unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := self BuscarElProductoEnSupermercado: idproducto.
	unproducto <> nil
		ifTrue: 
			[nombre := unproducto verNombre.
			stock := unproducto verStock.
			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			"ve que la unida no sea superior a el stock"
			stock >= unidad
				ifTrue: 
					[unproducto descontarStock: unidad.
					precioTotal := precioTotal + (unproducto verPrecio * unidad).
					esta
						ifTrue: 
							[nuevacantidad := (listadeProducto at: nombre) + unproducto verStock.
							" actualiza la nueva cantidad que tiene del producto"
							listadeProducto at: nombre put: nuevacantidad]
						ifFalse: [listadeProducto at: nombre put: unidad]
					"si no esta agrega el producto y la cantidad de unidades"]
				ifFalse: [Transcript show: 'No hay Stock Disponible']
			"Se finaliza la función si encuenta al producto en suppermercado"]! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

!CarritodeCompras methodsFor!
agregarProducto: idproducto unidad: unidad
	"listadeProducto  add:unproducto."

	| stock esta nuevacantidad nombre unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := self BuscarElProductoEnSupermercado: idproducto.
	unproducto !!= nil
		ifTrue: 
			[nombre := unproducto verNombre.
			stock := unproducto verStock.
			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			"ve que la unida no sea superior a el stock"
			stock >= unidad
				ifTrue: 
					[unproducto descontarStock: unidad.
					precioTotal := precioTotal + (unproducto verPrecio * unidad).
					esta
						ifTrue: 
							[nuevacantidad := (listadeProducto at: nombre) + unproducto verStock.
							" actualiza la nueva cantidad que tiene del producto"
							listadeProducto at: nombre put: nuevacantidad]
						ifFalse: [listadeProducto at: nombre put: unidad]
					"si no esta agrega el producto y la cantidad de unidades"]
				ifFalse: [Transcript show: 'No hay Stock Disponible']
			"Se finaliza la función si encuenta al producto en supermercado"]! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

!CarritodeCompras methodsFor!
agregarProducto: idproducto unidad: unidad
	"listadeProducto  add:unproducto."

	| stock esta nuevacantidad nombre unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := self BuscarElProductoEnSupermercado: idproducto.
	unproducto ~= nil
		ifTrue: 
			[nombre := unproducto verNombre.
			stock := unproducto verStock.
			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			"ve que la unida no sea superior a el stock"
			stock >= unidad
				ifTrue: 
					[unproducto descontarStock: unidad.
					precioTotal := precioTotal + (unproducto verPrecio * unidad).
					esta
						ifTrue: 
							[nuevacantidad := (listadeProducto at: nombre) + unproducto verStock.
							" actualiza la nueva cantidad que tiene del producto"
							listadeProducto at: nombre put: nuevacantidad]
						ifFalse: [listadeProducto at: nombre put: unidad]
					"si no esta agrega el producto y la cantidad de unidades"]
				ifFalse: [Transcript show: 'No hay Stock Disponible']
			"Se finaliza la función si encuenta al producto en supermercado"]! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

!CarritodeCompras methodsFor!
agregarProducto: idproducto unidad: unidad
	"listadeProducto  add:unproducto."

	| stock esta nuevacantidad nombre unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := self BuscarElProductoEnSupermercado: idproducto.
	unproducto ~= nil
		ifTrue: 
			[nombre := unproducto verNombre.
			stock := unproducto verStock.
			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			"ve que la unida no sea superior a el stock"
			stock >= unidad
				ifTrue: 
					[unproducto descontarStock: unidad.
					precioTotal := precioTotal + (unproducto verPrecio * unidad).
					esta
						ifTrue: 
							[nuevacantidad := (listadeProducto at: nombre) + unproducto verStock.
							" actualiza la nueva cantidad que tiene del producto"
							listadeProducto at: nombre put: nuevacantidad]
						ifFalse: [listadeProducto at: nombre put: unidad]
					"si no esta agrega el producto y la cantidad de unidades"]
				ifFalse: [Transcript show: 'No hay Stock Disponible']
			"Se finaliza la función si encuenta al producto en supermercado"]! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

!CarritodeCompras methodsFor!
quitarProducto:idproducto
|esta nuevacantidad nombre cantidad unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := self BuscarElProductoEnSupermercado: idproducto.
	unproducto ~= nil
		ifTrue: [



nombre:= unproducto verNombre .
cantidad :=listadeProducto  at: nombre.
"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

"Averiguo si el producto esta en la lista de productos del carrito"
esta :=true.
listadeProducto at: nombre ifAbsent: [ esta :=false . ].
( esta ) ifTrue:[
	unproducto devolverproducto.
	nuevacantidad:=(listadeProducto at: nombre ) - 1.
	" actualiza la nueva cantidad que tiene del producto"
	listadeProducto at: nombre put: nuevacantidad .
	precioTotal:= precioTotal- unproducto  verPrecio .
	( cantidad <1 )ifFalse: [listadeProducto removeKey: nombre ifAbsent:['Ya se quito el producto']  ]
	]
ifFalse:["Lo siento no Posee Producto en el carrito" ].
].! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
quitarProducto: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := self BuscarElProductoEnSupermercado: idproducto.
	unproducto ~= nil
		ifTrue: 
			[nombre := unproducto verNombre.
			cantidad := listadeProducto at: nombre.
			"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			esta
				ifTrue: 
					[unproducto devolverproducto.
					nuevacantidad := (listadeProducto at: nombre) - 1.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: nombre put: nuevacantidad.
					precioTotal := precioTotal - unproducto verPrecio.
					cantidad < 1 ifFalse: [listadeProducto removeKey: nombre ifAbsent: ['Ya se quito el producto']]]
				ifFalse: 
					["Lo siento no Posee Producto en el carrito"
					]]! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
quitarProducto: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := self BuscarElProductoEnSupermercado: idproducto.
	unproducto ~= nil
		ifTrue: 
			[nombre := unproducto verNombre.
			cantidad := listadeProducto at: nombre.
			"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			esta
				ifTrue: 
					[unproducto devolverproducto.
					nuevacantidad := (listadeProducto at: nombre) - 1.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: nombre put: nuevacantidad.
					precioTotal := precioTotal - unproducto verPrecio.
					cantidad < 1 ifFalse: [listadeProducto removeKey: nombre ifAbsent: ['Ya se quito el producto']]]
				ifFalse: 
					["Lo siento no Posee Producto en el carrito"
					]]! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
quitarProducto: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := self BuscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			cantidad := listadeProducto at: nombre.
			"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			esta
				ifTrue: 
					[unproducto devolverproducto.
					nuevacantidad := (listadeProducto at: nombre) - 1.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: nombre put: nuevacantidad.
					precioTotal := precioTotal - unproducto verPrecio.
					cantidad < 1 ifFalse: [listadeProducto removeKey: nombre ifAbsent: ['Ya se quito el producto']]]
				ifFalse: 
					["Lo siento no Posee Producto en el carrito"
					]]! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
quitarProducto: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := self BuscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			cantidad := listadeProducto at: nombre.
			"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			(esta)
				ifTrue: 
					[unproducto devolverproducto.
					nuevacantidad := (listadeProducto at: nombre) - 1.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: nombre put: nuevacantidad.
					precioTotal := precioTotal - unproducto verPrecio.
					cantidad < 1 ifFalse: [listadeProducto removeKey: nombre ifAbsent: ['Ya se quito el producto']]]
				ifFalse: 
					["Lo siento no Posee Producto en el carrito"
					]]! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!CarritodeCompras methodsFor!
agregarProducto: idproducto unidad: unidad
	"listadeProducto  add:unproducto."

	| stock esta nuevacantidad nombre unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := self BuscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			stock := unproducto verStock.
			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			"ve que la unida no sea superior a el stock"
			(stock >= unidad)
				ifTrue: 
					[unproducto descontarStock: unidad.
					precioTotal := precioTotal + (unproducto verPrecio * unidad).
					(esta)
						ifTrue: 
							[nuevacantidad := (listadeProducto at: nombre) + unproducto verStock.
							" actualiza la nueva cantidad que tiene del producto"
							listadeProducto at: nombre put: nuevacantidad]
						ifFalse: [listadeProducto at: nombre put: unidad]
					"si no esta agrega el producto y la cantidad de unidades"]
				ifFalse: [Transcript show: 'No hay Stock Disponible']
			"Se finaliza la función si encuenta al producto en supermercado"]! !
!CarritodeCompras categoriesFor: #agregarProducto:unidad:!public! !

!CarritodeCompras methodsFor!
quitarProducto: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := self BuscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			cantidad := listadeProducto at: nombre.
			"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			(esta)
				ifTrue: 
					[unproducto devolverproducto.
					nuevacantidad := (listadeProducto at: nombre) - 1.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: nombre put: nuevacantidad.
					precioTotal := precioTotal - unproducto verPrecio.
					cantidad < 1 ifFalse: [listadeProducto removeKey: nombre ifAbsent: ['Ya se quito el producto']]]
				ifFalse: 
					["Lo siento no Posee Producto en el carrito"
					]]! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

!Supermercado methodsFor!
BuscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := self verProductosDisponibles.
	unproducto := listaProduct detect: [:product | product verIdentificadorProducto = idProducto]
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil].! !
!Supermercado categoriesFor: #BuscarElProductoEnSupermercado:!public! !

!Supermercado methodsFor!
supermercadoAgregarProducto:unProducto
"Agrega un empleado"
productos add:unProducto.! !
!Supermercado categoriesFor: #supermercadoAgregarProducto:!public! !

Supermercado removeSelector: #agregarProducto: ifAbsent: []!

!CarritodeCompras methodsFor!
carritoAgregarProducto: idproducto unidad: unidad
	"listadeProducto  add:unproducto."

	| stock esta nuevacantidad nombre unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := self BuscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			stock := unproducto verStock.
			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			"ve que la unida no sea superior a el stock"
			(stock >= unidad)
				ifTrue: 
					[unproducto descontarStock: unidad.
					precioTotal := precioTotal + (unproducto verPrecio * unidad).
					(esta)
						ifTrue: 
							[nuevacantidad := (listadeProducto at: nombre) + unproducto verStock.
							" actualiza la nueva cantidad que tiene del producto"
							listadeProducto at: nombre put: nuevacantidad]
						ifFalse: [listadeProducto at: nombre put: unidad]
					"si no esta agrega el producto y la cantidad de unidades"]
				ifFalse: [Transcript show: 'No hay Stock Disponible']
			"Se finaliza la función si encuenta al producto en supermercado"]! !
!CarritodeCompras categoriesFor: #carritoAgregarProducto:unidad:!public! !

!CarritodeCompras methodsFor!
carritoAgregarProducto: idproducto unidad: unidad
	"listadeProducto  add:unproducto."

	| stock esta nuevacantidad nombre unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := self BuscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			stock := unproducto verStock.
			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			"ve que la unida no sea superior a el stock"
			(stock >= unidad)
				ifTrue: 
					[unproducto descontarStock: unidad.
					precioTotal := precioTotal + (unproducto verPrecio * unidad).
					(esta)
						ifTrue: 
							[nuevacantidad := (listadeProducto at: nombre) + unproducto verStock.
							" actualiza la nueva cantidad que tiene del producto"
							listadeProducto at: nombre put: nuevacantidad]
						ifFalse: [listadeProducto at: nombre put: unidad]
					"si no esta agrega el producto y la cantidad de unidades"]
				ifFalse: [Transcript show: 'No hay Stock Disponible']
			"Se finaliza la función si encuenta al producto en supermercado"]! !
!CarritodeCompras categoriesFor: #carritoAgregarProducto:unidad:!public! !

CarritodeCompras removeSelector: #agregarProducto:unidad: ifAbsent: []!

CarritodeCompras removeSelector: #BuscarElProductoEnSupermercado: ifAbsent: []!

!CarritodeCompras class methodsFor!
crearCarrito:supermercado cliente: idcliente
^(self new) iniCarrito.! !
!CarritodeCompras class categoriesFor: #crearCarrito:cliente:!public! !

"16:52:22, 29 June 2021: Image saved"!

"16:52:28, 29 June 2021: Image saved"!

"16:52:33, 29 June 2021: Image saved"!

"16:59:31, 29 June 2021: Image saved"!

"16:59:51, 29 June 2021: Image saved"!

"16:59:58, 29 June 2021: Image saved"!

!CarritodeCompras methodsFor!
iniCarrito:supermercado
precioTotal := 0.
"listadeProducto := OrderedCollection new."
listadeProducto :=Dictionary new. 
datosdeSupermercado:=supermercado.! !
!CarritodeCompras categoriesFor: #iniCarrito:!public! !

CarritodeCompras removeSelector: #iniCarrito ifAbsent: []!

!CarritodeCompras class methodsFor!
crearCarrito:supermercado cliente: idcliente
^(self new) iniCarrito: supermercado! !
!CarritodeCompras class categoriesFor: #crearCarrito:cliente:!public! !

!CarritodeCompras methodsFor!
iniCarrito:supermercado cliente:idcliente
precioTotal := 0.
"listadeProducto := OrderedCollection new."
listadeProducto :=Dictionary new. 
datosdeSupermercado:=supermercado.! !
!CarritodeCompras categoriesFor: #iniCarrito:cliente:!public! !

CarritodeCompras removeSelector: #iniCarrito: ifAbsent: []!

!CarritodeCompras class methodsFor!
crearCarrito:supermercado cliente: idcliente
^(self new) iniCarrito: supermercado cliente: idcliente.! !
!CarritodeCompras class categoriesFor: #crearCarrito:cliente:!public! !

"17:04:07, 29 June 2021: Image saved"!

!CarritodeCompras class methodsFor!
crearCarrito:supermercado cliente: idcliente
^(self new) iniCarrito: supermercado cliente: idcliente.! !
!CarritodeCompras class categoriesFor: #crearCarrito:cliente:!public! !

CarritodeCompras class removeSelector: #crearCarrito ifAbsent: []!

!CarritodeCompras methodsFor!
carritoAgregarProducto: idproducto unidad: unidad
	"listadeProducto  add:unproducto."

	| stock esta nuevacantidad nombre unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := datosdeSupermercado BuscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			stock := unproducto verStock.
			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			"ve que la unida no sea superior a el stock"
			(stock >= unidad)
				ifTrue: 
					[unproducto descontarStock: unidad.
					precioTotal := precioTotal + (unproducto verPrecio * unidad).
					(esta)
						ifTrue: 
							[nuevacantidad := (listadeProducto at: nombre) + unproducto verStock.
							" actualiza la nueva cantidad que tiene del producto"
							listadeProducto at: nombre put: nuevacantidad]
						ifFalse: [listadeProducto at: nombre put: unidad]
					"si no esta agrega el producto y la cantidad de unidades"]
				ifFalse: [Transcript show: 'No hay Stock Disponible']
			"Se finaliza la función si encuenta al producto en supermercado"]! !
!CarritodeCompras categoriesFor: #carritoAgregarProducto:unidad:!public! !

!CarritodeCompras methodsFor!
quitarProducto: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := datosdeSupermercado BuscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			cantidad := listadeProducto at: nombre.
			"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			(esta)
				ifTrue: 
					[unproducto devolverproducto.
					nuevacantidad := (listadeProducto at: nombre) - 1.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: nombre put: nuevacantidad.
					precioTotal := precioTotal - unproducto verPrecio.
					cantidad < 1 ifFalse: [listadeProducto removeKey: nombre ifAbsent: ['Ya se quito el producto']]]
				ifFalse: 
					["Lo siento no Posee Producto en el carrito"
					]]! !
!CarritodeCompras categoriesFor: #quitarProducto:!public! !

"17:11:31, 29 June 2021: Image saved"!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProducto: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProducto: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProducto: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProducto: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProducto: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProducto: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := datosdeSupermercado BuscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			cantidad := listadeProducto at: nombre.
			"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			(esta)
				ifTrue: 
					[unproducto devolverproducto.
					nuevacantidad := (listadeProducto at: nombre) - 1.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: nombre put: nuevacantidad.
					precioTotal := precioTotal - unproducto verPrecio.
					cantidad < 1 ifFalse: [listadeProducto removeKey: nombre ifAbsent: ['Ya se quito el producto']]]
				ifFalse: 
					["Lo siento no Posee Producto en el carrito"
					]]! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras methodsFor!
agregarProductoCarrito: idproducto unidad: unidad
	"listadeProducto  add:unproducto."

	| stock esta nuevacantidad nombre unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := datosdeSupermercado BuscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			stock := unproducto verStock.
			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			"ve que la unida no sea superior a el stock"
			(stock >= unidad)
				ifTrue: 
					[unproducto descontarStock: unidad.
					precioTotal := precioTotal + (unproducto verPrecio * unidad).
					(esta)
						ifTrue: 
							[nuevacantidad := (listadeProducto at: nombre) + unproducto verStock.
							" actualiza la nueva cantidad que tiene del producto"
							listadeProducto at: nombre put: nuevacantidad]
						ifFalse: [listadeProducto at: nombre put: unidad]
					"si no esta agrega el producto y la cantidad de unidades"]
				ifFalse: [Transcript show: 'No hay Stock Disponible']
			"Se finaliza la función si encuenta al producto en supermercado"]! !
!CarritodeCompras categoriesFor: #agregarProductoCarrito:unidad:!public! !

!Supermercado methodsFor!
AgregarProductoSupermercaado:unProducto
"Agrega un empleado"
productos add:unProducto.! !
!Supermercado categoriesFor: #AgregarProductoSupermercaado:!public! !

!Supermercado methodsFor!
agregarProductoSupermercaado:unProducto
"Agrega un empleado"
productos add:unProducto.! !
!Supermercado categoriesFor: #agregarProductoSupermercaado:!public! !

!Supermercado methodsFor!
agregarProductoSupermercado:unProducto
"Agrega un empleado"
productos add:unProducto.! !
!Supermercado categoriesFor: #agregarProductoSupermercado:!public! !

Supermercado removeSelector: #agregarProductoSupermercaado: ifAbsent: []!

Supermercado removeSelector: #AgregarProductoSupermercaado: ifAbsent: []!

CarritodeCompras removeSelector: #carritoAgregarProducto:unidad: ifAbsent: []!

CarritodeCompras removeSelector: #quitarProducto: ifAbsent: []!

"17:19:15, 29 June 2021: Image saved"!

Supermercado removeSelector: #supermercadoAgregarProducto: ifAbsent: []!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercadoSuper: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProducto: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercadoSuper: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProducto: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercadoSuper: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercadoSuper: p.!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercadoSuper: p.!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercadoSuper: p.!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercadoSuper: p.!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercadoSuper: p.!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercadoSuper: p.!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductos.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

!Supermercado methodsFor!
listarProductos
	| a identificador nom precio stock |
	1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre.
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]]! !
!Supermercado categoriesFor: #listarProductos!public! !

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
[menu~='0'] whileTrue:[
    (menu='1')ifTrue: [
    Transcript clear.
    s listarProductosIdentificador.
].
menu:= Prompter prompt:'Ingrese un numero'.
].!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.

s listarProductos.!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.

s listarProductos.!

!Supermercado methodsFor!
listarProductos
	| a identificador nom precio stock |
	1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre.
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]]! !
!Supermercado categoriesFor: #listarProductos!public! !

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Supermercado
	instanceVariableNames: 'nombre clientes empleados productos facturas'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Supermercado guid: (GUID fromString: '{a8e61913-e7ea-4bba-8b7c-b733d9b8c678}')!

Supermercado guid: (GUID fromString: '{a8e61913-e7ea-4bba-8b7c-b733d9b8c678}')!
Supermercado comment: ''!

Supermercado comment:
''!
!Supermercado methodsFor!
agregarCliente:unCliente
"Agrega un cliente"
clientes add:unCliente.! !
!Supermercado methodsFor!
agregarEmpleado:unEmpleado
"Agrega un empleado"
empleados add:unEmpleado.! !
!Supermercado methodsFor!
agregarFactura:unFactura
"Agrega un empleado"
facturas add:unFactura.! !
!Supermercado methodsFor!
agregarProducto:unProducto
"Agrega un empleado"
productos add:unProducto.! !
!Supermercado methodsFor!
iniSuperNom:unNom
"Inicializa una instancia de Supermercado"
nombre:=unNom.
clientes:= OrderedCollection new.
empleados:= OrderedCollection new.
productos:= OrderedCollection new.
facturas:= OrderedCollection new.! !
!Supermercado methodsFor!
listarProducos
|a  identificador nom precio stock|
1 to: productos size do:[:i| ((productos at:i) verStock>0 ) ifTrue: [
a:=i printString.
identificador:=(productos at: i) verIdentificador printString.
nom:=(productos at: i) verNombre.
precio:=(productos at: i) verPrecio printString.
stock:=(productos at: i) verStock printString.
Transcript show: a,') Identificador[',identificador,'] ', nom, ' $', precio ,' Stock[', stock, ']'; cr.] ].
! !
!Supermercado methodsFor!
listarProducosIdentificador
|a  identificador nom precio stock|
1 to: productos size do:[:i| ((productos at:i) verStock>0 ) ifTrue: [
a:=i printString.
identificador:=(productos at: i) verIdentificador printString.
nom:=(productos at: i) verNombre.
precio:=(productos at: i) verPrecio printString.
stock:=(productos at: i) verStock printString.
Transcript show: a,') Identificador[',identificador,'] ', nom, ' $', precio ,' Stock[', stock, ']'; cr.] ].
! !
!Supermercado categoriesFor: #agregarCliente:!public! !

!Supermercado categoriesFor: #agregarEmpleado:!public! !

!Supermercado categoriesFor: #agregarFactura:!public! !

!Supermercado categoriesFor: #agregarProducto:!public! !

!Supermercado categoriesFor: #iniSuperNom:!public! !

!Supermercado categoriesFor: #listarProducos!public! !

!Supermercado categoriesFor: #listarProducosIdentificador!public! !

!Supermercado class methodsFor!
crearSuperNom:unNom
"Retorna una instancia de Supermercado inicializada"
^(self new) iniSuperNom:unNom.! !
!Supermercado class categoriesFor: #crearSuperNom:!public! !

!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.

s listarProducos.
!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.

s listarProducos.!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
carrito:=CarritodeCompras.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Comprar Productos
2)Ver Carrito
3)Ir a Pagar'.

s listarProducos.!

|n s c e p menu|
n:= Prompter prompt:'Ingrese un nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
Transcript clear.
s listarProducos.!

|n s c e p menu|
n:= Prompter prompt:'Ingrese un nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
Transcript clear.
s listarProducos.

!

|n s c e p menu|
n:= Prompter prompt:'Ingrese un nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
Transcript clear.
s listarProducos.

!

!Supermercado methodsFor!
listarProductosIdentificador
|a  identificador nom precio stock|
1 to: productos size do:[:i| ((productos at:i) verStock>0 ) ifTrue: [
a:=i printString.
identificador:=(productos at: i) verIdentificador printString.
nom:=(productos at: i) verNombre.
precio:=(productos at: i) verPrecio printString.
stock:=(productos at: i) verStock printString.
Transcript show: a,') Identificador[',identificador,'] ', nom, ' $', precio ,' Stock[', stock, ']'; cr.] ].
! !
!Supermercado categoriesFor: #listarProductosIdentificador!public! !

!Supermercado methodsFor!
listarProductosIdentificador
|a  identificador nom precio stock|
1 to: productos size do:[:i| ((productos at:i) verStock>0 ) ifTrue: [
a:=i printString.
identificador:=(productos at: i) verIdentificador printString.
nom:=(productos at: i) verNombre.
precio:=(productos at: i) verPrecio printString.
stock:=(productos at: i) verStock printString.
Transcript show: a,') Identificador[',identificador,'] ', nom, ' $', precio ,' Stock[', stock, ']'; cr.] ].
! !
!Supermercado categoriesFor: #listarProductosIdentificador!public! !

|n s c e p menu|
n:= Prompter prompt:'Ingrese un nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.!

|n s c e p menu|
n:= Prompter prompt:'Ingrese un nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.!

|n s c e p menu|
n:= Prompter prompt:'Ingrese un nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.
menu:= Prompter prompt:'Ingrese un numero'.
Transcript clear.
s listarProducos.!

|n s c e p menu|
n:= Prompter prompt:'Ingrese un nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.
"menu:= Prompter prompt:'Ingrese un numero'."
Transcript clear.
s listarProducos.!

|n s c e p menu|
n:= Prompter prompt:'Ingrese un nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.
"menu:= Prompter prompt:'Ingrese un numero'."
Transcript clear.
s listarProducos.
!

|n s c e p menu|
n:= Prompter prompt:'Ingrese un nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.
"menu:= Prompter prompt:'Ingrese un numero'."
Transcript clear.
s listarProducos.!

|n s c e p menu|
n:= Prompter prompt:'Ingrese un nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.
"menu:= Prompter prompt:'Ingrese un numero'."
Transcript clear.
s listarProducos.

!

|n s c e p menu|
n:= Prompter prompt:'Ingrese un nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.
"menu:= Prompter prompt:'Ingrese un numero'."
Transcript clear.
s listarProducos.
!

|n s c e p menu|
"n:= Prompter prompt:'Ingrese un nombre'."
n:='nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.
"menu:= Prompter prompt:'Ingrese un numero'."
Transcript clear.
s listarProducos.!

|n s c e p menu|
"n:= Prompter prompt:'Ingrese un nombre'."
n:='nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.
"menu:= Prompter prompt:'Ingrese un numero'."
"Transcript clear."
s listarProducos.
!

|n s c e p menu|
"n:= Prompter prompt:'Ingrese un nombre'."
n:='nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.
"menu:= Prompter prompt:'Ingrese un numero'."
"Transcript clear."
s listarProducos.
!

|n s c e p menu|
"n:= Prompter prompt:'Ingrese un nombre'."
n:='nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.
"menu:= Prompter prompt:'Ingrese un numero'."
"Transcript clear."
s listarProducos .
!

|n s c e p menu|
"n:= Prompter prompt:'Ingrese un nombre'."
n:='nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.
"menu:= Prompter prompt:'Ingrese un numero'."
"Transcript clear."
s listarProducos .
!

|n s c e p menu|
"n:= Prompter prompt:'Ingrese un nombre'."
n:='nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.
"menu:= Prompter prompt:'Ingrese un numero'."
"Transcript clear."
s listarProducos .!

|n s c e p menu|
"n:= Prompter prompt:'Ingrese un nombre'."
n:='nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.
Transcript clear.
Transcript show: 'MENU SUPERMERCADO
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.
"menu:= Prompter prompt:'Ingrese un numero'."
"Transcript clear."
s listarProducos .
!

Supermercado removeSelector: #listarProducos ifAbsent: []!

Supermercado removeSelector: #agregarProducto: ifAbsent: []!

Supermercado removeSelector: #listarProducosIdentificador ifAbsent: []!

!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := self verProductosDisponibles.
	unproducto := listaProduct detect: [:product | product verIdentificadorProducto = idProducto]
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil].! !
!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

Supermercado removeSelector: #BuscarElProductoEnSupermercado: ifAbsent: []!

!CarritodeCompras methodsFor!
agregarProductoCarrito: idproducto unidad: unidad
	"listadeProducto  add:unproducto."

	| stock esta nuevacantidad nombre unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := datosdeSupermercado buscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			stock := unproducto verStock.
			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			"ve que la unida no sea superior a el stock"
			(stock >= unidad)
				ifTrue: 
					[unproducto descontarStock: unidad.
					precioTotal := precioTotal + (unproducto verPrecio * unidad).
					(esta)
						ifTrue: 
							[nuevacantidad := (listadeProducto at: nombre) + unproducto verStock.
							" actualiza la nueva cantidad que tiene del producto"
							listadeProducto at: nombre put: nuevacantidad]
						ifFalse: [listadeProducto at: nombre put: unidad]
					"si no esta agrega el producto y la cantidad de unidades"]
				ifFalse: [Transcript show: 'No hay Stock Disponible']
			"Se finaliza la función si encuenta al producto en supermercado"]! !
!CarritodeCompras categoriesFor: #agregarProductoCarrito:unidad:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := datosdeSupermercado buscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			cantidad := listadeProducto at: nombre.
			"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			(esta)
				ifTrue: 
					[unproducto devolverproducto.
					nuevacantidad := (listadeProducto at: nombre) - 1.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: nombre put: nuevacantidad.
					precioTotal := precioTotal - unproducto verPrecio.
					cantidad < 1 ifFalse: [listadeProducto removeKey: nombre ifAbsent: ['Ya se quito el producto']]]
				ifFalse: 
					["Lo siento no Posee Producto en el carrito"
					]]! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!Cliente methodsFor!
iniPersonaCliente:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
super iniPersona: unDni nom: unNombre ape: unApellido.
credito:=0.! !
!Cliente categoriesFor: #iniPersonaCliente:nom:ape:!public! !

!Cliente methodsFor!
iniPersonaCliente:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
super iniPersona: unDni nom: unNombre ape: unApellido.
credito:=0.! !
!Cliente categoriesFor: #iniPersonaCliente:nom:ape:!public! !

!Empleado methodsFor!
iniPersonaEmpleado:unDni nom:unNombre ape:unApellido pues:unPuesto sal:unSalario
"Inicializa una instancia de Persona"
super iniPersona: unDni nom: unNombre ape: unApellido.
puesto:=unPuesto.
salario:=unSalario.
! !
!Empleado categoriesFor: #iniPersonaEmpleado:nom:ape:pues:sal:!public! !

!Empleado methodsFor!
iniPersonaEmpleado:unDni nom:unNombre ape:unApellido pues:unPuesto sal:unSalario
"Inicializa una instancia de Persona"
super iniPersona: unDni nom: unNombre ape: unApellido.
puesto:=unPuesto.
salario:=unSalario.
! !
!Empleado categoriesFor: #iniPersonaEmpleado:nom:ape:pues:sal:!public! !

"21:27:54, 30 June 2021: Image saved"!

!Cliente class methodsFor!
crearPersonaCliente:unDni nom:unNombre ape:unApellido 
"Retorna una instancia de Libro inicializada"
^(self new) iniPersonaCliente:unDni nom:unNombre ape:unApellido.! !
!Cliente class categoriesFor: #crearPersonaCliente:nom:ape:!public! !

!Cliente methodsFor!
iniPersonaCliente:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
super iniPersona: unDni nom: unNombre ape: unApellido.
credito:=0.! !
!Cliente categoriesFor: #iniPersonaCliente:nom:ape:!public! !

!Cliente methodsFor!
iniPersonaCliente:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
super iniPersona: unDni nom: unNombre ape: unApellido.
credito:=0.! !
!Cliente categoriesFor: #iniPersonaCliente:nom:ape:!public! !

"Prueba de inicializar persona"
|unObjeto|
unObjetoP:= Persona crearPersona: 1 nom: 'Persona' ape: 'prueba1'
unObjeto verApellido inspect.!

|unObjetoP|
unObjetoP:= Persona crearPersona: 1 nom: 'Persona' ape: 'prueba1'
unObjeto verApellido inspect.!

|unObjetoP|
unObjetoP:= Persona crearPersona: 1 nom: 'Persona' ape: 'prueba1'
unObjeto verApellido inspect.!

|unObjetoP|
unObjetoP:= Persona crearPersona: 1 nom: 'Persona' ape: 'prueba1'
unObjeto verApellido inspect.!

"Prueba de inicializar persona"
|unObjetoP|
unObjetoP:= Persona crearPersona: '1' nom: 'Persona' ape: 'prueba1'
unObjeto verApellido inspect.!

"Prueba de inicializar persona"
|unObjeto|
unObjeto := Persona crearPersona: '1' nom: 'Persona' ape: 'prueba1'
unObjeto verApellido inspect.!

|unObjeto|
unObjeto := Persona crearPersona: '1' nom: 'Persona' ape: 'prueba1'!

|unObjeto|
unObjeto := Persona crearPersona: '1' nom: 'Persona' ape: 'prueba1'.
unObjeto verApellido inspect.!

|n s c e p productoa productob menu carrito unid prod idproducto|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.!

"Prueba de inicializar persona"
|unObjeto|
unObjeto := Persona crearPersona: '1' nom: 'Persona' ape: 'prueba1'.
unObjeto verApellido inspect.!

"Prueba de inicializar persona"
|unObjeto|
unObjeto := Persona crearPersona: '1' nom: 'Persona' ape: 'prueba1'.
unObjeto verApellido inspect.!

"Prueba de inicializar persona"
|unObjeto|
unObjeto := Persona crearPersona: '1' nom: 'Persona' ape: 'prueba1'.
unObjeto verApellido inspect.!

"Prueba de inicializar persona"
|unObjeto|
unObjeto := Persona crearPersona: '1' nom: 'Persona' ape: 'prueba1'.
unObjeto verApellido.!

"Prueba de inicializar persona"
|unObjeto|
unObjeto := Persona crearPersona: '1' nom: 'Persona' ape: 'prueba1'.
"unObjeto verApellido."
unObjeto inspect.!

"Prueba de inicializar persona"
|unObjeto|
unObjeto := Persona crearPersona: 1 nom: 'Persona' ape: 'prueba1'.
"unObjeto verApellido."
unObjeto inspect.!

"Prueba de inicializar persona"
|unObjeto o1|
unObjeto := Persona crearPersona: 1 nom: 'Persona' ape: 'prueba1'.
"unObjeto verApellido."
unObjeto inspect.

o1 := Cliente crearPersonaCliente: 2 nom:'unNombre Cliente' ape: 'unApellido cliente'.
"unObjeto verApellido."
unObjeto inspect.!

"Prueba de inicializar persona"
|unObjeto o1|
unObjeto := Persona crearPersona: 1 nom: 'Persona' ape: 'prueba1'.
"unObjeto verApellido."
unObjeto inspect.

o1 := Cliente crearPersonaCliente: 2 nom:'unNombre Cliente' ape: 'unApellido cliente'.
"unObjeto verApellido."
o1 inspect.!

"Prueba de inicializar persona"
|unObjeto o1 o2|
unObjeto := Persona crearPersona: 1 nom: 'Persona' ape: 'prueba1'.
"unObjeto verApellido."
unObjeto inspect.

o1 := Cliente crearPersonaCliente: 2 nom:'unNombre Cliente' ape: 'unApellido cliente'.
"unObjeto verApellido."
o1 inspect.

o2:= Empleado crearPersonaEmpleado: 3 nom: 'Empleadoo' ape: 'unApellido 3' pues:'unPuesto Recepcion' sal:8588.
o2 inspect.!

"21:51:32, 30 June 2021: Image saved"!

"21:57:26, 30 June 2021: Image saved"!

"21:57:27, 30 June 2021: Image saved"!

"21:57:28, 30 June 2021: Image saved"!

"21:57:29, 30 June 2021: Image saved"!

"21:57:31, 30 June 2021: Image saved"!

"21:57:32, 30 June 2021: Image saved"!

"Filed out from Dolphin Smalltalk 7"!

Persona subclass: #Empleado
	instanceVariableNames: 'puesto salario'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Empleado guid: (GUID fromString: '{5e3a3679-5ba0-4926-b5df-5f9237ceb1c2}')!

Empleado guid: (GUID fromString: '{5e3a3679-5ba0-4926-b5df-5f9237ceb1c2}')!
Empleado comment: ''!

Empleado comment:
''!
!Empleado methodsFor!
iniPersonaEmpleado:unDni nom:unNombre ape:unApellido pues:unPuesto sal:unSalario
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.
puesto:=unPuesto.
salario:=unSalario.
! !
!Empleado methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Empleado methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Empleado methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.! !
!Empleado methodsFor!
modiPuesto:unPuesto
"Modifica el puesto de empleado"
puesto:=unPuesto.! !
!Empleado methodsFor!
modiSalario:unSalario
"Modifica el dni de persona"
salario:=unSalario.! !
!Empleado methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Empleado methodsFor!
verDni
"Retorna el apellido"
^dni.! !
!Empleado methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Empleado methodsFor!
verPuesto
"Retorna el nombre"
^puesto.! !
!Empleado methodsFor!
verSalario
"Retorna el nombre"
^salario.! !
!Empleado categoriesFor: #iniPersonaEmpleado:nom:ape:pues:sal:!public! !

!Empleado categoriesFor: #modiApellido:!public! !

!Empleado categoriesFor: #modiDni:!public! !

!Empleado categoriesFor: #modiNombre:!public! !

!Empleado categoriesFor: #modiPuesto:!public! !

!Empleado categoriesFor: #modiSalario:!public! !

!Empleado categoriesFor: #verApellido!public! !

!Empleado categoriesFor: #verDni!public! !

!Empleado categoriesFor: #verNombre!public! !

!Empleado categoriesFor: #verPuesto!public! !

!Empleado categoriesFor: #verSalario!public! !

!Empleado class methodsFor!
crearPersonaEmpleado:unDni nom:unNombre ape:unApellido pues:unPuesto sal:unSalario
"Retorna una instancia de Libro inicializada"
^(self new) iniPersonaEmpleado:unDni nom:unNombre ape:unApellido pues:unPuesto sal:unSalario.! !
!Empleado class categoriesFor: #crearPersonaEmpleado:nom:ape:pues:sal:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Persona subclass: #Cliente
	instanceVariableNames: 'credito'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Cliente guid: (GUID fromString: '{cff8b5d2-951e-470b-9a64-de9ba8c43043}')!

Cliente guid: (GUID fromString: '{cff8b5d2-951e-470b-9a64-de9ba8c43043}')!
Cliente comment: ''!

Cliente comment:
''!
!Cliente methodsFor!
iniPersonaCliente:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.
credito:=0.! !
!Cliente methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Cliente methodsFor!
modiCredito:unCred
"Modifica el dni de persona"
credito :=unCred.! !
!Cliente methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Cliente methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.
! !
!Cliente methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Cliente methodsFor!
verCredito
"Retorna el nombre"
^credito.! !
!Cliente methodsFor!
verDni
"Retorna el apellido"
^dni.
! !
!Cliente methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Cliente categoriesFor: #iniPersonaCliente:nom:ape:!public! !

!Cliente categoriesFor: #modiApellido:!public! !

!Cliente categoriesFor: #modiCredito:!public! !

!Cliente categoriesFor: #modiDni:!public! !

!Cliente categoriesFor: #modiNombre:!public! !

!Cliente categoriesFor: #verApellido!public! !

!Cliente categoriesFor: #verCredito!public! !

!Cliente categoriesFor: #verDni!public! !

!Cliente categoriesFor: #verNombre!public! !

!Cliente class methodsFor!
crearPersonaCliente:unDni nom:unNombre ape:unApellido 
"Retorna una instancia de Libro inicializada"
^(self new) iniPersonaCliente:unDni nom:unNombre ape:unApellido.! !
!Cliente class categoriesFor: #crearPersonaCliente:nom:ape:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Persona
	instanceVariableNames: 'nombre apellido dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!
Persona comment: ''!

Persona comment:
''!
!Persona methodsFor!
iniPersona:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.! !
!Persona methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Persona methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Persona methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.! !
!Persona methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Persona methodsFor!
verDni
"Retorna el apellido"
^dni.! !
!Persona methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Persona categoriesFor: #iniPersona:nom:ape:!public! !

!Persona categoriesFor: #modiApellido:!public! !

!Persona categoriesFor: #modiDni:!public! !

!Persona categoriesFor: #modiNombre:!public! !

!Persona categoriesFor: #verApellido!public! !

!Persona categoriesFor: #verDni!public! !

!Persona categoriesFor: #verNombre!public! !

!Persona class methodsFor!
crearPersona:unDni nom:unNombre ape:unApellido
"Retorna una instancia de Libro inicializada"
^(self new) iniPersona:unDni nom:unNombre ape:unApellido.! !
!Persona class categoriesFor: #crearPersona:nom:ape:!public! !

!

!Cliente methodsFor!
iniPersonaCliente:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
super iniPersona: unDni nom: unNombre ape: unApellido.
credito:=0.! !
!Cliente categoriesFor: #iniPersonaCliente:nom:ape:!public! !

!Empleado methodsFor!
iniPersonaEmpleado:unDni nom:unNombre ape:unApellido pues:unPuesto sal:unSalario
"Inicializa una instancia de Persona"
super iniPersona: unDni nom: unNombre ape: unApellido.
puesto:=unPuesto.
salario:=unSalario.! !
!Empleado categoriesFor: #iniPersonaEmpleado:nom:ape:pues:sal:!public! !

"22:08:38, 30 June 2021: Image saved"!

"Filed out from Dolphin Smalltalk 7"!

Persona subclass: #Empleado
	instanceVariableNames: 'puesto salario'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Empleado guid: (GUID fromString: '{5e3a3679-5ba0-4926-b5df-5f9237ceb1c2}')!

Empleado guid: (GUID fromString: '{5e3a3679-5ba0-4926-b5df-5f9237ceb1c2}')!
Empleado comment: ''!

Empleado comment:
''!
!Empleado methodsFor!
iniPersonaEmpleado:unDni nom:unNombre ape:unApellido pues:unPuesto sal:unSalario
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.
puesto:=unPuesto.
salario:=unSalario.
! !
!Empleado methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Empleado methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Empleado methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.! !
!Empleado methodsFor!
modiPuesto:unPuesto
"Modifica el puesto de empleado"
puesto:=unPuesto.! !
!Empleado methodsFor!
modiSalario:unSalario
"Modifica el dni de persona"
salario:=unSalario.! !
!Empleado methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Empleado methodsFor!
verDni
"Retorna el apellido"
^dni.! !
!Empleado methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Empleado methodsFor!
verPuesto
"Retorna el nombre"
^puesto.! !
!Empleado methodsFor!
verSalario
"Retorna el nombre"
^salario.! !
!Empleado categoriesFor: #iniPersonaEmpleado:nom:ape:pues:sal:!public! !

!Empleado categoriesFor: #modiApellido:!public! !

!Empleado categoriesFor: #modiDni:!public! !

!Empleado categoriesFor: #modiNombre:!public! !

!Empleado categoriesFor: #modiPuesto:!public! !

!Empleado categoriesFor: #modiSalario:!public! !

!Empleado categoriesFor: #verApellido!public! !

!Empleado categoriesFor: #verDni!public! !

!Empleado categoriesFor: #verNombre!public! !

!Empleado categoriesFor: #verPuesto!public! !

!Empleado categoriesFor: #verSalario!public! !

!Empleado class methodsFor!
crearPersonaEmpleado:unDni nom:unNombre ape:unApellido pues:unPuesto sal:unSalario
"Retorna una instancia de Libro inicializada"
^(self new) iniPersonaEmpleado:unDni nom:unNombre ape:unApellido pues:unPuesto sal:unSalario.! !
!Empleado class categoriesFor: #crearPersonaEmpleado:nom:ape:pues:sal:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Factura
	instanceVariableNames: 'numerofactura medioDePago fecha descuento importetotal'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Factura guid: (GUID fromString: '{a6b4297f-4fc2-453b-b785-d8a8b62a9f73}')!

Factura guid: (GUID fromString: '{a6b4297f-4fc2-453b-b785-d8a8b62a9f73}')!
Factura comment: ''!

Factura comment:
''!
!Factura methodsFor!
EmitirTiket
^numerofactura, importetotal.! !
!Factura methodsFor!
iniFacturanumfactura:unnumfac mediodepago:unmediodepago fecha:unafecha descuento:undescuento importetotal:unimportetotal
numerofactura:=unnumfac.
medioDePago:=unmediodepago.
fecha:=unafecha.
descuento:=undescuento.
importetotal:=importetotal.! !
!Factura categoriesFor: #EmitirTiket!public! !

!Factura categoriesFor: #iniFacturanumfactura:mediodepago:fecha:descuento:importetotal:!public! !

!Factura class methodsFor!
CrearFacturanumfactura:unnumfac mediodepago:unmediodepago fecha:unafecha descuento:undescuento importetotal:unimportetotal
^(self  new )iniFacturanumfactura: unnumfac mediodepago: unmediodepago fecha: unafecha descuento: undescuento importetotal: unimportetotal.! !
!Factura class categoriesFor: #CrearFacturanumfactura:mediodepago:fecha:descuento:importetotal:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Persona
	instanceVariableNames: 'nombre apellido dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!
Persona comment: ''!

Persona comment:
''!
!Persona methodsFor!
iniPersona:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.! !
!Persona methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Persona methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Persona methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.! !
!Persona methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Persona methodsFor!
verDni
"Retorna el apellido"
^dni.! !
!Persona methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Persona categoriesFor: #iniPersona:nom:ape:!public! !

!Persona categoriesFor: #modiApellido:!public! !

!Persona categoriesFor: #modiDni:!public! !

!Persona categoriesFor: #modiNombre:!public! !

!Persona categoriesFor: #verApellido!public! !

!Persona categoriesFor: #verDni!public! !

!Persona categoriesFor: #verNombre!public! !

!Persona class methodsFor!
crearPersona:unDni nom:unNombre ape:unApellido
"Retorna una instancia de Libro inicializada"
^(self new) iniPersona:unDni nom:unNombre ape:unApellido.! !
!Persona class categoriesFor: #crearPersona:nom:ape:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Producto
	instanceVariableNames: 'identificador nombre precioUnitario stock'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Producto guid: (GUID fromString: '{7f7c382b-7171-4d7b-9380-436e17255d55}')!

Producto guid: (GUID fromString: '{7f7c382b-7171-4d7b-9380-436e17255d55}')!
Producto comment: ''!

Producto comment:
''!
!Producto methodsFor!
descontarStock: cantidad
stock:=stock-cantidad.! !
!Producto methodsFor!
devolverproducto
stock:=stock+1.! !
!Producto methodsFor!
iniProducto: unidentificador nombre: unnombre precioUnitario: unprecio stock: unstock
    identificador := unidentificador.
    nombre := unnombre.
    precioUnitario := unprecio.
    stock := unstock.! !
!Producto methodsFor!
modificarPrecio: nuevoprecio
precioUnitario := nuevoprecio! !
!Producto methodsFor!
verIdentificadorProducto
	^identificador! !
!Producto methodsFor!
verNombre
^nombre.! !
!Producto methodsFor!
verPrecio
^precioUnitario .! !
!Producto methodsFor!
verStock
^stock .! !
!Producto categoriesFor: #descontarStock:!public! !

!Producto categoriesFor: #devolverproducto!public! !

!Producto categoriesFor: #iniProducto:nombre:precioUnitario:stock:!public! !

!Producto categoriesFor: #modificarPrecio:!public! !

!Producto categoriesFor: #verIdentificadorProducto!public! !

!Producto categoriesFor: #verNombre!public! !

!Producto categoriesFor: #verPrecio!public! !

!Producto categoriesFor: #verStock!public! !

!Producto class methodsFor!
crearProducto:unidentificador nombre:unnombre precioUnitario: unprecio stock: unstock
^(self new) iniProducto: unidentificador nombre: unnombre precioUnitario: unprecio stock: unstock! !
!Producto class categoriesFor: #crearProducto:nombre:precioUnitario:stock:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Supermercado
	instanceVariableNames: 'nombre clientes empleados productos facturas'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Supermercado guid: (GUID fromString: '{a8e61913-e7ea-4bba-8b7c-b733d9b8c678}')!

Supermercado guid: (GUID fromString: '{a8e61913-e7ea-4bba-8b7c-b733d9b8c678}')!
Supermercado comment: ''!

Supermercado comment:
''!
!Supermercado methodsFor!
agregarCliente:unCliente
"Agrega un cliente"
clientes add:unCliente.! !
!Supermercado methodsFor!
agregarEmpleado:unEmpleado
"Agrega un empleado"
empleados add:unEmpleado.! !
!Supermercado methodsFor!
agregarFactura:unFactura
"Agrega un empleado"
facturas add:unFactura.! !
!Supermercado methodsFor!
agregarProductoSupermercado:unProducto
"Agrega un empleado"
productos add:unProducto.! !
!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := self verProductosDisponibles.
	unproducto := listaProduct detect: [:product | product verIdentificadorProducto = idProducto]
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil].! !
!Supermercado methodsFor!
iniSuperNom:unNom
"Inicializa una instancia de Supermercado"
nombre:=unNom.
clientes:= OrderedCollection new.
empleados:= OrderedCollection new.
productos:= OrderedCollection new.
facturas:= OrderedCollection new.! !
!Supermercado methodsFor!
listarProductos
	| a identificador nom precio stock |
	1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre.
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]]! !
!Supermercado methodsFor!
listarProductosIdentificador
|a  identificador nom precio stock|
1 to: productos size do:[:i| ((productos at:i) verStock>0 ) ifTrue: [
a:=i printString.
identificador:=(productos at: i) verIdentificador printString.
nom:=(productos at: i) verNombre.
precio:=(productos at: i) verPrecio printString.
stock:=(productos at: i) verStock printString.
Transcript show: a,') Identificador[',identificador,'] ', nom, ' $', precio ,' Stock[', stock, ']'; cr.] ].
! !
!Supermercado methodsFor!
verProductosDisponibles
	^productos! !
!Supermercado categoriesFor: #agregarCliente:!public! !

!Supermercado categoriesFor: #agregarEmpleado:!public! !

!Supermercado categoriesFor: #agregarFactura:!public! !

!Supermercado categoriesFor: #agregarProductoSupermercado:!public! !

!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

!Supermercado categoriesFor: #iniSuperNom:!public! !

!Supermercado categoriesFor: #listarProductos!public! !

!Supermercado categoriesFor: #listarProductosIdentificador!public! !

!Supermercado categoriesFor: #verProductosDisponibles!public! !

!Supermercado class methodsFor!
crearSuperNom:unNom
"Retorna una instancia de Supermercado inicializada"
^(self new) iniSuperNom:unNom.! !
!Supermercado class categoriesFor: #crearSuperNom:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #CarritodeCompras
	instanceVariableNames: 'listadeProducto precioTotal datosdeSupermercado'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

CarritodeCompras guid: (GUID fromString: '{978b4b69-3093-4974-9a0b-77e20c0721ff}')!

CarritodeCompras guid: (GUID fromString: '{978b4b69-3093-4974-9a0b-77e20c0721ff}')!
CarritodeCompras comment: ''!

CarritodeCompras comment:
''!
!CarritodeCompras methodsFor!
agregarProductoCarrito: idproducto unidad: unidad
	"listadeProducto  add:unproducto."

	| stock esta nuevacantidad nombre unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := datosdeSupermercado buscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			stock := unproducto verStock.
			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			"ve que la unida no sea superior a el stock"
			(stock >= unidad)
				ifTrue: 
					[unproducto descontarStock: unidad.
					precioTotal := precioTotal + (unproducto verPrecio * unidad).
					(esta)
						ifTrue: 
							[nuevacantidad := (listadeProducto at: nombre) + unproducto verStock.
							" actualiza la nueva cantidad que tiene del producto"
							listadeProducto at: nombre put: nuevacantidad]
						ifFalse: [listadeProducto at: nombre put: unidad]
					"si no esta agrega el producto y la cantidad de unidades"]
				ifFalse: [Transcript show: 'No hay Stock Disponible']
			"Se finaliza la función si encuenta al producto en supermercado"]! !
!CarritodeCompras methodsFor!
iniCarrito:supermercado cliente:idcliente
precioTotal := 0.
"listadeProducto := OrderedCollection new."
listadeProducto :=Dictionary new. 
datosdeSupermercado:=supermercado.! !
!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := datosdeSupermercado buscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			cantidad := listadeProducto at: nombre.
			"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			(esta)
				ifTrue: 
					[unproducto devolverproducto.
					nuevacantidad := (listadeProducto at: nombre) - 1.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: nombre put: nuevacantidad.
					precioTotal := precioTotal - unproducto verPrecio.
					cantidad < 1 ifFalse: [listadeProducto removeKey: nombre ifAbsent: ['Ya se quito el producto']]]
				ifFalse: 
					["Lo siento no Posee Producto en el carrito"
					]]! !
!CarritodeCompras methodsFor!
verCarrito
^listadeProducto.! !
!CarritodeCompras categoriesFor: #agregarProductoCarrito:unidad:!public! !

!CarritodeCompras categoriesFor: #iniCarrito:cliente:!public! !

!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras categoriesFor: #verCarrito!public! !

!CarritodeCompras class methodsFor!
crearCarrito:supermercado cliente: idcliente
^(self new) iniCarrito: supermercado cliente: idcliente.! !
!CarritodeCompras class categoriesFor: #crearCarrito:cliente:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Persona subclass: #Cliente
	instanceVariableNames: 'credito'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Cliente guid: (GUID fromString: '{cff8b5d2-951e-470b-9a64-de9ba8c43043}')!

Cliente guid: (GUID fromString: '{cff8b5d2-951e-470b-9a64-de9ba8c43043}')!
Cliente comment: ''!

Cliente comment:
''!
!Cliente methodsFor!
iniPersonaCliente:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.
credito:=0.! !
!Cliente methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Cliente methodsFor!
modiCredito:unCred
"Modifica el dni de persona"
credito :=unCred.! !
!Cliente methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Cliente methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.
! !
!Cliente methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Cliente methodsFor!
verCredito
"Retorna el nombre"
^credito.! !
!Cliente methodsFor!
verDni
"Retorna el apellido"
^dni.
! !
!Cliente methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Cliente categoriesFor: #iniPersonaCliente:nom:ape:!public! !

!Cliente categoriesFor: #modiApellido:!public! !

!Cliente categoriesFor: #modiCredito:!public! !

!Cliente categoriesFor: #modiDni:!public! !

!Cliente categoriesFor: #modiNombre:!public! !

!Cliente categoriesFor: #verApellido!public! !

!Cliente categoriesFor: #verCredito!public! !

!Cliente categoriesFor: #verDni!public! !

!Cliente categoriesFor: #verNombre!public! !

!Cliente class methodsFor!
crearPersonaCliente:unDni nom:unNombre ape:unApellido 
"Retorna una instancia de Libro inicializada"
^(self new) iniPersonaCliente:unDni nom:unNombre ape:unApellido.! !
!Cliente class categoriesFor: #crearPersonaCliente:nom:ape:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Producto
	instanceVariableNames: 'identificador nombre precioUnitario stock'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Producto guid: (GUID fromString: '{7f7c382b-7171-4d7b-9380-436e17255d55}')!

Producto guid: (GUID fromString: '{7f7c382b-7171-4d7b-9380-436e17255d55}')!
Producto comment: ''!

Producto comment:
''!
!Producto methodsFor!
descontarStock: cantidad
stock:=stock-cantidad.! !
!Producto methodsFor!
devolverproducto
stock:=stock+1.! !
!Producto methodsFor!
iniProducto: unidentificador nombre: unnombre precioUnitario: unprecio stock: unstock
    identificador := unidentificador.
    nombre := unnombre.
    precioUnitario := unprecio.
    stock := unstock.! !
!Producto methodsFor!
modificarPrecio: nuevoprecio
precioUnitario := nuevoprecio! !
!Producto methodsFor!
verIdentificadorProducto
	^identificador! !
!Producto methodsFor!
verNombre
^nombre.! !
!Producto methodsFor!
verPrecio
^precioUnitario .! !
!Producto methodsFor!
verStock
^stock .! !
!Producto categoriesFor: #descontarStock:!public! !

!Producto categoriesFor: #devolverproducto!public! !

!Producto categoriesFor: #iniProducto:nombre:precioUnitario:stock:!public! !

!Producto categoriesFor: #modificarPrecio:!public! !

!Producto categoriesFor: #verIdentificadorProducto!public! !

!Producto categoriesFor: #verNombre!public! !

!Producto categoriesFor: #verPrecio!public! !

!Producto categoriesFor: #verStock!public! !

!Producto class methodsFor!
crearProducto:unidentificador nombre:unnombre precioUnitario: unprecio stock: unstock
^(self new) iniProducto: unidentificador nombre: unnombre precioUnitario: unprecio stock: unstock! !
!Producto class categoriesFor: #crearProducto:nombre:precioUnitario:stock:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Supermercado
	instanceVariableNames: 'nombre clientes empleados productos facturas'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Supermercado guid: (GUID fromString: '{a8e61913-e7ea-4bba-8b7c-b733d9b8c678}')!

Supermercado guid: (GUID fromString: '{a8e61913-e7ea-4bba-8b7c-b733d9b8c678}')!
Supermercado comment: ''!

Supermercado comment:
''!
!Supermercado methodsFor!
agregarCliente:unCliente
"Agrega un cliente"
clientes add:unCliente.! !
!Supermercado methodsFor!
agregarEmpleado:unEmpleado
"Agrega un empleado"
empleados add:unEmpleado.! !
!Supermercado methodsFor!
agregarFactura:unFactura
"Agrega un empleado"
facturas add:unFactura.! !
!Supermercado methodsFor!
agregarProductoSupermercado:unProducto
"Agrega un empleado"
productos add:unProducto.! !
!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := self verProductosDisponibles.
	unproducto := listaProduct detect: [:product | product verIdentificadorProducto = idProducto]
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil].! !
!Supermercado methodsFor!
iniSuperNom:unNom
"Inicializa una instancia de Supermercado"
nombre:=unNom.
clientes:= OrderedCollection new.
empleados:= OrderedCollection new.
productos:= OrderedCollection new.
facturas:= OrderedCollection new.! !
!Supermercado methodsFor!
listarProductos
	| a identificador nom precio stock |
	1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre.
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]]! !
!Supermercado methodsFor!
listarProductosIdentificador
|a  identificador nom precio stock|
1 to: productos size do:[:i| ((productos at:i) verStock>0 ) ifTrue: [
a:=i printString.
identificador:=(productos at: i) verIdentificador printString.
nom:=(productos at: i) verNombre.
precio:=(productos at: i) verPrecio printString.
stock:=(productos at: i) verStock printString.
Transcript show: a,') Identificador[',identificador,'] ', nom, ' $', precio ,' Stock[', stock, ']'; cr.] ].
! !
!Supermercado methodsFor!
verProductosDisponibles
	^productos! !
!Supermercado categoriesFor: #agregarCliente:!public! !

!Supermercado categoriesFor: #agregarEmpleado:!public! !

!Supermercado categoriesFor: #agregarFactura:!public! !

!Supermercado categoriesFor: #agregarProductoSupermercado:!public! !

!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

!Supermercado categoriesFor: #iniSuperNom:!public! !

!Supermercado categoriesFor: #listarProductos!public! !

!Supermercado categoriesFor: #listarProductosIdentificador!public! !

!Supermercado categoriesFor: #verProductosDisponibles!public! !

!Supermercado class methodsFor!
crearSuperNom:unNom
"Retorna una instancia de Supermercado inicializada"
^(self new) iniSuperNom:unNom.! !
!Supermercado class categoriesFor: #crearSuperNom:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #CarritodeCompras
	instanceVariableNames: 'listadeProducto precioTotal datosdeSupermercado'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

CarritodeCompras guid: (GUID fromString: '{978b4b69-3093-4974-9a0b-77e20c0721ff}')!

CarritodeCompras guid: (GUID fromString: '{978b4b69-3093-4974-9a0b-77e20c0721ff}')!
CarritodeCompras comment: ''!

CarritodeCompras comment:
''!
!CarritodeCompras methodsFor!
agregarProductoCarrito: idproducto unidad: unidad
	"listadeProducto  add:unproducto."

	| stock esta nuevacantidad nombre unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := datosdeSupermercado buscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			stock := unproducto verStock.
			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			"ve que la unida no sea superior a el stock"
			(stock >= unidad)
				ifTrue: 
					[unproducto descontarStock: unidad.
					precioTotal := precioTotal + (unproducto verPrecio * unidad).
					(esta)
						ifTrue: 
							[nuevacantidad := (listadeProducto at: nombre) + unproducto verStock.
							" actualiza la nueva cantidad que tiene del producto"
							listadeProducto at: nombre put: nuevacantidad]
						ifFalse: [listadeProducto at: nombre put: unidad]
					"si no esta agrega el producto y la cantidad de unidades"]
				ifFalse: [Transcript show: 'No hay Stock Disponible']
			"Se finaliza la función si encuenta al producto en supermercado"]! !
!CarritodeCompras methodsFor!
iniCarrito:supermercado cliente:idcliente
precioTotal := 0.
"listadeProducto := OrderedCollection new."
listadeProducto :=Dictionary new. 
datosdeSupermercado:=supermercado.! !
!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := datosdeSupermercado buscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			cantidad := listadeProducto at: nombre.
			"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			(esta)
				ifTrue: 
					[unproducto devolverproducto.
					nuevacantidad := (listadeProducto at: nombre) - 1.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: nombre put: nuevacantidad.
					precioTotal := precioTotal - unproducto verPrecio.
					cantidad < 1 ifFalse: [listadeProducto removeKey: nombre ifAbsent: ['Ya se quito el producto']]]
				ifFalse: 
					["Lo siento no Posee Producto en el carrito"
					]]! !
!CarritodeCompras methodsFor!
verCarrito
^listadeProducto.! !
!CarritodeCompras categoriesFor: #agregarProductoCarrito:unidad:!public! !

!CarritodeCompras categoriesFor: #iniCarrito:cliente:!public! !

!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras categoriesFor: #verCarrito!public! !

!CarritodeCompras class methodsFor!
crearCarrito:supermercado cliente: idcliente
^(self new) iniCarrito: supermercado cliente: idcliente.! !
!CarritodeCompras class categoriesFor: #crearCarrito:cliente:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Persona subclass: #Cliente
	instanceVariableNames: 'credito'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Cliente guid: (GUID fromString: '{cff8b5d2-951e-470b-9a64-de9ba8c43043}')!

Cliente guid: (GUID fromString: '{cff8b5d2-951e-470b-9a64-de9ba8c43043}')!
Cliente comment: ''!

Cliente comment:
''!
!Cliente methodsFor!
iniPersonaCliente:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.
credito:=0.! !
!Cliente methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Cliente methodsFor!
modiCredito:unCred
"Modifica el dni de persona"
credito :=unCred.! !
!Cliente methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Cliente methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.
! !
!Cliente methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Cliente methodsFor!
verCredito
"Retorna el nombre"
^credito.! !
!Cliente methodsFor!
verDni
"Retorna el apellido"
^dni.
! !
!Cliente methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Cliente categoriesFor: #iniPersonaCliente:nom:ape:!public! !

!Cliente categoriesFor: #modiApellido:!public! !

!Cliente categoriesFor: #modiCredito:!public! !

!Cliente categoriesFor: #modiDni:!public! !

!Cliente categoriesFor: #modiNombre:!public! !

!Cliente categoriesFor: #verApellido!public! !

!Cliente categoriesFor: #verCredito!public! !

!Cliente categoriesFor: #verDni!public! !

!Cliente categoriesFor: #verNombre!public! !

!Cliente class methodsFor!
crearPersonaCliente:unDni nom:unNombre ape:unApellido 
"Retorna una instancia de Libro inicializada"
^(self new) iniPersonaCliente:unDni nom:unNombre ape:unApellido.! !
!Cliente class categoriesFor: #crearPersonaCliente:nom:ape:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Persona subclass: #Empleado
	instanceVariableNames: 'puesto salario'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Empleado guid: (GUID fromString: '{5e3a3679-5ba0-4926-b5df-5f9237ceb1c2}')!

Empleado guid: (GUID fromString: '{5e3a3679-5ba0-4926-b5df-5f9237ceb1c2}')!
Empleado comment: ''!

Empleado comment:
''!
!Empleado methodsFor!
iniPersonaEmpleado:unDni nom:unNombre ape:unApellido pues:unPuesto sal:unSalario
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.
puesto:=unPuesto.
salario:=unSalario.
! !
!Empleado methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Empleado methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Empleado methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.! !
!Empleado methodsFor!
modiPuesto:unPuesto
"Modifica el puesto de empleado"
puesto:=unPuesto.! !
!Empleado methodsFor!
modiSalario:unSalario
"Modifica el dni de persona"
salario:=unSalario.! !
!Empleado methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Empleado methodsFor!
verDni
"Retorna el apellido"
^dni.! !
!Empleado methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Empleado methodsFor!
verPuesto
"Retorna el nombre"
^puesto.! !
!Empleado methodsFor!
verSalario
"Retorna el nombre"
^salario.! !
!Empleado categoriesFor: #iniPersonaEmpleado:nom:ape:pues:sal:!public! !

!Empleado categoriesFor: #modiApellido:!public! !

!Empleado categoriesFor: #modiDni:!public! !

!Empleado categoriesFor: #modiNombre:!public! !

!Empleado categoriesFor: #modiPuesto:!public! !

!Empleado categoriesFor: #modiSalario:!public! !

!Empleado categoriesFor: #verApellido!public! !

!Empleado categoriesFor: #verDni!public! !

!Empleado categoriesFor: #verNombre!public! !

!Empleado categoriesFor: #verPuesto!public! !

!Empleado categoriesFor: #verSalario!public! !

!Empleado class methodsFor!
crearPersonaEmpleado:unDni nom:unNombre ape:unApellido pues:unPuesto sal:unSalario
"Retorna una instancia de Libro inicializada"
^(self new) iniPersonaEmpleado:unDni nom:unNombre ape:unApellido pues:unPuesto sal:unSalario.! !
!Empleado class categoriesFor: #crearPersonaEmpleado:nom:ape:pues:sal:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Factura
	instanceVariableNames: 'numerofactura medioDePago fecha descuento importetotal'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Factura guid: (GUID fromString: '{a6b4297f-4fc2-453b-b785-d8a8b62a9f73}')!

Factura guid: (GUID fromString: '{a6b4297f-4fc2-453b-b785-d8a8b62a9f73}')!
Factura comment: ''!

Factura comment:
''!
!Factura methodsFor!
EmitirTiket
^numerofactura, importetotal.! !
!Factura methodsFor!
iniFacturanumfactura:unnumfac mediodepago:unmediodepago fecha:unafecha descuento:undescuento importetotal:unimportetotal
numerofactura:=unnumfac.
medioDePago:=unmediodepago.
fecha:=unafecha.
descuento:=undescuento.
importetotal:=importetotal.! !
!Factura categoriesFor: #EmitirTiket!public! !

!Factura categoriesFor: #iniFacturanumfactura:mediodepago:fecha:descuento:importetotal:!public! !

!Factura class methodsFor!
CrearFacturanumfactura:unnumfac mediodepago:unmediodepago fecha:unafecha descuento:undescuento importetotal:unimportetotal
^(self  new )iniFacturanumfactura: unnumfac mediodepago: unmediodepago fecha: unafecha descuento: undescuento importetotal: unimportetotal.! !
!Factura class categoriesFor: #CrearFacturanumfactura:mediodepago:fecha:descuento:importetotal:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Persona
	instanceVariableNames: 'nombre apellido dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!
Persona comment: ''!

Persona comment:
''!
!Persona methodsFor!
iniPersona:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.! !
!Persona methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Persona methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Persona methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.! !
!Persona methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Persona methodsFor!
verDni
"Retorna el apellido"
^dni.! !
!Persona methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Persona categoriesFor: #iniPersona:nom:ape:!public! !

!Persona categoriesFor: #modiApellido:!public! !

!Persona categoriesFor: #modiDni:!public! !

!Persona categoriesFor: #modiNombre:!public! !

!Persona categoriesFor: #verApellido!public! !

!Persona categoriesFor: #verDni!public! !

!Persona categoriesFor: #verNombre!public! !

!Persona class methodsFor!
crearPersona:unDni nom:unNombre ape:unApellido
"Retorna una instancia de Libro inicializada"
^(self new) iniPersona:unDni nom:unNombre ape:unApellido.! !
!Persona class categoriesFor: #crearPersona:nom:ape:!public! !

!

!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := self verProductosDisponibles.
	unproducto := listaProduct detect: [:product | product verIdentificadorProducto = idProducto.
^product ]
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil].! !
!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := self verProductosDisponibles.
	unproducto := listaProduct detect: 
					[:product |
					product verIdentificadorProducto = idProducto.
					^product]
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil]! !
!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := self verProductosDisponibles.
	unproducto := listaProduct detect: 
					[:product |
					product verIdentificadorProducto = idProducto.
					^product]
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil]! !
!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

|n s c e p menu prod|
"n:= Prompter prompt:'Ingrese un nombre'."
n:='nombre'.
s:= Supermercado crearSuperNom:n.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Leandro2' ape: 'Ovied2o'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'unNombre' ape: 'unApellido' pues: 'unPuesto' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'unNombre1' ape: 'unApellido1' pues: 'unPuesto1' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: 22 nombre: 'unnombre' precioUnitario: 20 stock: 30.
s agregarProducto: p.
p:= Producto crearProducto: 3 nombre: 'unnombre2' precioUnitario: 30 stock: 20.
s agregarProducto: p.


prod := s buscarElProductoEnSupermercado: 11.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 11.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 11.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 13.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 5.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 5.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
"p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p."
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 5.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 5.
prod inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 11.
prod inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 1.
prod inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 1.
prod inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 1.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 11.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 5.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 5.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 5.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 95.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.

p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 95.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 95.
prod1 inspect.!

!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := self verProductosDisponibles.
	unproducto := listaProduct detect: 
					[:product |
					product verIdentificadorProducto = idProducto.
					^' Producto encontrado']
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil]! !
!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 95.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 95.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 95.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 95.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 905.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: '905'.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 905.
prod1 inspect.!

!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := self productos.
	unproducto := listaProduct detect: 
					[:product |
					product verIdentificadorProducto = idProducto.
					^' Producto encontrado']
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil]! !
!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := self productos.
	unproducto := listaProduct detect: 
					[:product |
					product verIdentificadorProducto = idProducto.
					^' Producto encontrado']
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil]! !
!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 905.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 905.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 905.!

!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := productos.
	unproducto := listaProduct detect: 
					[:product |
					product verIdentificadorProducto = idProducto.
					^' Producto encontrado']
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil]! !
!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := productos.
	unproducto := listaProduct detect: 
					[:product |
					product verIdentificadorProducto = idProducto.
					^' Producto encontrado']
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil]! !
!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 905.
prod1 inspect.!

!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := productos.
	unproducto := listaProduct detect: 
					[:product |
					product verIdentificadorProducto == idProducto.
					^' Producto encontrado']
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil]! !
!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 905.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: productob.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: productob.
prod1 inspect.!

!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := productos.
	unproducto := listaProduct detect: 
					[:product |
					product verIdentificadorProducto == idProducto.
					^product ]
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil]! !
!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: productob.
prod1 inspect.!

!Supermercado methodsFor!
listarClientes
    | a identificador nom apellido stock |
    1 to: clientes size
        do: 
            [:i |
            (clientes at: i)
                ifTrue: 
                    [a := i printString.
                    identificador := (clientes at: i) verIdentificador printString.
                    nom := (clientes at: i) verNombre.
                    apellido := (clientes at: i) verApellido printString.

                    Transcript
                        show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , apellido , ']';
                        cr]]! !
!Supermercado categoriesFor: #listarClientes!public! !

!Supermercado methodsFor!
listarClientes
    | a identificador nom apellido|
    1 to: clientes size
        do: 
            [:i |
            (clientes at: i)
                ifTrue: 
                    [a := i printString.
                    identificador := (clientes at: i) verIdentificador printString.
                    nom := (clientes at: i) verNombre.
                    apellido := (clientes at: i) verApellido printString.

                    Transcript
                        show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , apellido , ']';
                        cr]]! !
!Supermercado categoriesFor: #listarClientes!public! !

!Supermercado methodsFor!
listarClientes
    | a identificador nom apellido|
    1 to: clientes size
        do: 
            [:i |
            (clientes at: i)
                ifTrue: 
                    [a := i printString.
                    identificador := (clientes at: i) verIdentificador printString.
                    nom := (clientes at: i) verNombre.
                    apellido := (clientes at: i) verApellido printString.

                    Transcript
                        show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , apellido , ']';
                        cr]]! !
!Supermercado categoriesFor: #listarClientes!public! !

!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := productos.
	unproducto := listaProduct detect: 
					[:product |
					product verIdentificadorProducto = idProducto.
					^product ]
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil]! !
!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.!

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
s listarClientes.!

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.!

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
s listarClientes.!

!Supermercado methodsFor!
listarClientes
    | a identificador nom apellido|
    1 to: clientes size
        do: 
            [:i |
            (clientes at: i)
                ifTrue: 
                    [a := i printString.
                    identificador := (clientes at: i) verIdentificador printString.
                    nom := (clientes at: i) verNombre.
                    apellido := (clientes at: i) verApellido printString.

                    Transcript
                        show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , apellido , ']';
                        cr]]! !
!Supermercado categoriesFor: #listarClientes!public! !

!Supermercado methodsFor!
verClientes
^ clientes at: 1.! !
!Supermercado categoriesFor: #verClientes!public! !

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.

s verClientes.!

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.

s verClientes.!

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.

s verClientes.!

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.

"s verClientes."

s listarClientes.!

!Supermercado methodsFor!
verClientes
|client|
client:= clientes at: 1.
^  client printString.! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
verClientes
|client|
client:= clientes at: 1.
^  client printString.! !
!Supermercado categoriesFor: #verClientes!public! !

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.

s verClientes.!

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.

s verClientes.!

!Supermercado methodsFor!
verClientes
|client|
client:= clientes at: 1.
client printString.
Transcript show: client.! !
!Supermercado categoriesFor: #verClientes!public! !

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.

s verClientes.!

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.

s verClientes.
!

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
!

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
a Supermercado
s verClientes.
!

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
a Supermercado
s verClientes.!

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
a Supermercado
s verClientes.!

Supermercado crearSuperNom:'sunshine'!

s:= Supermercado crearSuperNom:'sunshine'.!

s:= Supermercado crearSuperNom:'sunshine'.!

s:= Supermercado crearSuperNom:'sunshine'.!

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.!

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.

s verClientes.!

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.

s verClientes.!

|a s c e p productoa productob menu carrito unid prod idproducto Pseleccionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.

s verClientes.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.
!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

| auxi |
auxi:= Collection new: #( (3 2 1) (-5 4 12)).
auxi printOn: Transcript.!

| auxi |
auxi:= 'hola'.
auxi printOn: Transcript.!

| auxi |
auxi:= 'hola'.
auxi printOn: Transcript.!

| agenda events |
agenda := Cliente new.
events := agenda eventsFor: (Date newDay: 25 month:6 year: 2009).
events size printOn: Transcript.!

!Supermercado methodsFor!
listarClientes
    | a identificador nom apellido|
    1 to: clientes size
        do: 
            [:i |
            (clientes at: i)
                ifTrue: 
                    [a := i printString.
                    identificador := (clientes at: i) verIdentificador printString.
                    nom := (clientes at: i) verNombre printString .
                    apellido := (clientes at: i) verApellido printString.

                    Transcript
                        show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , apellido , ']';
                        cr]]! !
!Supermercado categoriesFor: #listarClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

"supermercado1 verClientes."

supermercado1 listarClientes.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

"supermercado1 verClientes."

supermercado1 listarClientes.!

!Supermercado methodsFor!
verClientes
	| client |
	client := clientes at: 1.
	client printString.
	Transcript show: 'client'! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
verClientes
	| client |
	client := clientes at: 1.
	client printString.
	Transcript show: 'client'! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

Transcript show: 'anyString'.
!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

Transcript show: 'anyString'.

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client |
	client := clientes at: 1.
	client printString.
	Transcript show: client.! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

Transcript show: 'anyString'.

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client |
	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido .! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client |

1 to: clientes size do:[:contador|( clientes at: contador ) verApellido.
Transcript show: client verApellido .
].

"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client |

1 to: clientes size do:[:contador|( clientes at: contador ) verApellido.
].

"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.
!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.
!

!Supermercado methodsFor!
verClientes
	| client |
	1 to: clientes size do: [:contador | Transcript show: (clientes at: contador) verApellido]

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
verClientes
	| client |
	1 to: clientes size do: [:contador | Transcript show: (clientes at: contador) verApellido].

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client |
	1 to: clientes size do: [:contador | Transcript show: (clientes at: contador) verApellido; cr.



].

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client |
	1 to: clientes size do: [:contador |  client :=(clientes at: contador).

Transcript show:  client  verApellido, client  verNombre ; cr.

].

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client |
	1 to: clientes size do: [:contador |  client :=(clientes at: contador).

Transcript show:  client  verApellido,' ', client  verNombre ; cr.

].

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
verClientes
	| client |
	1 to: clientes size do: [:contador |  client :=(clientes at: contador).

Transcript show:  client  verApellido,'  ', client  verNombre ; cr.

].

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.
!

!Supermercado methodsFor!
verClientes
	| client |
	1 to: clientes size do: [:contador |  client :=(clientes at: contador)  printString.

Transcript show:  client  verApellido,'  ', client  verNombre ; cr.

].

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client |
	1 to: clientes size do: [:contador |  client :=(clientes at: contador) .

Transcript show:  client  verApellido,'  ', client  verNombre ; cr.

].

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
listarClientes
    | a identificador nom apellido|
    1 to: clientes size
        do: 
            [:i |
            (clientes at: i)
                ifTrue: 
                    [a := i printString.
                    identificador := (clientes at: i) verIdentificador .
                    nom := (clientes at: i) verNombre.
                    apellido := (clientes at: i) verApellido.

                    Transcript
                        show: a , ') Identificador[ ' , identificador , ' ] ' , nom , ' $' , apellido , ']';
                        cr]]! !
!Supermercado categoriesFor: #listarClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

"supermercado1 verClientes."

supermercado1 listarClientes.!

!Supermercado methodsFor!
listarClientes
    | a identificador nom apellido|
    1 to: clientes size
        do: 
            [:i |
            (clientes at: i)
                ifTrue: 
                    [a := i printString.
                    identificador := (clientes at: i) verIdentificador .
                    nom := (clientes at: i) verNombre.
                    apellido := (clientes at: i) verApellido.

                    Transcript
                        show: a , ') Identificador[ ' , identificador , ' ] ' , nom , ' $' , apellido , ']';
                        cr]]! !
!Supermercado categoriesFor: #listarClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

"supermercado1 verClientes."

supermercado1 listarClientes.!

!Supermercado methodsFor!
listarProductos
	| a identificador nom precio stock |
	1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre.
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]]! !
!Supermercado categoriesFor: #listarProductos!public! !

!Supermercado methodsFor!
listarProductos
	| a identificador nom precio stock |
	1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]]! !
!Supermercado categoriesFor: #listarProductos!public! !

!Supermercado methodsFor!
listarClientes
    | a identificador nom apellido|
    1 to: clientes size
        do: 
            [:i |
            (clientes at: i)
                ifTrue: 
                    [a := i printString.
                    identificador := (clientes at: i) verIdentificador .
                    nom := (clientes at: i) verNombre.
                    apellido := (clientes at: i) verApellido.

                    Transcript
                        show: a , ') Identificador[ ' , identificador , ' ] ' , nom , ' $' , apellido , ']';
                        cr]]! !
!Supermercado categoriesFor: #listarClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

"supermercado1 verClientes."

supermercado1 listarClientes.!

!Supermercado methodsFor!
verClientes
	| client identificador nom apellido|
	1 to: clientes size do: [:contador |  client :=(clientes at: contador) .

Transcript show:  client  verApellido,'  ', client  verNombre ; cr.

].

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
verClientes
	| client identificador nom apellido|
	1 to: clientes size do: [:contador |  client :=(clientes at: contador) .
identificador := client verIdentificador .
                    nom := client verNombre.
                    apellido := client verApellido.

Transcript show:  client  verApellido,'  ', client  verNombre ; cr.

].

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
verClientes
	| client identificador nom apellido |
	1 to: clientes size
		do: 
			[:contador |
			client := clientes at: contador.
			identificador := client verIdentificador.
			nom := client verNombre.
			apellido := client verApellido.
			Transcript
				show: client verApellido , '  ' , client verNombre;
				cr]

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

"supermercado1 verClientes."

supermercado1 listarClientes.
!

!Supermercado methodsFor!
verClientes
	| client identificador nom apellido |
	1 to: clientes size
		do: 
			[:contador |
			client := clientes at: contador.
			identificador := client verIdentificador.
			nom := client verNombre.
			apellido := client verApellido.
			Transcript
				show: client verApellido , '  ' , client verNombre;
				cr]

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

Persona subclass: #Cliente
	instanceVariableNames: 'credito idcliente'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Cliente class methodsFor!
crearPersonaCliente:unDni nom:unNombre ape:unApellido id:idcliente
"Retorna una instancia de Libro inicializada"
^(self new) iniPersonaCliente:unDni nom:unNombre ape:unApellido.! !
!Cliente class categoriesFor: #crearPersonaCliente:nom:ape:id:!public! !

!Cliente methodsFor!
iniPersonaCliente:unDni nom:unNombre ape:unApellido id:idcliente
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.
credito:=0.! !
!Cliente categoriesFor: #iniPersonaCliente:nom:ape:id:!public! !

Cliente removeSelector: #iniPersonaCliente:nom:ape: ifAbsent: []!

!Cliente class methodsFor!
crearPersonaCliente:unDni nom:unNombre ape:unApellido id:idcliente
"Retorna una instancia de Libro inicializada"
^(self new) iniPersonaCliente: unDni nom: unNombre ape: unApellido id: idcliente.! !
!Cliente class categoriesFor: #crearPersonaCliente:nom:ape:id:!public! !

Cliente class removeSelector: #crearPersonaCliente:nom:ape: ifAbsent: []!

!Supermercado methodsFor!
listarClientes
    | a identificador nom apellido|
    1 to: clientes size
        do: 
            [:i |
            (clientes at: i)
                ifTrue: 
                    [a := i printString.
                    "identificador := (clientes at: i) verIdentificador ."
                    nom := (clientes at: i) verNombre.
                    apellido := (clientes at: i) verApellido.

                    Transcript
                        show: a , ') Identificador[ ' , identificador , ' ] ' , nom , ' $' , apellido , ']';
                        cr]]! !
!Supermercado categoriesFor: #listarClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

"supermercado1 verClientes."

supermercado1 listarClientes.!

!Supermercado methodsFor!
listarClientes
    | a identificador nom apellido|
    1 to: clientes size
        do: 
            [:i |
            (clientes at: i)
                ifTrue: 
                    [a := i printString.
                    "identificador := (clientes at: i) verIdentificador ."
                    nom := (clientes at: i) verNombre.
                    apellido := (clientes at: i) verApellido.

                    Transcript
                        show: a , ') Identificador[ ' , identificador , ' ] ' , nom , ' $' , apellido , ']';
                        cr]]! !
!Supermercado categoriesFor: #listarClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

"supermercado1 verClientes."

supermercado1 listarClientes.!

!Supermercado methodsFor!
verClientes
	| client identificador nom apellido |
	1 to: clientes size
		do: 
			[:contador |
			client := clientes at: contador.
			identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido.
			Transcript
				show: client verApellido , '  ' , client verNombre;
				cr]

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

!Cliente methodsFor!
verIDcliente
^idcliente.! !
!Cliente categoriesFor: #verIDcliente!public! !

!Supermercado methodsFor!
verClientes
	| client identificador nom apellido |
	1 to: clientes size
		do: 
			[:contador |
			client := clientes at: contador.
			identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido.
			Transcript
				show: client verApellido , '  ' , client verNombre;
				cr]

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
verClientes
	| client identificador nom apellido |
	1 to: clientes size
		do: 
			[:contador |
			client := clientes at: contador.
			identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido.
			Transcript
				"show: client verApellido , '  ' , client verNombre;"
 show: client , ') Identificador[' , identificador , '] ' , nom , ' $' , apellido , ']';

				cr]

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client identificador nom apellido |
	1 to: clientes size
		do: 
			[:contador |
			client := clientes at: contador.
			identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido.
			Transcript
				show: client verApellido , '  ' , client verNombre;

				cr]

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
verClientes
	| client identificador nom apellido |
	1 to: clientes size
		do: 
			[:contador |
			client := clientes at: contador.
			identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido.
			Transcript
				"show: client verApellido , '  ' , client verNombre;"
show: nom , '  ' , apellido ;

				cr]

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client identificador nom apellido |
	1 to: clientes size
		do: 
			[:contador |
			client := clientes at: contador.
			identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido.
			Transcript
				"show: client verApellido , '  ' , client verNombre;"
show: nom , '  ' , apellido ;

				cr]

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client identificador nom apellido |
	1 to: clientes size
		do: 
			[:contador |
			client := clientes at: contador.
			identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido.
			Transcript
				show: nom , '  ' , apellido;
				cr
			"show: client verApellido , '  ' , client verNombre;"]

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
verClientes
	| client identificador nom apellido |
	1 to: clientes size
		do: 
			[:contador |
			client := clientes at: contador.
			identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido.
			Transcript
				show: nom , '  ' , apellido;
				cr
			"show: client verApellido , '  ' , client verNombre;"]

	"	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido ."! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.
!

!Supermercado methodsFor!
verClientes
	| client identificador nom apellido |
	1 to: clientes size
		do: 
			[:contador |
			"client := clientes at: contador.
			identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido."
			

	client := clientes at: 1.
	client printString.
	Transcript show: client verApellido .]! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client identificador nom apellido |
	1 to: clientes size
		do: 
			[:contador |
			client := clientes at: contador.
			"identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido."
	Transcript show: client verApellido ;cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client identificador nom apellido |
	1 to: clientes size
		do: 
			[:contador |
			client := clientes at: contador.
			"identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido."
	Transcript show: client verApellido ;cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client identificador nom apellido |
	1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
			"identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido."
	Transcript show: client verApellido ;cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.
!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client |
	1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
			"identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido."
	Transcript show: client verApellido ;cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
verClientes
	| client |
	1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
			"identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido."
	Transcript show: client verApellido ;cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
verClientes
	| client |
	1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
			"identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido."
	Transcript show: client verApellido ;cr .]! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client |
1 to: clientes size do:[: contador| client :=( clientes at:contador ).
].


	"1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
			identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido.
	Transcript show: client verApellido ;cr .] "! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client |
1 to: clientes size do:[: contador|  client :=( clientes at:contador ).
].


	"1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
			identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido.
	Transcript show: client verApellido ;cr .] "! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
	| client |
1 to: clientes size do:[: contador|  client :=( clientes at:contador ).
].


	"1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
			identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido.
	Transcript show: client verApellido ;cr .] "! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.
!

!Supermercado methodsFor!
verClientes

	"1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
			identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido.
	Transcript show: client verApellido ;cr .] "! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := productos.
	unproducto := listaProduct detect: 
					[:product |
					product verIdentificadorProducto = idProducto.
				]
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil]
! !
!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := productos.
	unproducto := listaProduct detect: [:product | product verIdentificadorProducto = idProducto]
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil]! !
!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := productos.
	unproducto := listaProduct detect: [:product | product verIdentificadorProducto = idProducto]
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'.
					^nil].
^unproducto.! !
!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: productob.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 1.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 51.
prod1 inspect.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 2.
prod1 inspect.!

Supermercado removeSelector: #verClientes ifAbsent: []!

!Supermercado methodsFor!
verClientes

	"1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
			identificador := client verIDcliente.
			nom := client verNombre.
			apellido := client verApellido.
	Transcript show: client verApellido ;cr .] "! !
!Supermercado categoriesFor: #verClientes!public! !

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 2.!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 2.
!

!Supermercado methodsFor!
verClientes
|client |
1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
	Transcript show: client verApellido ;cr .] ! !
!Supermercado categoriesFor: #verClientes!public! !

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 2.
!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 2.
!

!Supermercado methodsFor!
verClientes
|client |
1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
	Transcript show: client verApellido ;cr .] ! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
buscarElProductoEnSupermercado: idProducto
	| unproducto product listaProduct |
	listaProduct := productos.
	unproducto := listaProduct detect: [:product | product verIdentificadorProducto = idProducto]
				ifNone: 
					[Transcript show: 'No se encuentra el Producto'; cr.
					^nil].
^unproducto.! !
!Supermercado categoriesFor: #buscarElProductoEnSupermercado:!public! !

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 22.
!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 22.
!

| s c e p productoa productob menu carrito unid prod idproducto prod1|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: 1 nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: 2 nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: 3 nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: 4 nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

prod1 := s buscarElProductoEnSupermercado: 22.
!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
|client |
1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
	Transcript show: client verApellido. ] ! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes1
|client |
^ clientes at: 1.
"1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
	Transcript show: client verApellido. ] "! !
!Supermercado categoriesFor: #verClientes1!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes1.
!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.!

cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' .!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."

supermercado1 := Supermercado crearSuperNom:'sunshine'.
"Cliente crearPersonaCliente: unDni nom: unNombre ape: unApellido id: idcliente"
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .!

"supermercado1 listarClientes."!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes1.

supermercado1 listarClientes.
!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.

supermercado1 verClientes1.!

!Supermercado methodsFor!
verClientes1
|client |
1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
	Transcript show: client verApellido. ] ! !
!Supermercado categoriesFor: #verClientes1!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.!

Supermercado removeSelector: #verClientes1 ifAbsent: []!

!Supermercado methodsFor!
verClientes
|client |
1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
	Transcript show: client verApellido; cr. ] ! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
verClientes
|client |
1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
	Transcript show: client verIDcliente ,'  - ',client verApellido; cr. ] ! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
verClientes
|client |
1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
	Transcript show: client verIDcliente ,'  - ',client verNombre ,' ',client verApellido; cr. ] ! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
|client |
1 to: clientes size
		do: 
			[:contador | client := (clientes at: contador).
	Transcript show: client verIDcliente ,'  - ',client verApellido; cr. ] ! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.
!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
|client |
1 to: clientes size
        do: 
            [:contador | client := (clientes at: contador).
    Transcript show: client verApellido. ]! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.
!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.

!

!Supermercado methodsFor!
verClientes
|client |
1 to: clientes size
        do: 
            [:contador | client := (clientes at: contador).
    Transcript show: client verApellido; cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.
!

!Supermercado methodsFor!
verClientes
|client |
1 to: clientes size
        do: 
            [:contador | client := (clientes at: contador).
    Transcript show: client verApellido, client verNombre ;cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.!

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.
!

!Supermercado methodsFor!
verClientes
|client |
1 to: clientes size
        do: 
            [:contador | client := (clientes at: contador).
    Transcript show: client verApellido,' ', client verNombre ;cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.
!

!Supermercado methodsFor!
verClientes
|client |
1 to: clientes size
        do: 
            [:contador | client := (clientes at: contador).
    Transcript show: client verApellido,'- ', client verNombre ;cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
|client |
1 to: clientes size
        do: 
            [:contador | client := (clientes at: contador).
    Transcript show: client verIDcliente,client verNombre,' ',client verApellido ;cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
verClientes
|client |
1 to: clientes size
        do: 
            [:contador | client := (clientes at: contador).
    Transcript show: client verIDcliente,' ',client verNombre,' ',client verApellido ;cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.
!

!Supermercado methodsFor!
verClientes
|client |
1 to: clientes size
        do: 
            [:contador | client := (clientes at: contador).
    Transcript show: contador ,client verNombre,' ',client verApellido ;cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
|client |
1 to: clientes size
        do: 
            [:contador | client := (clientes at: contador).
    Transcript show: contador,' ',client verNombre,' ',client verApellido ;cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
|client |
1 to: clientes size
        do: 
            [:contador | client := (clientes at: contador).
    Transcript show: contador,client verNombre,' ',client verApellido ;cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
|client cont|
1 to: clientes size
        do: 
            [:contador | client := (clientes at: contador).
cont:=contador printString.
    Transcript show: cont ,client verNombre,' ',client verApellido ;cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

!Supermercado methodsFor!
verClientes
|client cont|
1 to: clientes size
        do: 
            [:contador | client := (clientes at: contador).
cont:=contador printString.
    Transcript show: cont,client verNombre,' ',client verApellido ;cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.!

!Supermercado methodsFor!
verClientes
|client cont|
1 to: clientes size
        do: 
            [:contador | client := (clientes at: contador).
cont:=contador printString.
    Transcript show: cont,' ',client verNombre,' ',client verApellido ;cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

|a supermercado1 cliente1 e p productoa productob menu carrito unid prod idproducto Pseleccionado|

"Transcript show: 'anyString'."
supermercado1 := Supermercado crearSuperNom:'sunshine'.
cliente1:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id: 1 .
supermercado1 agregarCliente: cliente1.
cliente1:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id: 2.
supermercado1 agregarCliente: cliente1.


supermercado1 verClientes.!

"11:24:03, 03 July 2021: Image saved"!

"11:25:29, 03 July 2021: Image saved"!

"12:19:04, 04 July 2021: Dolphin Smalltalk Professional started"!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #CarritoDeCompras
	instanceVariableNames: 'ListadeProducto PrecioTotal'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

CarritoDeCompras guid: (GUID fromString: '{8322bbaa-9242-46e2-8c41-fda222a96bf4}')!

CarritoDeCompras guid: (GUID fromString: '{8322bbaa-9242-46e2-8c41-fda222a96bf4}')!
CarritoDeCompras comment: ''!

CarritoDeCompras comment:
''!
!CarritoDeCompras categoriesForClass!Kernel-Objects! !
!CarritoDeCompras methodsFor!
agregarProducto: unproducto
ListadeProducto  add:unproducto.
unproducto descontarStock: 1.! !
!CarritoDeCompras methodsFor!
iniCarrito
PrecioTotal := 0.
ListadeProducto := OrderedCollection new.! !
!CarritoDeCompras methodsFor!
verCarrito
^ListadeProducto.! !
!CarritoDeCompras categoriesFor: #agregarProducto:!public! !

!CarritoDeCompras categoriesFor: #iniCarrito!public! !

!CarritoDeCompras categoriesFor: #verCarrito!public! !

!CarritoDeCompras class methodsFor!
crearCarrito
^(self new) iniCarrito! !
!CarritoDeCompras class categoriesFor: #crearCarrito!public! !

!

CarritodeCompras rename: #CarritodeComprasDLCS!

Object subclass: #CarritoDeCompras
	instanceVariableNames: 'listadeProducto precioTotal'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"12:38:59, 04 July 2021: Image saved"!

"12:39:00, 04 July 2021: Image saved"!

"12:39:01, 04 July 2021: Image saved"!

!CarritoDeCompras methodsFor!
CargarProductoAcarrito:unProducto
listadeProducto add:unProducto.! !
!CarritoDeCompras categoriesFor: #CargarProductoAcarrito:!public! !

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #CarritoDeCompras
	instanceVariableNames: 'ListadeProducto PrecioTotal'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

CarritoDeCompras guid: (GUID fromString: '{8322bbaa-9242-46e2-8c41-fda222a96bf4}')!

CarritoDeCompras guid: (GUID fromString: '{8322bbaa-9242-46e2-8c41-fda222a96bf4}')!
CarritoDeCompras comment: ''!

CarritoDeCompras comment:
''!
!CarritoDeCompras methodsFor!
agregarProducto: unproducto
ListadeProducto  add:unproducto.
unproducto descontarStock: 1.! !
!CarritoDeCompras methodsFor!
iniCarrito
PrecioTotal := 0.
ListadeProducto := OrderedCollection new.! !
!CarritoDeCompras methodsFor!
verCarrito
^ListadeProducto.! !
!CarritoDeCompras categoriesFor: #agregarProducto:!public! !

!CarritoDeCompras categoriesFor: #iniCarrito!public! !

!CarritoDeCompras categoriesFor: #verCarrito!public! !

!CarritoDeCompras class methodsFor!
crearCarrito
^(self new) iniCarrito! !
!CarritoDeCompras class categoriesFor: #crearCarrito!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #CarritoDeCompras
	instanceVariableNames: 'ListadeProducto PrecioTotal'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

CarritoDeCompras guid: (GUID fromString: '{8322bbaa-9242-46e2-8c41-fda222a96bf4}')!

CarritoDeCompras guid: (GUID fromString: '{8322bbaa-9242-46e2-8c41-fda222a96bf4}')!
CarritoDeCompras comment: ''!

CarritoDeCompras comment:
''!
!CarritoDeCompras methodsFor!
agregarProducto: unproducto
ListadeProducto  add:unproducto.
unproducto descontarStock: 1.! !
!CarritoDeCompras methodsFor!
iniCarrito
PrecioTotal := 0.
ListadeProducto := OrderedCollection new.! !
!CarritoDeCompras methodsFor!
verCarrito
^ListadeProducto.! !
!CarritoDeCompras categoriesFor: #agregarProducto:!public! !

!CarritoDeCompras categoriesFor: #iniCarrito!public! !

!CarritoDeCompras categoriesFor: #verCarrito!public! !

!CarritoDeCompras class methodsFor!
crearCarrito
^(self new) iniCarrito! !
!CarritoDeCompras class categoriesFor: #crearCarrito!public! !

!

Object subclass: #CarritoDeCompras
	instanceVariableNames: 'listadeProducto precioTotal'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!CarritoDeCompras methodsFor!
CargarProductoAcarrito:unProducto
listadeProducto add:unProducto.! !
!CarritoDeCompras categoriesFor: #CargarProductoAcarrito:!public! !

!CarritoDeCompras methodsFor!
agregarProducto: unproducto
listadeProducto  add:unproducto.
unproducto descontarStock: 1.! !
!CarritoDeCompras categoriesFor: #agregarProducto:!public! !

!CarritoDeCompras methodsFor!
iniCarrito
precioTotal := 0.
listadeProducto := OrderedCollection new.! !
!CarritoDeCompras categoriesFor: #iniCarrito!public! !

Object subclass: #CarritoDeCompras
	instanceVariableNames: 'listadeProducto precioTotal idcarrito idpersona'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #CarritoDeCompras
	instanceVariableNames: 'listadeProducto precioTotal idcarrito idpersona'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"13:25:31, 04 July 2021: Image saved"!

!CarritoDeCompras methodsFor!
verCarrito
^listadeProducto.! !
!CarritoDeCompras categoriesFor: #verCarrito!public! !

"13:42:00, 04 July 2021: Image saved to 'C:\Users\loren\Documents\Dolphin Smalltalk 7\Core\Object Arts\Dolphin\Base\imagenDPRO.img7'"!

"13:42:26, 04 July 2021: Image saved"!

"13:46:45, 04 July 2021: Image saved to 'C:\Users\loren\Documents\Dolphin Smalltalk 7\Core\Object Arts\Dolphin\Base\Imagen\imagenDPRO.img7'"!

"13:53:40, 04 July 2021: Image saved"!

"13:53:51, 04 July 2021: Image saved"!

"13:54:49, 04 July 2021: Image saved"!

CarritodeComprasDLCS subclass: #CarritodeCompras
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
CarritodeCompras guid: (GUID fromString: '{4421fcf9-6956-49d3-8679-d393f5ec5809}')!
CarritodeCompras comment: ''!
!CarritodeCompras categoriesForClass!Kernel-Objects! !
CarritodeCompras removeFromSystem!

CarritodeComprasDLCS rename: #CarritodeCompras!

CarritoDeCompras removeFromSystem!

"13:56:29, 04 July 2021: Image saved"!

"14:00:05, 04 July 2021: Image saved to 'C:\Users\loren\Documents\Dolphin Smalltalk 7\Supermercado\imagenDPRO.img7'"!

"14:07:58, 04 July 2021: Image saved"!

"14:08:01, 04 July 2021: Dolphin Smalltalk Professional started"!

"14:08:05, 04 July 2021: Image saved"!

"14:08:09, 04 July 2021: Dolphin Smalltalk Professional started"!

!CarritodeCompras methodsFor!
CargarProductoAcarrito:unProducto
listadeProducto add:unProducto.! !
!CarritodeCompras categoriesFor: #CargarProductoAcarrito:!public! !

Object subclass: #CarritodeCompras
	instanceVariableNames: 'listadeProducto precioTotal datosdeSupermercado idpersona'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!CarritodeCompras methodsFor!
iniCarrito:idPersona
precioTotal := 0.
idpersona :=idPersona.
listadeProducto := OrderedCollection new.
"listadeProducto :=Dictionary new. "! !
!CarritodeCompras categoriesFor: #iniCarrito:!public! !

"14:52:58, 04 July 2021: Image saved"!

!CarritodeCompras methodsFor!
agregarProductoCarritoDLCS: idproducto unidad: unidad
	"listadeProducto  add:unproducto."

	| stock esta nuevacantidad nombre unproducto |
	"Se busca que el producto exista en el supermercado"
	unproducto := datosdeSupermercado buscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			stock := unproducto verStock.
			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			"ve que la unida no sea superior a el stock"
			(stock >= unidad)
				ifTrue: 
					[unproducto descontarStock: unidad.
					precioTotal := precioTotal + (unproducto verPrecio * unidad).
					(esta)
						ifTrue: 
							[nuevacantidad := (listadeProducto at: nombre) + unproducto verStock.
							" actualiza la nueva cantidad que tiene del producto"
							listadeProducto at: nombre put: nuevacantidad]
						ifFalse: [listadeProducto at: nombre put: unidad]
					"si no esta agrega el producto y la cantidad de unidades"]
				ifFalse: [Transcript show: 'No hay Stock Disponible']
			"Se finaliza la función si encuenta al producto en supermercado"]! !
!CarritodeCompras categoriesFor: #agregarProductoCarritoDLCS:unidad:!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s LLamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.
menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s LLamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductos.
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductos.
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s LLamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Persona
	instanceVariableNames: 'nombre apellido dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!

Persona guid: (GUID fromString: '{01a07eb5-bbdd-48b3-aa86-7e209bec5155}')!
Persona comment: ''!

Persona comment:
''!
!Persona methodsFor!
iniPersona:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.! !
!Persona methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Persona methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Persona methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.! !
!Persona methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Persona methodsFor!
verDni
"Retorna el apellido"
^dni.! !
!Persona methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Persona categoriesFor: #iniPersona:nom:ape:!public! !

!Persona categoriesFor: #modiApellido:!public! !

!Persona categoriesFor: #modiDni:!public! !

!Persona categoriesFor: #modiNombre:!public! !

!Persona categoriesFor: #verApellido!public! !

!Persona categoriesFor: #verDni!public! !

!Persona categoriesFor: #verNombre!public! !

!Persona class methodsFor!
crearPersona:unDni nom:unNombre ape:unApellido
"Retorna una instancia de Libro inicializada"
^(self new) iniPersona:unDni nom:unNombre ape:unApellido.! !
!Persona class categoriesFor: #crearPersona:nom:ape:!public! !

!

"15:09:08, 04 July 2021: Image saved"!

"Filed out from Dolphin Smalltalk 7"!

Persona subclass: #Cliente
	instanceVariableNames: 'credito'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Cliente guid: (GUID fromString: '{cff8b5d2-951e-470b-9a64-de9ba8c43043}')!

Cliente guid: (GUID fromString: '{cff8b5d2-951e-470b-9a64-de9ba8c43043}')!
Cliente comment: ''!

Cliente comment:
''!
!Cliente methodsFor!
iniPersonaCliente:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.
credito:=0.! !
!Cliente methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Cliente methodsFor!
modiCredito:unCred
"Modifica el dni de persona"
credito :=unCred.! !
!Cliente methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Cliente methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.
! !
!Cliente methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Cliente methodsFor!
verCredito
"Retorna el nombre"
^credito.! !
!Cliente methodsFor!
verDni
"Retorna el apellido"
^dni.
! !
!Cliente methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Cliente categoriesFor: #iniPersonaCliente:nom:ape:!public! !

!Cliente categoriesFor: #modiApellido:!public! !

!Cliente categoriesFor: #modiCredito:!public! !

!Cliente categoriesFor: #modiDni:!public! !

!Cliente categoriesFor: #modiNombre:!public! !

!Cliente categoriesFor: #verApellido!public! !

!Cliente categoriesFor: #verCredito!public! !

!Cliente categoriesFor: #verDni!public! !

!Cliente categoriesFor: #verNombre!public! !

!Cliente class methodsFor!
crearPersonaCliente:unDni nom:unNombre ape:unApellido 
"Retorna una instancia de Libro inicializada"
^(self new) iniPersonaCliente:unDni nom:unNombre ape:unApellido.! !
!Cliente class categoriesFor: #crearPersonaCliente:nom:ape:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Persona subclass: #Cliente
	instanceVariableNames: 'credito'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Cliente guid: (GUID fromString: '{cff8b5d2-951e-470b-9a64-de9ba8c43043}')!

Cliente guid: (GUID fromString: '{cff8b5d2-951e-470b-9a64-de9ba8c43043}')!
Cliente comment: ''!

Cliente comment:
''!
!Cliente methodsFor!
iniPersonaCliente:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.
credito:=0.! !
!Cliente methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Cliente methodsFor!
modiCredito:unCred
"Modifica el dni de persona"
credito :=unCred.! !
!Cliente methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Cliente methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.
! !
!Cliente methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Cliente methodsFor!
verCredito
"Retorna el nombre"
^credito.! !
!Cliente methodsFor!
verDni
"Retorna el apellido"
^dni.
! !
!Cliente methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Cliente categoriesFor: #iniPersonaCliente:nom:ape:!public! !

!Cliente categoriesFor: #modiApellido:!public! !

!Cliente categoriesFor: #modiCredito:!public! !

!Cliente categoriesFor: #modiDni:!public! !

!Cliente categoriesFor: #modiNombre:!public! !

!Cliente categoriesFor: #verApellido!public! !

!Cliente categoriesFor: #verCredito!public! !

!Cliente categoriesFor: #verDni!public! !

!Cliente categoriesFor: #verNombre!public! !

!Cliente class methodsFor!
crearPersonaCliente:unDni nom:unNombre ape:unApellido 
"Retorna una instancia de Libro inicializada"
^(self new) iniPersonaCliente:unDni nom:unNombre ape:unApellido.! !
!Cliente class categoriesFor: #crearPersonaCliente:nom:ape:!public! !

!

Persona subclass: #Cliente
	instanceVariableNames: 'idcliente credito'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Cliente methodsFor!
verIDcliente
^idcliente.! !
!Cliente categoriesFor: #verIDcliente!public! !

Cliente class removeSelector: #crearPersonaCliente:nom:ape: ifAbsent: []!

"Filed out from Dolphin Smalltalk 7"!

Persona subclass: #Cliente
	instanceVariableNames: 'credito'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Cliente guid: (GUID fromString: '{cff8b5d2-951e-470b-9a64-de9ba8c43043}')!

Cliente guid: (GUID fromString: '{cff8b5d2-951e-470b-9a64-de9ba8c43043}')!
Cliente comment: ''!

Cliente comment:
''!
!Cliente methodsFor!
iniPersonaCliente:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
dni:=unDni.
nombre:=unNombre.
apellido:=unApellido.
credito:=0.! !
!Cliente methodsFor!
modiApellido:unApe
"Modifica el dni de persona"
apellido:=unApe.! !
!Cliente methodsFor!
modiCredito:unCred
"Modifica el dni de persona"
credito :=unCred.! !
!Cliente methodsFor!
modiDni:unDni
"Modifica el dni de persona"
dni:=unDni.! !
!Cliente methodsFor!
modiNombre:unNom
"Modifica el dni de persona"
nombre:=unNom.
! !
!Cliente methodsFor!
verApellido
"Retorna el apellido"
^apellido.! !
!Cliente methodsFor!
verCredito
"Retorna el nombre"
^credito.! !
!Cliente methodsFor!
verDni
"Retorna el apellido"
^dni.
! !
!Cliente methodsFor!
verNombre
"Retorna el nombre"
^nombre.! !
!Cliente categoriesFor: #iniPersonaCliente:nom:ape:!public! !

!Cliente categoriesFor: #modiApellido:!public! !

!Cliente categoriesFor: #modiCredito:!public! !

!Cliente categoriesFor: #modiDni:!public! !

!Cliente categoriesFor: #modiNombre:!public! !

!Cliente categoriesFor: #verApellido!public! !

!Cliente categoriesFor: #verCredito!public! !

!Cliente categoriesFor: #verDni!public! !

!Cliente categoriesFor: #verNombre!public! !

!Cliente class methodsFor!
crearPersonaCliente:unDni nom:unNombre ape:unApellido 
"Retorna una instancia de Libro inicializada"
^(self new) iniPersonaCliente:unDni nom:unNombre ape:unApellido.! !
!Cliente class categoriesFor: #crearPersonaCliente:nom:ape:!public! !

!

Cliente class removeSelector: #crearPersonaCliente:nom:ape: ifAbsent: []!

Cliente removeSelector: #iniPersonaCliente:nom:ape: ifAbsent: []!

Persona subclass: #Cliente
	instanceVariableNames: 'credito idcliente'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Cliente methodsFor!
verIDcliente
^idcliente.! !
!Cliente categoriesFor: #verIDcliente!public! !

!Cliente methodsFor!
iniPersonaCliente:unDni nom:unNombre ape:unApellido
"Inicializa una instancia de Persona"
super iniPersona: unDni nom: unNombre ape: unApellido.
credito:=0.! !
!Cliente categoriesFor: #iniPersonaCliente:nom:ape:!public! !

!Cliente methodsFor!
iniPersonaCliente:unDni nom:unNombre ape:unApellido id:unidcliente
"Inicializa una instancia de Persona"
super iniPersona: unDni nom: unNombre ape: unApellido.
credito:=0.
idcliente:= unidcliente.! !
!Cliente categoriesFor: #iniPersonaCliente:nom:ape:id:!public! !

Cliente removeSelector: #iniPersonaCliente:nom:ape: ifAbsent: []!

!Empleado methodsFor!
iniPersonaEmpleado:unDni nom:unNombre ape:unApellido pues:unPuesto sal:unSalario
"Inicializa una instancia de Persona"
super iniPersona: unDni nom: unNombre ape: unApellido.
puesto:=unPuesto.
salario:=unSalario.
! !
!Empleado categoriesFor: #iniPersonaEmpleado:nom:ape:pues:sal:!public! !

"15:16:32, 04 July 2021: Image saved"!

!CarritodeCompras methodsFor!
listarCarrito
! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos'.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo'.
s agregarCliente: c.!

"15:32:24, 04 July 2021: Image saved"!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s LLamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.
menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s LLamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductos.
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductos.
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s LLamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.!

!Supermercado methodsFor!
LLamarMenuPrincipal! !
!Supermercado categoriesFor: #LLamarMenuPrincipal!public! !

!Supermercado methodsFor!
llamarMenuPrincipal! !
!Supermercado categoriesFor: #llamarMenuPrincipal!public! !

Supermercado removeSelector: #LLamarMenuPrincipal ifAbsent: []!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s LLamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.
menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s LLamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductos.
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductos.
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

s listarProductos.!

!Supermercado methodsFor!
listarProductos
	| a identificador nom precio stock |
	1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]]! !
!Supermercado categoriesFor: #listarProductos!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

s listarProductos.!

!Supermercado methodsFor!
listarProductos2
|client cont|
1 to: clientes size
        do: 
            [:contador | client := (clientes at: contador).
cont:=contador printString.
    Transcript show: cont,' ',client verNombre,' ',client verApellido ;cr ]! !
!Supermercado categoriesFor: #listarProductos2!public! !

!Supermercado methodsFor!
listarProductos2
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[

    Transcript show: cont,' ',product verIdentificadorProducto ,' ',product verNombre ;cr ].
].



	1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]]! !
!Supermercado categoriesFor: #listarProductos2!public! !

!Supermercado methodsFor!
listarProductos2
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[

    Transcript show: cont,' ',product verIdentificadorProducto ,' ',product verNombre ;cr ].
].



	1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]]! !
!Supermercado categoriesFor: #listarProductos2!public! !

!Producto methodsFor!
verNombreProducto
^nombre.! !
!Producto categoriesFor: #verNombreProducto!public! !

Producto removeSelector: #verNombre ifAbsent: []!

!Supermercado methodsFor!
listarProductos2
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[

    Transcript show: cont,' ',product verIdentificadorProducto ,' ',product verNombreProducto ;cr ].
].



	1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]]! !
!Supermercado categoriesFor: #listarProductos2!public! !

!Supermercado methodsFor!
listarProductos2
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[

    Transcript show: cont,' identificador:  ',product verIdentificadorProducto ,' ',product verNombreProducto, product verPrecio, product verStock ;cr ].
].



	1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]]! !
!Supermercado categoriesFor: #listarProductos2!public! !

!Supermercado methodsFor!
listarProductos2
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[

    Transcript show: cont,' identificador:  ',product verIdentificadorProducto ,' ',product verNombreProducto, product verPrecio, product verStock ;cr ].
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductos2!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

s listarProductos.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p verIdentificadorProducto.!

!Supermercado methodsFor!
listarProductos2
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[
identificador:=product verIdentificadorProducto printString.
    Transcript show: cont,' identificador:  ',identificador ,' ',product verNombreProducto, product verPrecio, product verStock ;cr ].
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductos2!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

s listarProductos.!

!Supermercado methodsFor!
listarProductos2
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[
identificador:=product verIdentificadorProducto printString.
    Transcript show: cont,' identificador:  ',identificador  ;cr ].
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductos2!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

s listarProductos.!

!Supermercado methodsFor!
listarProductos2
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[
identificador:=product verIdentificadorProducto printString.
    Transcript show: cont,' identificador:  ';cr ].
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductos2!public! !

!Supermercado methodsFor!
listarProductos2
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[
identificador:=product verIdentificadorProducto printString.
    Transcript show: cont,' identificador:  ';cr ].
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductos2!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

s listarProductos.!

!Supermercado methodsFor!
listarProductosDisponible
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[
identificador:=product verIdentificadorProducto printString.
    Transcript show: cont,' identificador:  ';cr ].
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

Supermercado removeSelector: #listarProductos2 ifAbsent: []!

!Supermercado methodsFor!
verProductos
	^productos! !
!Supermercado categoriesFor: #verProductos!public! !

Supermercado removeSelector: #verProductosDisponibles ifAbsent: []!

!Supermercado methodsFor!
listarProductosDisponible
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[
identificador:=product verIdentificadorProducto printString.
    Transcript show: cont,' identificador:  ';cr ].
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

s listarProductos.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.


s listarProductos.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.


s listarProductos.!

!Supermercado methodsFor!
listarProductosDisponible
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[

    Transcript show: cont,' identificador:  ';cr ].
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.


s listarProductos.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.


s listarProductosDisponible .!

!Supermercado methodsFor!
listarProductosDisponible
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[

    Transcript show: cont,' identificador: ', product verIdentificadorProducto ,' ',product verNombreProducto, product verPrecio, product verStock ;cr ].
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.


s listarProductosDisponible .
!

!Supermercado methodsFor!
listarProductosDisponible
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[

    Transcript show: cont,' identificador: ', product verIdentificadorProducto  ;cr ].
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.


s listarProductosDisponible .!

!Supermercado methodsFor!
listarProductosDisponible
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[

    Transcript show: cont,' identificador: ', product verIdentificadorProducto,product verNombreProducto  ;cr ].
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.


s listarProductosDisponible .
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.


s listarProductosDisponible .!

!Supermercado methodsFor!
listarProductosDisponible
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[

    Transcript show: cont,' -  identificador: ', product verIdentificadorProducto,'  ',product verNombreProducto  ;cr ].
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.


s listarProductosDisponible .!

!Supermercado methodsFor!
listarProductosDisponible
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[

    Transcript show: cont,' -  identificador: ', product verIdentificadorProducto,'  ',product verNombreProducto,' ',product verPrecio  ;cr ].
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.


s listarProductosDisponible .
!

!Supermercado methodsFor!
listarProductosDisponible
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[

    Transcript show: cont,' -  identificador: ', product verIdentificadorProducto,'  ',product verNombreProducto,' ',product verPrecio  ;cr ].
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.!

!Supermercado methodsFor!
listarProductosDisponible
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[

    Transcript show: cont,' -  identificador: ', product verIdentificadorProducto,'  ',product verNombreProducto,' ',product verPrecio ;cr ].
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .!

!Supermercado methodsFor!
listarProductosDisponible
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[

    Transcript show: cont,' -  identificador: ', product verIdentificadorProducto,'  ',product verNombreProducto,' ';cr ].
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .!

!Supermercado methodsFor!
listarProductosDisponible
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[

    Transcript show: cont,' -  identificador: ', product verIdentificadorProducto,'  ',product verNombreProducto,' ', product  verNombreProducto ;cr ].
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .
!

!Supermercado methodsFor!
listarProductosDisponible
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[
precio:= product verPrecio.

    Transcript show: cont,' -  identificador: ', product verIdentificadorProducto,'  ',product verNombreProducto,' ', product  verNombreProducto ;cr ].
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .
!

!Supermercado methodsFor!
listarProductosDisponible
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[
precio:= product verPrecio.

    Transcript show: cont,' -  identificador: ', product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ].
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .!

!Supermercado methodsFor!
listarProductosDisponible
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[
precio:= product verPrecio.

    Transcript show: cont,' -  identificador: ', product verPrecio ;cr ].
"product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ]."
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .!

!Producto methodsFor!
verPrecioProducto
^precioUnitario .! !
!Producto categoriesFor: #verPrecioProducto!public! !

!Supermercado methodsFor!
listarProductosDisponible
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[
precio:= product verPrecio.

    Transcript show: cont,' -  identificador: ', product verPrecioProducto ;cr ].
"product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ]."
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .!

!Supermercado methodsFor!
listarProductosDisponible
|product cont a identificador nom precio stock |
1 to: productos size
        do: 
            [:contador | product  := (productos at: contador).
cont:=contador printString.
(product  verStock > 0)ifTrue: 
[


    Transcript show: cont,' -  identificador: ', product verPrecioProducto ;cr ].
"product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ]."
",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."
].



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .!

!Producto methodsFor!
verPrecioProducto
	^precioUnitario! !
!Producto categoriesFor: #verPrecioProducto!public! !

!Producto methodsFor!
verPrecioProducto
	^precioUnitario! !
!Producto categoriesFor: #verPrecioProducto!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .
!

!Producto methodsFor!
verIdentificadorProducto
	^identificador! !
!Producto categoriesFor: #verIdentificadorProducto!public! !

!Supermercado methodsFor!
listarProductosDisponible
	| product cont a identificador nom precio stock |
	1 to: productos size
		do: 
			[:contador |
			product := productos at: contador.
			cont := contador printString.
			product verStock > 0
				ifTrue: 
					[Transcript
						show: cont , ' -  identificador: ' , product verPrecioProducto;
						cr]
			"product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ]."
			",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."]



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecio.

s listarProductosDisponible .!

!Producto methodsFor!
verPrecioProducto
[Transcript show: precioUnitario ;cr]
	" ^precioUnitario"! !
!Producto categoriesFor: #verPrecioProducto!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecioProducto .
!

!Producto methodsFor!
verPrecioProducto
[Transcript show: precioUnitario ;cr]
	" ^precioUnitario"! !
!Producto categoriesFor: #verPrecioProducto!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecioProducto .
!

!Producto methodsFor!
verPrecioProducto
[Transcript show: precioUnitario ;cr]
	" ^precioUnitario"! !
!Producto categoriesFor: #verPrecioProducto!public! !

!Producto methodsFor!
verPrecioProducto
[Transcript show: precioUnitario ;cr]
	" ^precioUnitario"! !
!Producto categoriesFor: #verPrecioProducto!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verPrecioProducto!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verNombre.
p verPrecioProducto.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verNombre.
p verPrecioProducto.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
"p verNombre."
p verPrecioProducto.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
"p verNombre."
p verPrecioProducto.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verNombre.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verNombreProducto.
p verPrecioProducto.!

!Producto methodsFor!
verPrecioProducto
[Transcript show: 'hola',precioUnitario ;cr]
	" ^precioUnitario"! !
!Producto categoriesFor: #verPrecioProducto!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verNombreProducto.
p verPrecioProducto.
!

!Producto methodsFor!
verPrecioProducto
[Transcript show: 'hola',precioUnitario ;cr]
	" ^precioUnitario"! !
!Producto categoriesFor: #verPrecioProducto!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verNombreProducto.
p verPrecioProducto.

!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
"p verNombreProducto."
p verPrecioProducto.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p verNombreProducto.
p verPrecioProducto.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
p verPrecioProducto.!

Producto removeSelector: #verPrecioProducto ifAbsent: []!

!Supermercado methodsFor!
listarProductosDisponible
	| product cont a identificador nom precio stock |
	1 to: productos size
		do: 
			[:contador |
			product := productos at: contador.
			cont := contador printString.
			product verStock > 0
				ifTrue: 
					[Transcript

						show: cont , ' -  identificador: ' , product verPrecioProducto;
						cr]
			"product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ]."
			",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."]



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

!Supermercado methodsFor!
listarProductosDisponible
	| product cont a identificador nom precio stock |
	1 to: productos size
		do: 
			[:contador |
			product := productos at: contador.
			cont := contador printString.
			product verStock > 0
				ifTrue: 
					[
precio:= product verPrecio printString.

Transcript

						show: cont , ' -  identificador: ' , precio ;
						cr]
			"product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ]."
			",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."]



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
s listarProductosDisponible .!

!Supermercado methodsFor!
listarProductosDisponible
	| product cont a identificador nom precio stock |
	1 to: productos size
		do: 
			[:contador |
			product := productos at: contador.
			cont := contador printString.
			product verStock > 0
				ifTrue: 
					[
precio:= product verPrecio printString.
stock := product verStock printString.

Transcript

						show: cont , ' -  identificador: ' , precio ;
						cr]
			"product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ]."
			",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."]



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
s listarProductosDisponible .!

!Supermercado methodsFor!
listarProductosDisponible
	| product cont a identificador nom precio stock |
	1 to: productos size
		do: 
			[:contador |
			product := productos at: contador.
			cont := contador printString.
			product verStock > 0
				ifTrue: 
					[
precio:= product verPrecio printString.
stock := product verStock printString.

Transcript

						show: cont , ' -  identificador: ' , precio,stock ;
						cr]
			"product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ]."
			",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."]



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
s listarProductosDisponible .!

!Supermercado methodsFor!
listarProductosDisponible
	| product cont a identificador nom precio stock |
	1 to: productos size
		do: 
			[:contador |
			product := productos at: contador.
			cont := contador printString.
			product verStock > 0
				ifTrue: 
					[
precio:= product verPrecio printString.
stock := product verStock printString.

Transcript

						show: cont , ' -  identificador: ' ,product verIdentificadorProducto, precio,stock ;
						cr]
			"product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ]."
			",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."]



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
s listarProductosDisponible .!

!Supermercado methodsFor!
listarProductosDisponible
	| product cont a identificador nom precio stock |
	1 to: productos size
		do: 
			[:contador |
			product := productos at: contador.
			cont := contador printString.
			product verStock > 0
				ifTrue: 
					[
precio:= product verPrecio printString.
stock := product verStock printString.

Transcript

						show: cont , ' -  identificador: ' ,product verIdentificadorProducto,,'  ',product verNombreProducto, precio,stock ;
						cr]
			"product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ]."
			",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."]



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
s listarProductosDisponible .
!

!Supermercado methodsFor!
listarProductosDisponible
	| product cont a identificador nom precio stock |
	1 to: productos size
		do: 
			[:contador |
			product := productos at: contador.
			cont := contador printString.
			product verStock > 0
				ifTrue: 
					[
precio:= product verPrecio printString.
stock := product verStock printString.

Transcript

						show: cont , ' -  identificador: ' ,product verIdentificadorProducto,'  ',product verNombreProducto, precio,stock ;
						cr]
			"product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ]."
			",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."]



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
s listarProductosDisponible .!

!Supermercado methodsFor!
listarProductosDisponible
	| product cont a identificador nom precio stock |
	1 to: productos size
		do: 
			[:contador |
			product := productos at: contador.
			cont := contador printString.
			product verStock > 0
				ifTrue: 
					[
precio:= product verPrecio printString.
stock := product verStock printString.

Transcript

						show: cont , ' -  identificador: ' ,product verIdentificadorProducto,'  ',product verNombreProducto,'precio', precio,stock ;
						cr]
			"product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ]."
			",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."]



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
s listarProductosDisponible .
!

!Supermercado methodsFor!
listarProductosDisponible
	| product cont a identificador nom precio stock |
	1 to: productos size
		do: 
			[:contador |
			product := productos at: contador.
			cont := contador printString.
			product verStock > 0
				ifTrue: 
					[
precio:= product verPrecio printString.
stock := product verStock printString.

Transcript

						show: cont , ' -  identificador: ' ,product verIdentificadorProducto,'  ',product verNombreProducto,' precio: ', precio,'stock',stock;
						cr]
			"product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ]."
			",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."]



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
s listarProductosDisponible .
!

!Supermercado methodsFor!
listarProductosDisponible
	| product cont a identificador nom precio stock |
	1 to: productos size
		do: 
			[:contador |
			product := productos at: contador.
			cont := contador printString.
			product verStock > 0
				ifTrue: 
					[
precio:= product verPrecio printString.
stock := product verStock printString.

Transcript

						show: cont , ' -  identificador: ' ,product verIdentificadorProducto,'  ',product verNombreProducto,' precio: ', precio,' stock',stock;
						cr]
			"product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ]."
			",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."]



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
s listarProductosDisponible .!

!Supermercado methodsFor!
listarProductosDisponible
	| product cont a identificador nom precio stock |
	1 to: productos size
		do: 
			[:contador |
			product := productos at: contador.
			cont := contador printString.
			product verStock > 0
				ifTrue: 
					[
precio:= product verPrecio printString.
stock := product verStock printString.

Transcript

						show: cont , ' -  identificador: ' ,product verIdentificadorProducto,'  ',product verNombreProducto,' precio: ', precio,' stock: ',stock;
						cr]
			"product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ]."
			",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."]



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
s listarProductosDisponible .!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
s listarProductosDisponible .!

"17:13:18, 04 July 2021: Image saved"!

"17:13:19, 04 July 2021: Image saved"!

"17:13:21, 04 July 2021: Image saved"!

"17:13:25, 04 July 2021: Image saved"!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.


s listarProductosDisponible .!

!Supermercado methodsFor!
listarProductosDisponible
	| product cont a identificador nom precio stock |
	1 to: productos size
		do: 
			[:contador |
			product := productos at: contador.
			cont := contador printString.
			product verStock > 0
				ifTrue: 
					[
precio:= product verPrecio printString.
stock := product verStock printString.

Transcript

						show: cont , ' -  identificador: ' ,product verIdentificadorProducto,'  ',product verNombreProducto,' precio: ', precio,' stock: ',stock;
						cr]
			"product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ]."
			",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."]



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

"17:16:07, 04 July 2021: Image saved"!

"17:16:56, 04 July 2021: Image saved"!

"17:16:59, 04 July 2021: Image saved"!

"17:17:30, 04 July 2021: Image saved"!

"17:17:30, 04 July 2021: Image saved"!

|supermercado1 a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
supermercado1:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
supermercado1 agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
supermercado1 agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
supermercado1 agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
supermercado1 agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
supermercado1 agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
supermercado1 agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
supermercado1 agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
supermercado1 agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
supermercado1 verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.!

"17:21:05, 04 July 2021: Image saved"!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s LLamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.
menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s LLamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductos.
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductos.
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s LLamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.
menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s LLamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible.
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductos.
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.


s listarProductosDisponible .!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.


s listarProductosDisponible .!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s LLamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .!

!CarritodeCompras class methodsFor!
crearCarrito:idcliente
^(self new) iniCarrito: idcliente.! !
!CarritodeCompras class categoriesFor: #crearCarrito:!public! !

!CarritodeCompras class methodsFor!
crearCarrito:idcliente
^(self new) iniCarrito: idcliente.! !
!CarritodeCompras class categoriesFor: #crearCarrito:!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .!

"17:27:41, 04 July 2021: Image saved"!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s LLamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductos.
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s LLamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductos.
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductos.
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductos.
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductos.
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero'.
].!

!CarritodeCompras methodsFor!
verCarrito
^listadeProducto.! !
!CarritodeCompras categoriesFor: #verCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductos.
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductos.
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero'.
].!

"17:36:53, 04 July 2021: Image saved"!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero'.
].!

"17:39:29, 04 July 2021: Image saved"!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero o 0 para salir'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].!

!CarritodeCompras class methodsFor!
crearCarritoDLCS:supermercado cliente: idcliente
^(self new) iniCarrito: supermercado cliente: idcliente.! !
!CarritodeCompras class categoriesFor: #crearCarritoDLCS:cliente:!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].!

CarritodeCompras class removeSelector: #crearCarrito:cliente: ifAbsent: []!

!CarritodeCompras methodsFor!
CargarProductoAcarrito2:unProducto unidad:unidada
listadeProducto add:unProducto.! !
!CarritodeCompras categoriesFor: #CargarProductoAcarrito2:unidad:!public! !

!Supermercado methodsFor!
verClientes
|client cont|
1 to: clientes size
        do: 
            [:contador | client := (clientes at: contador).
cont:=contador printString.
    Transcript show: cont,' ',client verNombre,' ',client verApellido ;cr ]! !
!Supermercado categoriesFor: #verClientes!public! !

!CarritodeCompras methodsFor!
ListarProductosCarrito
|unprod cant|
1 to: listadeProducto size
        do: 
            [:contador | unprod := (listadeProducto at: contador).
"cont:=contador printString."
cant:= listadeProducto occurrencesOf: unprod.
    Transcript show: 'identificador de producto:  ',unprod,' cantidad comparda: ',cant ;cr ]! !
!CarritodeCompras categoriesFor: #ListarProductosCarrito!public! !

!CarritodeCompras methodsFor!
listarProductosCarrito
|unprod cant|
1 to: listadeProducto size
        do: 
            [:contador | unprod := (listadeProducto at: contador).
"cont:=contador printString."
cant:= listadeProducto occurrencesOf: unprod.
    Transcript show: 'identificador de producto:  ',unprod,' cantidad comparda: ',cant ;cr ]! !
!CarritodeCompras categoriesFor: #listarProductosCarrito!public! !

CarritodeCompras removeSelector: #ListarProductosCarrito ifAbsent: []!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
carrito CargarProductoAcarrito: '1'.
carrito CargarProductoAcarrito: '1'.
carrito listarCarrito.!

CarritodeCompras removeSelector: #listarCarrito ifAbsent: []!

!CarritodeCompras methodsFor!
listarCarrito
|unprod cant|
1 to: listadeProducto size
        do: 
            [:contador | unprod := (listadeProducto at: contador).
"cont:=contador printString."
cant:= listadeProducto occurrencesOf: unprod.
    Transcript show: 'identificador de producto:  ',unprod,' cantidad comparda: ',cant ;cr ]! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

CarritodeCompras removeSelector: #listarProductosCarrito ifAbsent: []!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
carrito CargarProductoAcarrito: '1'.
carrito CargarProductoAcarrito: '1'.
carrito listarCarrito.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
carrito CargarProductoAcarrito: '1'.
carrito CargarProductoAcarrito: '1'.
carrito listarCarrito!

!CarritodeCompras methodsFor!
listarCarrito
|unprod cant|
^ listadeProducto size.
"1 to: listadeProducto size
        do: 
            [:contador | unprod := (listadeProducto at: contador). "
"cont:=contador printString."
"
cant:= listadeProducto occurrencesOf: unprod.
    Transcript show: 'identificador de producto:  ',unprod,' cantidad comparda: ',cant ;cr ]"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
carrito CargarProductoAcarrito: '1'.
carrito CargarProductoAcarrito: '1'.
carrito listarCarrito!

!CarritodeCompras methodsFor!
listarCarrito
|unprod cant|

listadeProducto

"listadeProducto do : [:contador | unprod := (listadeProducto at: contador). 
cont:=contador printString.

cant:= listadeProducto occurrencesOf: unprod.
    Transcript show: 'identificador de producto:  ',unprod,' cantidad comparda: ',cant ;cr ]"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

!CarritodeCompras methodsFor!
listarCarrito
|unprod cant|
listadeProducto do: [:element | 
cant:= (listadeProducto occurrencesOf: element ) printString .


]

"listadeProducto do : [:contador | unprod := (listadeProducto at: contador). 
cont:=contador printString.

cant:= listadeProducto occurrencesOf: unprod.
    Transcript show: 'identificador de producto:  ',unprod,' cantidad comparda: ',cant ;cr ]"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

!CarritodeCompras methodsFor!
listarCarrito
|unprod cant|
listadeProducto do: [:element | 
cant:= (listadeProducto occurrencesOf: element ) printString .


]

"listadeProducto do : [:contador | unprod := (listadeProducto at: contador). 
cont:=contador printString.

cant:= listadeProducto occurrencesOf: unprod.
    Transcript show: 'identificador de producto:  ',unprod,' cantidad comparda: ',cant ;cr ]"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
carrito CargarProductoAcarrito: '1'.
carrito CargarProductoAcarrito: '1'.
carrito listarCarrito!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
carrito CargarProductoAcarrito: '1'.
carrito CargarProductoAcarrito: '1'.
carrito listarCarrito!

!CarritodeCompras methodsFor!
listarCarrito
|unprod cant|
listadeProducto do: [:element | 
cant:= (listadeProducto occurrencesOf: element ) printString .
^cant.

]

"listadeProducto do : [:contador | unprod := (listadeProducto at: contador). 
cont:=contador printString.

cant:= listadeProducto occurrencesOf: unprod.
    Transcript show: 'identificador de producto:  ',unprod,' cantidad comparda: ',cant ;cr ]"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
carrito CargarProductoAcarrito: '1'.
carrito CargarProductoAcarrito: '1'.
carrito listarCarrito!

!CarritodeCompras methodsFor!
listarCarrito
|unprod cant|
listadeProducto do: [:element | 
cant:= (listadeProducto occurrencesOf: element ) printString .
^cant.
Transcript
show: 'identificador',cant.
]

"listadeProducto do : [:contador | unprod := (listadeProducto at: contador). 
cont:=contador printString.

cant:= listadeProducto occurrencesOf: unprod.
    Transcript show: 'identificador de producto:  ',unprod,' cantidad comparda: ',cant ;cr ]"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
carrito CargarProductoAcarrito: '1'.
carrito CargarProductoAcarrito: '1'.
carrito listarCarrito!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
carrito CargarProductoAcarrito: '1'.
carrito CargarProductoAcarrito: '1'.
carrito listarCarrito!

!CarritodeCompras methodsFor!
listarCarrito
|unprod cant|
listadeProducto do: [:element | 
cant:= (listadeProducto occurrencesOf: element ) printString .

Transcript
show: 'identificador',cant.
]

"listadeProducto do : [:contador | unprod := (listadeProducto at: contador). 
cont:=contador printString.

cant:= listadeProducto occurrencesOf: unprod.
    Transcript show: 'identificador de producto:  ',unprod,' cantidad comparda: ',cant ;cr ]"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
carrito CargarProductoAcarrito: '1'.
carrito CargarProductoAcarrito: '1'.
carrito listarCarrito!

!CarritodeCompras methodsFor!
listarCarrito
|unprod cant|
listadeProducto do: [:element | 
cant:= (listadeProducto occurrencesOf: element ) printString .

Transcript
show: 'identificador',cant ;cr
]

"listadeProducto do : [:contador | unprod := (listadeProducto at: contador). 
cont:=contador printString.

cant:= listadeProducto occurrencesOf: unprod.
    Transcript show: 'identificador de producto:  ',unprod,' cantidad comparda: ',cant ;cr ]"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
carrito CargarProductoAcarrito: '1'.
carrito CargarProductoAcarrito: '1'.
carrito listarCarrito!

!CarritodeCompras methodsFor!
listarCarrito
|unprod cant|
listadeProducto do: [:element | 
cant:= (listadeProducto occurrencesOf: element ) printString .

Transcript
show: 'identificador :',element ,cant ;cr
]

"listadeProducto do : [:contador | unprod := (listadeProducto at: contador). 
cont:=contador printString.

cant:= listadeProducto occurrencesOf: unprod.
    Transcript show: 'identificador de producto:  ',unprod,' cantidad comparda: ',cant ;cr ]"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
carrito CargarProductoAcarrito: '1'.
carrito CargarProductoAcarrito: '1'.
carrito listarCarrito!

!CarritodeCompras methodsFor!
listarCarrito
|unprod cant|
listadeProducto do: [:element | 
cant:= (listadeProducto occurrencesOf: element ) printString .

Transcript
show: 'identificador :',element ,' cantidad: ',cant ;cr
]

"listadeProducto do : [:contador | unprod := (listadeProducto at: contador). 
cont:=contador printString.

cant:= listadeProducto occurrencesOf: unprod.
    Transcript show: 'identificador de producto:  ',unprod,' cantidad comparda: ',cant ;cr ]"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
carrito CargarProductoAcarrito: '1'.
carrito CargarProductoAcarrito: '1'.
carrito listarCarrito!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
carrito CargarProductoAcarrito: '1'.
carrito CargarProductoAcarrito: '1'.
carrito listarCarrito!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
carrito CargarProductoAcarrito: '1'.
carrito CargarProductoAcarrito: '1'.
carrito listarCarrito!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
carrito CargarProductoAcarrito: '1'.
carrito CargarProductoAcarrito: '1'.
carrito listarCarrito!

"19:38:38, 04 July 2021: Image saved"!

!CarritodeCompras methodsFor!
listarCarrito
|unprod cant|
listadeProducto do: [:element | 
cant:= (listadeProducto occurrencesOf: element ) printString .

Transcript
show: 'identificador del producto:',element ,' cantidad: ',cant ;cr
]

"listadeProducto do : [:contador | unprod := (listadeProducto at: contador). 
cont:=contador printString.

cant:= listadeProducto occurrencesOf: unprod.
    Transcript show: 'identificador de producto:  ',unprod,' cantidad comparda: ',cant ;cr ]"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
carrito CargarProductoAcarrito: '1'.
carrito CargarProductoAcarrito: '1'.
carrito listarCarrito!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

dct do: [:elem | 
Transcript
show: elem
]!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

dct do: [:elem | 
Transcript
show: elem;cr
]!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura|
s:= Supermercado crearSuperNom:'sunshine'.


fechaDeHoy := Date today
!

!Factura methodsFor!
iniFacturanumfactura:unnumfac fecha:unafecha  importetotal:unimportetotal
numerofactura:=unnumfac.
fecha:=unafecha.
importetotal:=importetotal.! !
!Factura categoriesFor: #iniFacturanumfactura:fecha:importetotal:!public! !

!Factura class methodsFor!
CrearFacturanumfactura:unnumfac fecha:unafecha  importetotal:unimportetotal
^(self  new )iniFacturanumfactura: unnumfac fecha: unafecha importetotal: unimportetotal.! !
!Factura class categoriesFor: #CrearFacturanumfactura:fecha:importetotal:!public! !

!Factura methodsFor!
iniFacturanumfactura:unnumfac fecha:unafecha  importetotal:unimportetotal
numerofactura:=unnumfac.
fecha := Date today.
importetotal:=importetotal.! !
!Factura categoriesFor: #iniFacturanumfactura:fecha:importetotal:!public! !

!Factura methodsFor!
iniFacturanumfactura:unnumfac  importetotal:unimportetotal
numerofactura:=unnumfac.
fecha := Date today.
importetotal:=importetotal.! !
!Factura categoriesFor: #iniFacturanumfactura:importetotal:!public! !

Factura removeSelector: #iniFacturanumfactura:fecha:importetotal: ifAbsent: []!

!Factura class methodsFor!
CrearFacturanumfactura:unnumfac importetotal:unimportetotal
^(self  new )iniFacturanumfactura: unnumfac importetotal: unimportetotal.! !
!Factura class categoriesFor: #CrearFacturanumfactura:importetotal:!public! !

Factura class removeSelector: #CrearFacturanumfactura:fecha:importetotal: ifAbsent: []!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'
carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'
carrito CargarProductoAcarrito: productoelegido.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'
carrito CargarProductoAcarrito: productoelegido.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'
carrito CargarProductoAcarrito: productoelegido.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.
carrito CargarProductoAcarrito: productoelegido.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.
carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.
carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.
carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.
carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.
carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.
precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.
carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

dct do: [:elem | 
Transcript
show: elem;cr
]!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.
carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.

"--------Pagar Productos -----------"
contFactura:=1.
factura:= Factura CrearFacturanumfactura: contFactura importetotal: precioPagar.!

CarritodeCompras removeSelector: #agregarProductoCarrito:unidad: ifAbsent: []!

!CarritodeCompras methodsFor!
listarCarrito
|unprod cant|
listadeProducto do: [:element | 
cant:= (listadeProducto occurrencesOf: element ) printString .

Transcript
show: 'identificador del producto:',element ,' cantidad: ',cant ;cr
]

"listadeProducto do : [:contador | unprod := (listadeProducto at: contador). 
cont:=contador printString.

cant:= listadeProducto occurrencesOf: unprod.
    Transcript show: 'identificador de producto:  ',unprod,' cantidad comparda: ',cant ;cr ]"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

!Persona methodsFor!
modiDni: unDni
	"Modifica el dni de persona"

	dni := unDni! !
!Persona categoriesFor: #modiDni:!public! !

!Persona methodsFor!
verDni
"Retorna el apellido"
^dni.! !
!Persona categoriesFor: #verDni!public! !

!Persona methodsFor!
verDni
	"Retorna el apellido"

	^dni! !
!Persona categoriesFor: #verDni!public! !

"21:17:22, 04 July 2021: Image saved"!

"21:21:11, 04 July 2021: Image saved"!

"21:21:53, 04 July 2021: Image saved"!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.
carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.

"--------Pagar Productos -----------"
contFactura:=1.
factura:= Factura CrearFacturanumfactura: contFactura importetotal: precioPagar.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.
carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.!

"21:29:06, 04 July 2021: Image saved"!

"21:29:08, 04 July 2021: Image saved"!

"21:29:09, 04 July 2021: Image saved"!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.
carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.

"--------Pagar Productos -----------"
contFactura:=1.
factura:= Factura CrearFacturanumfactura: contFactura importetotal: precioPagar.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.
carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.

"--------Pagar Productos -----------"
contFactura:=1.
factura:= Factura CrearFacturanumfactura: contFactura importetotal: precioPagar.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.
carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.
carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.

"--------Pagar Productos -----------"
contFactura:=1.
factura:= Factura CrearFacturanumfactura: contFactura importetotal: precioPagar.!

!Factura methodsFor!
iniFacturanumfactura:unnumfac  importetotal:unimportetotal
numerofactura:=unnumfac.
fecha := Date today.
importetotal:=unimportetotal.! !
!Factura categoriesFor: #iniFacturanumfactura:importetotal:!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.
carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.

"--------Pagar Productos -----------"
contFactura:=1.
factura:= Factura CrearFacturanumfactura: contFactura importetotal: precioPagar.!

!Supermercado methodsFor!
llamarMenuPrincipal
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.! !
!Supermercado categoriesFor: #llamarMenuPrincipal!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
s llamarMenuPrincipal.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
s llamarMenuPrincipal.!

!Supermercado methodsFor!
buscarProductosPorPrecio:unprecio
| listaproductosS  product|
listaproductosS:=productos select: [:prod | prod verPrecio =unprecio ].
! !
!Supermercado categoriesFor: #buscarProductosPorPrecio:!public! !

!

!Supermercado methodsFor!
listarProductosDisponible
	| product cont a identificador nom precio stock |
	1 to: productos size
		do: 
			[:contador |
			product := productos at: contador.
			cont := contador printString.
			product verStock > 0
				ifTrue: 
					[
precio:= product verPrecio printString.
stock := product verStock printString.

Transcript

						show: cont , ' -  identificador: ' ,product verIdentificadorProducto,'  ',product verNombreProducto,' precio: ', precio,' stock: ',stock;
						cr]
]
			"product verIdentificadorProducto,'  ',product verNombreProducto,' ', precio ;cr ]."
			",' ',product verNombreProducto, product verPrecio, product verStock ;cr ]."



	"1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]] "! !
!Supermercado categoriesFor: #listarProductosDisponible!public! !

!Supermercado methodsFor!
buscarProductosPorPrecio:unprecio
| listaproductosS  product cont a identificador nom precio stock |
listaproductosS:=productos select: [:prod | prod verPrecio =unprecio ].

	1 to: productos size
		do: 
			[:contador |
			product := productos at: contador.
			cont := contador printString.
			product verStock > 0
				ifTrue: 
					[
precio:= product verPrecio printString.
stock := product verStock printString.

Transcript

						show: cont , ' -  identificador: ' ,product verIdentificadorProducto,'  ',product verNombreProducto,' precio: ', precio,' stock: ',stock;
						cr]
]! !
!Supermercado categoriesFor: #buscarProductosPorPrecio:!public! !

!Supermercado methodsFor!
buscarProductosPorPrecio:unprecio
| listaproductosS  unprod pre|
listaproductosS:=productos select: [:prod | prod verPrecio =unprecio ].

listaproductosS  do: [:element | 
pre := element verPrecio printString .

Transcript
show: 'identificador del producto:',element verIdentificadorProducto ,' Precio: ',pre ;cr
]! !
!Supermercado categoriesFor: #buscarProductosPorPrecio:!public! !

!CarritodeCompras methodsFor!
iniCarrito:idPersona
precioTotal := 0.
idpersona :=idPersona.
"listadeProducto := OrderedCollection new."
listadeProducto :=Dictionary new. ! !
!CarritodeCompras categoriesFor: #iniCarrito:!public! !

!CarritodeCompras methodsFor!
iniCarrito:idPersona
precioTotal := 0.
idpersona :=idPersona.
"listadeProducto := OrderedCollection new."
listadeProducto :=Dictionary new.! !
!CarritodeCompras categoriesFor: #iniCarrito:!public! !

"19:37:19, 08 July 2021: Dolphin Smalltalk Professional started"!

!Supermercado methodsFor!
llamarMenuPrincipal
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar'.! !
!Supermercado categoriesFor: #llamarMenuPrincipal!public! !

"19:38:13, 08 July 2021: Image saved"!

"19:38:52, 08 July 2021: Image saved"!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.
carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.

"--------Pagar Productos -----------"
contFactura:=1.
factura:= Factura CrearFacturanumfactura: contFactura importetotal: precioPagar.!

!Supermercado methodsFor!
ProcesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1.
carrito listarCarrito.! !
!Supermercado categoriesFor: #ProcesoCargarCarrito:productoelegido:!public! !

!Supermercado methodsFor!
procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1.
carrito listarCarrito.! !
!Supermercado categoriesFor: #procesoCargarCarrito:productoelegido:!public! !

Supermercado removeSelector: #ProcesoCargarCarrito:productoelegido: ifAbsent: []!

Object subclass: #Supermercado
	instanceVariableNames: 'nombre clientes empleados productos carritos'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Supermercado methodsFor!
iniSuperNom:unNom
"Inicializa una instancia de Supermercado"
nombre:=unNom.
clientes:= OrderedCollection new.
empleados:= OrderedCollection new.
productos:= OrderedCollection new.
carritos := OrderedCollection new.! !
!Supermercado categoriesFor: #iniSuperNom:!public! !

!Supermercado methodsFor!
agregarCarrito:unCarrito
"Agrega un empleado"
carritos add:unCarrito.! !
!Supermercado categoriesFor: #agregarCarrito:!public! !

Supermercado removeSelector: #agregarFactura: ifAbsent: []!

"20:07:42, 08 July 2021: Image saved"!

"20:07:48, 08 July 2021: Image saved"!

!CarritodeCompras methodsFor!
iniCarrito:supermercado cliente:idcliente
precioTotal := 0.
"listadeProducto := OrderedCollection new."
listadeProducto :=Dictionary new. 
datosdeSupermercado:=supermercado.! !
!CarritodeCompras categoriesFor: #iniCarrito:cliente:!public! !

!CarritodeCompras methodsFor!
iniCarrito:idPersona
precioTotal := 0.
idpersona :=idPersona.
"listadeProducto := OrderedCollection new."
listadeProducto :=Dictionary new. ! !
!CarritodeCompras categoriesFor: #iniCarrito:!public! !

Object subclass: #CarritodeCompras
	instanceVariableNames: 'listadeProducto precioTotal idpersona'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

CarritodeCompras removeSelector: #iniCarrito:cliente: ifAbsent: []!

!CarritodeCompras methodsFor!
agregarProductoCarritoDLCS: idproducto unidad: unidad
	"listadeProducto  add:unproducto."

	| stock esta nuevacantidad nombre unproducto  datosdeSupermercado |
datosdeSupermercado:= Supermercado crearSuperNom:'sunshine'.
	"Se busca que el producto exista en el supermercado"
	unproducto := datosdeSupermercado buscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			stock := unproducto verStock.
			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			"ve que la unida no sea superior a el stock"
			(stock >= unidad)
				ifTrue: 
					[unproducto descontarStock: unidad.
					precioTotal := precioTotal + (unproducto verPrecio * unidad).
					(esta)
						ifTrue: 
							[nuevacantidad := (listadeProducto at: nombre) + unproducto verStock.
							" actualiza la nueva cantidad que tiene del producto"
							listadeProducto at: nombre put: nuevacantidad]
						ifFalse: [listadeProducto at: nombre put: unidad]
					"si no esta agrega el producto y la cantidad de unidades"]
				ifFalse: [Transcript show: 'No hay Stock Disponible']
			"Se finaliza la función si encuenta al producto en supermercado"]! !
!CarritodeCompras categoriesFor: #agregarProductoCarritoDLCS:unidad:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto datosdeSupermercado |
datosdeSupermercado:= Supermercado crearSuperNom:'sunshine'.

	"Se busca que el producto exista en el supermercado"
	unproducto := datosdeSupermercado buscarElProductoEnSupermercado: idproducto.
	(unproducto ~= nil)
		ifTrue: 
			[nombre := unproducto verNombre.
			cantidad := listadeProducto at: nombre.
			"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			(esta)
				ifTrue: 
					[unproducto devolverproducto.
					nuevacantidad := (listadeProducto at: nombre) - 1.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: nombre put: nuevacantidad.
					precioTotal := precioTotal - unproducto verPrecio.
					cantidad < 1 ifFalse: [listadeProducto removeKey: nombre ifAbsent: ['Ya se quito el producto']]]
				ifFalse: 
					["Lo siento no Posee Producto en el carrito"
					]]! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras methodsFor!
CargarProductoAcarrito:unProducto
|esta|
listadeProducto add:unProducto.
"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: unProducto ifAbsent: [esta := false].! !
!CarritodeCompras categoriesFor: #CargarProductoAcarrito:!public! !

!CarritodeCompras methodsFor!
CargarProductoAcarrito: unProducto
	| esta |
	listadeProducto add: unProducto.
	"Averiguo si el producto esta en la lista de productos del carrito"
	esta := true.
	listadeProducto at: unProducto ifAbsent: [esta := false]! !
!CarritodeCompras categoriesFor: #CargarProductoAcarrito:!public! !

!CarritodeCompras methodsFor!
CargarProductoAcarrito: unProducto
	| esta |
	"listadeProducto add: unProducto."

	"Averiguo si el producto esta en la lista de productos del carrito"
	esta := true.
	listadeProducto at: unProducto ifAbsent: [esta := false]! !
!CarritodeCompras categoriesFor: #CargarProductoAcarrito:!public! !

!CarritodeCompras methodsFor!
CargarProductoAcarrito: unProducto
	| esta nuevacantidad|
	"listadeProducto add: unProducto."

	"Averiguo si el producto esta en la lista de productos del carrito"
	esta := true.
	listadeProducto at: unProducto ifAbsent: [esta := false]
! !
!CarritodeCompras categoriesFor: #CargarProductoAcarrito:!public! !

!CarritodeCompras methodsFor!
CargarProductoAcarrito: unProducto
	| esta nuevacantidad |
	"listadeProducto add: unProducto."

	"Averiguo si el producto esta en la lista de productos del carrito"
	esta := true.
	listadeProducto at: unProducto ifAbsent: [esta := false].
	esta
		ifTrue: 
			[nuevacantidad := (listadeProducto at: unProducto) + 1.
			" actualiza la nueva cantidad que tiene del producto"
			listadeProducto at: unProducto put: nuevacantidad]! !
!CarritodeCompras categoriesFor: #CargarProductoAcarrito:!public! !

!CarritodeCompras methodsFor!
CargarProductoAcarrito: unProducto
	| esta nuevacantidad |
	"listadeProducto add: unProducto."

	"Averiguo si el producto esta en la lista de productos del carrito"
	esta := true.
	listadeProducto at: unProducto ifAbsent: [esta := false].
	esta
		ifTrue: 
			[nuevacantidad := (listadeProducto at: unProducto) + 1.
			" actualiza la nueva cantidad que tiene del producto"
			listadeProducto at: unProducto put: nuevacantidad]! !
!CarritodeCompras categoriesFor: #CargarProductoAcarrito:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarritoDLCS: idproducto
	| esta nuevacantidad nombre cantidad unproducto datosdeSupermercado |
	datosdeSupermercado := Supermercado crearSuperNom: 'sunshine'.

	"Se busca que el producto exista en el supermercado"
	unproducto := datosdeSupermercado buscarElProductoEnSupermercado: idproducto.
	unproducto ~= nil
		ifTrue: 
			[nombre := unproducto verNombre.
			cantidad := listadeProducto at: nombre.
			"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			esta
				ifTrue: 
					[unproducto devolverproducto.
					nuevacantidad := (listadeProducto at: nombre) - 1.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: nombre put: nuevacantidad.
					precioTotal := precioTotal - unproducto verPrecio.
					cantidad < 1 ifFalse: [listadeProducto removeKey: nombre ifAbsent: ['Ya se quito el producto']]]
				ifFalse: 
					["Lo siento no Posee Producto en el carrito"
					]]! !
!CarritodeCompras categoriesFor: #quitarProductoCarritoDLCS:!public! !

CarritodeCompras removeSelector: #quitarProductoCarrito: ifAbsent: []!

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto  |
			esta := true.
			listadeProducto at: idproducto ifAbsent: [esta := false].
			! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto  |
			esta := true.
			listadeProducto at: idproducto ifAbsent: [esta := false].
			! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto  |
			esta := true.
			listadeProducto at: idproducto ifAbsent: [esta := false].
			(esta)
! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto  |
			esta := true.
			listadeProducto at: idproducto ifAbsent: [esta := false].
			(esta) ifTrue: [
]
! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto  |
			esta := true.
			listadeProducto at: idproducto ifAbsent: [esta := false].
			(esta) ifTrue: 
					[
cantidad := listadeProducto at: idproducto .
					nuevacantidad := cantidad - 1.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: idproducto put: nuevacantidad.

					(cantidad < 1) ifFalse: [listadeProducto removeKey: idproducto ifAbsent: ['Ya se quito el producto'].
]]
				! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto  |
			esta := true.
			listadeProducto at: idproducto ifAbsent: [esta := false].
			(esta) ifTrue: 
					[
cantidad := listadeProducto at: idproducto .
					nuevacantidad := cantidad - 1.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: idproducto put: nuevacantidad.

					(cantidad < 1) ifFalse: [listadeProducto removeKey: idproducto ifAbsent: ['Ya se quito el producto'].
]]
				! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto  |
			esta := true.
			listadeProducto at: idproducto ifAbsent: [esta := false].
			(esta) ifTrue: 
					[
cantidad := listadeProducto at: idproducto .
					nuevacantidad := cantidad - 1.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: idproducto put: nuevacantidad.

					(cantidad < 1) ifFalse: [listadeProducto removeKey: idproducto ifAbsent: ['Ya se quito el producto'].
]]
				! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	esta := true.
	listadeProducto at: idproducto ifAbsent: [esta := false].
	esta
		ifTrue: 
			[cantidad := listadeProducto at: idproducto.
			nuevacantidad := cantidad - 1.
			" actualiza la nueva cantidad que tiene del producto"
			listadeProducto at: idproducto put: nuevacantidad.
			cantidad < 1 ifFalse: [listadeProducto removeKey: idproducto ifAbsent: ['Ya se quito el producto']]]! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	esta := true.
	listadeProducto at: idproducto ifAbsent: [esta := false].
	esta
		ifTrue: 
			[cantidad := listadeProducto at: idproducto.
			nuevacantidad := cantidad - 1.
			" actualiza la nueva cantidad que tiene del producto"
			listadeProducto at: idproducto put: nuevacantidad.
			cantidad < 1 ifFalse: [listadeProducto removeKey: idproducto ifAbsent: ['Ya se quito el producto']]]! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	esta := true.
	listadeProducto at: idproducto ifAbsent: [esta := false].
	(esta)
		ifTrue: 
			[cantidad := listadeProducto at: idproducto.
			nuevacantidad := cantidad - 1.
			" actualiza la nueva cantidad que tiene del producto"
			listadeProducto at: idproducto put: nuevacantidad.
			cantidad < 1 ifFalse: [listadeProducto removeKey: idproducto ifAbsent: ['Ya se quito el producto']]]! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	esta := true.
	listadeProducto at: idproducto ifAbsent: [esta := false].
	(esta)
		ifTrue: 
			[cantidad := listadeProducto at: idproducto.
			nuevacantidad := cantidad - 1.
			" actualiza la nueva cantidad que tiene del producto"
			listadeProducto at: idproducto put: nuevacantidad.
			cantidad < 1 ifFalse: [listadeProducto removeKey: idproducto ifAbsent: ['Ya se quito el producto'].
]]! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	esta := true.
	listadeProducto at: idproducto ifAbsent: [esta := false].
	(esta)
		ifTrue: 
			[cantidad := listadeProducto at: idproducto.
			nuevacantidad := cantidad - 1.
			" actualiza la nueva cantidad que tiene del producto"
			listadeProducto at: idproducto put: nuevacantidad.
			cantidad < 1 ifFalse: [
listadeProducto removeKey: idproducto ifAbsent: ['Ya se quito el producto'].
	]
]! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	esta := true.
	listadeProducto at: idproducto ifAbsent: [esta := false].
	(esta)
		ifTrue: 
			[cantidad := listadeProducto at: idproducto.
			nuevacantidad := cantidad - 1.
			" actualiza la nueva cantidad que tiene del producto"
			listadeProducto at: idproducto put: nuevacantidad.
			cantidad < 1 ifFalse: [
listadeProducto removeKey: idproducto ifAbsent: ['Ya se quito el producto'].
	]
]ifFalse: [
]! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarritoDLCS: idproducto
	| esta nuevacantidad nombre cantidad unproducto datosdeSupermercado |
	datosdeSupermercado := Supermercado crearSuperNom: 'sunshine'.

	"Se busca que el producto exista en el supermercado"
	unproducto := datosdeSupermercado buscarElProductoEnSupermercado: idproducto.
	unproducto ~= nil
		ifTrue: 
			[nombre := unproducto verNombre.
			cantidad := listadeProducto at: nombre.
			"como se haria si fuera una coleccion normal
esta:= listadeProducto includes:unproducto.
(esta ) ifTrue:[  listadeProducto remove:unproducto .
unproducto devolverproducto .] "

			"Averiguo si el producto esta en la lista de productos del carrito"
			esta := true.
			listadeProducto at: nombre ifAbsent: [esta := false].
			esta
				ifTrue: 
					[unproducto devolverproducto.
					nuevacantidad := (listadeProducto at: nombre) - 1.
					" actualiza la nueva cantidad que tiene del producto"
					listadeProducto at: nombre put: nuevacantidad.
					precioTotal := precioTotal - unproducto verPrecio.
					cantidad < 1 ifFalse: [listadeProducto removeKey: nombre ifAbsent: ['Ya se quito el producto']]]
				ifFalse: 
					["Lo siento no Posee Producto en el carrito"
					]]! !
!CarritodeCompras categoriesFor: #quitarProductoCarritoDLCS:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	esta := true.
	listadeProducto at: idproducto ifAbsent: [esta := false].
	(esta)
		ifTrue: 
			[cantidad := listadeProducto at: idproducto.
			nuevacantidad := cantidad - 1.
			" actualiza la nueva cantidad que tiene del producto"
			listadeProducto at: idproducto put: nuevacantidad.
			cantidad < 1 ifFalse: [
listadeProducto removeKey: idproducto ifAbsent: ['Ya se quito el producto'].
	]
]ifFalse: [
'Lo siento no Posee Producto en el carrito'
]! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	esta := true.
	listadeProducto at: idproducto ifAbsent: [esta := false].
	(esta)
		ifTrue: 
			[cantidad := listadeProducto at: idproducto.
			nuevacantidad := cantidad - 1.
			" actualiza la nueva cantidad que tiene del producto"
			listadeProducto at: idproducto put: nuevacantidad.
			cantidad < 1 ifFalse: [
listadeProducto removeKey: idproducto ifAbsent: ['Ya se quito el producto'].
	]
]ifFalse: [
Transcript
show: 'Lo siento no Posee Producto en el carrito' ;cr
]! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

!CarritodeCompras methodsFor!
quitarProductoCarrito: idproducto
	| esta nuevacantidad nombre cantidad unproducto |
	esta := true.
	listadeProducto at: idproducto ifAbsent: [esta := false].
	(esta)
		ifTrue: 
			[cantidad := listadeProducto at: idproducto.
			nuevacantidad := cantidad - 1.
			" actualiza la nueva cantidad que tiene del producto"
			listadeProducto at: idproducto put: nuevacantidad.
			cantidad < 1 ifFalse: [
listadeProducto removeKey: idproducto ifAbsent: [
Transcript
show: 'Ya se quito el producto' ;cr].
	]
]ifFalse: [
Transcript
show: 'Lo siento no Posee Producto en el carrito' ;cr
]! !
!CarritodeCompras categoriesFor: #quitarProductoCarrito:!public! !

"20:33:39, 08 July 2021: Image saved"!

CarritodeCompras removeSelector: #quitarProductoCarritoDLCS: ifAbsent: []!

CarritodeCompras removeSelector: #agregarProductoCarritoDLCS:unidad: ifAbsent: []!

CarritodeCompras removeSelector: #CargarProductoAcarrito2:unidad: ifAbsent: []!

CarritodeCompras class removeSelector: #crearCarritoDLCS:cliente: ifAbsent: []!

Object subclass: #CarritodeCompras
	instanceVariableNames: 'listadeProducto idpersona'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"20:36:06, 08 July 2021: Image saved"!

!Supermercado methodsFor!
listarProductos
	| a identificador nom precio stock |
	1 to: productos size
		do: 
			[:i |
			(productos at: i) verStock > 0
				ifTrue: 
					[a := i printString.
					identificador := (productos at: i) verIdentificador printString.
					nom := (productos at: i) verNombre printString .
					precio := (productos at: i) verPrecio printString.
					stock := (productos at: i) verStock printString.
					Transcript
						show: a , ') Identificador[' , identificador , '] ' , nom , ' $' , precio , ' Stock[' , stock , ']';
						cr]]! !
!Supermercado categoriesFor: #listarProductos!public! !

Supermercado removeSelector: #listarProductos ifAbsent: []!

!CarritodeCompras methodsFor!
iniCarrito:idPersona
idpersona :=idPersona.
"listadeProducto := OrderedCollection new."
listadeProducto :=Dictionary new. ! !
!CarritodeCompras categoriesFor: #iniCarrito:!public! !

!CarritodeCompras methodsFor!
CargarProductoAcarrito: unProducto
	| esta nuevacantidad |
	"listadeProducto add: unProducto."

	"Averiguo si el producto esta en la lista de productos del carrito"
	esta := true.
	listadeProducto at: unProducto ifAbsent: [esta := false].
	esta
		ifTrue: 
			[nuevacantidad := (listadeProducto at: unProducto) + 1.
			" actualiza la nueva cantidad que tiene del producto"
			listadeProducto at: unProducto put: nuevacantidad]! !
!CarritodeCompras categoriesFor: #CargarProductoAcarrito:!public! !

!CarritodeCompras methodsFor!
CargarProductoAcarrito: unProducto
	| esta nuevacantidad |
	"listadeProducto add: unProducto."

	"Averiguo si el producto esta en la lista de productos del carrito"
	esta := true.
	listadeProducto at: unProducto ifAbsent: [esta := false].
	esta
		ifTrue: 
			[nuevacantidad := (listadeProducto at: unProducto) + 1.
			" actualiza la nueva cantidad que tiene del producto"
			listadeProducto at: unProducto put: nuevacantidad]

ifFalse: [listadeProducto at: unProducto put: 1. ]! !
!CarritodeCompras categoriesFor: #CargarProductoAcarrito:!public! !

!CarritodeCompras methodsFor!
CargarProductoAcarrito: unProducto
	| esta nuevacantidad |
	"listadeProducto add: unProducto."

	"Averiguo si el producto esta en la lista de productos del carrito"
	esta := true.
	listadeProducto at: unProducto ifAbsent: [esta := false].
	esta
		ifTrue: 
			[nuevacantidad := (listadeProducto at: unProducto) + 1.
			" actualiza la nueva cantidad que tiene del producto"
			listadeProducto at: unProducto put: nuevacantidad]

ifFalse: [listadeProducto at: unProducto put: 1. ]! !
!CarritodeCompras categoriesFor: #CargarProductoAcarrito:!public! !

!CarritodeCompras methodsFor!
listarCarrito
|unprod cant|
listadeProducto do: [:elem | 
Transcript
show: elem;cr
]! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

"20:53:39, 08 July 2021: Image saved"!

!Supermercado methodsFor!
procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1.
! !
!Supermercado categoriesFor: #procesoCargarCarrito:productoelegido:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito |
carrito := CarritodeCompras crearCarrito: idcliente .! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:carrito
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:listaproductoscarrito
|precitotal productoconcreto|
listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
]
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:listaproductoscarrito
|preciototal productoconcreto|
listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

"22:10:42, 08 July 2021: Image saved"!

!Factura methodsFor!
EmitirTiket
Transcript
show: 'factura'.
"^numerofactura, importetotal."! !
!Factura categoriesFor: #EmitirTiket!public! !

!Factura methodsFor!
EmitirTiket
Transcript
show: 'factura - ', numerofactura, ' Importe Total: ',importetotal .
"^numerofactura, importetotal."! !
!Factura categoriesFor: #EmitirTiket!public! !

!Factura methodsFor!
EmitirTiket
Transcript
show: 'factura - ', numerofactura, ' Importe Total: ',importetotal; cr.
"^numerofactura, importetotal."! !
!Factura categoriesFor: #EmitirTiket!public! !

!Factura methodsFor!
emitirTiket
Transcript
show: 'factura - ', numerofactura, ' Importe Total: ',importetotal; cr.
"^numerofactura, importetotal."! !
!Factura categoriesFor: #emitirTiket!public! !

Factura removeSelector: #EmitirTiket ifAbsent: []!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 s procesoCargarCarrito: carrito productoelegido: productoelegido



carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.

"--------Pagar Productos -----------"
contFactura:=1.
factura:= Factura CrearFacturanumfactura: contFactura importetotal: precioPagar.
factura emitirTiket!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 s procesoCargarCarrito: carrito productoelegido: productoelegido



carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 s procesoCargarCarrito: carrito productoelegido: productoelegido



carrito CargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 s procesoCargarCarrito: carrito productoelegido: productoelegido



carrito CargarProductoAcarrito: productoelegido.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 s procesoCargarCarrito: carrito productoelegido: productoelegido!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 s procesoCargarCarrito: carrito productoelegido: productoelegido!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 s procesoCargarCarrito: carrito productoelegido: productoelegido



carrito CargarProductoAcarrito: productoelegido.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.


s listarProductosDisponible .!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
!

!CarritodeCompras methodsFor!
cargarProductoAcarrito: unProducto
	| esta nuevacantidad |
	"listadeProducto add: unProducto."

	"Averiguo si el producto esta en la lista de productos del carrito"
	esta := true.
	listadeProducto at: unProducto ifAbsent: [esta := false].
	esta
		ifTrue: 
			[nuevacantidad := (listadeProducto at: unProducto) + 1.
			" actualiza la nueva cantidad que tiene del producto"
			listadeProducto at: unProducto put: nuevacantidad]

ifFalse: [listadeProducto at: unProducto put: 1. ]! !
!CarritodeCompras categoriesFor: #cargarProductoAcarrito:!public! !

CarritodeCompras removeSelector: #CargarProductoAcarrito: ifAbsent: []!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 s procesoCargarCarrito: carrito productoelegido: productoelegido



carrito cargarProductoAcarrito: productoelegido.!

s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

carrito cargarProductoAcarrito: productoelegido.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

carrito cargarProductoAcarrito: productoelegido.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 s procesoCargarCarrito: carrito productoelegido: productoelegido.



carrito cargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito cargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.

"--------Pagar Productos -----------"
contFactura:=1.
factura:= Factura CrearFacturanumfactura: contFactura importetotal: precioPagar.
factura emitirTiket!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 s procesoCargarCarrito: carrito productoelegido: productoelegido.



carrito cargarProductoAcarrito: productoelegido.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 s procesoCargarCarrito: carrito productoelegido: productoelegido.



carrito cargarProductoAcarrito: productoelegido.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 s procesoCargarCarrito: carrito productoelegido: productoelegido.
carrito cargarProductoAcarrito: productoelegido.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 s procesoCargarCarrito: carrito productoelegido: productoelegido.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 s procesoCargarCarrito: carrito productoelegido: productoelegido.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 s procesoCargarCarrito: carrito productoelegido: productoelegido!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 s procesoCargarCarrito: carrito productoelegido: productoelegido!

!Supermercado methodsFor!
procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1.
! !
!Supermercado categoriesFor: #procesoCargarCarrito:productoelegido:!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 "s procesoCargarCarrito: carrito productoelegido: productoelegido."



carrito cargarProductoAcarrito: productoelegido.

productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito cargarProductoAcarrito: productoelegido.!

!Supermercado methodsFor!
procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1.
! !
!Supermercado categoriesFor: #procesoCargarCarrito:productoelegido:!public! !

!Supermercado methodsFor!
procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1.
! !
!Supermercado categoriesFor: #procesoCargarCarrito:productoelegido:!public! !

!Supermercado methodsFor!
procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1.
! !
!Supermercado categoriesFor: #procesoCargarCarrito:productoelegido:!public! !

!Supermercado methodsFor!
procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1.
! !
!Supermercado categoriesFor: #procesoCargarCarrito:productoelegido:!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 "s procesoCargarCarrito: carrito productoelegido: productoelegido."



carrito cargarProductoAcarrito: productoelegido.

productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito cargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.

"--------Pagar Productos -----------"
contFactura:=1.
factura:= Factura CrearFacturanumfactura: contFactura importetotal: precioPagar.
factura emitirTiket!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 "s procesoCargarCarrito: carrito productoelegido: productoelegido."



carrito cargarProductoAcarrito: productoelegido.

productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 "s procesoCargarCarrito: carrito productoelegido: productoelegido."



carrito cargarProductoAcarrito: productoelegido.

productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito cargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 "s procesoCargarCarrito: carrito productoelegido: productoelegido."



carrito cargarProductoAcarrito: productoelegido.

productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito cargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 "s procesoCargarCarrito: carrito productoelegido: productoelegido."



carrito cargarProductoAcarrito: productoelegido.

productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 "s procesoCargarCarrito: carrito productoelegido: productoelegido."



carrito cargarProductoAcarrito: productoelegido.

productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito cargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.!

!CarritodeCompras methodsFor!
listarCarrito
|unprod cant|
listadeProducto do: [:elem | 
Transcript
show: elem ;cr
]! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

!CarritodeCompras methodsFor!
listarCarrito
|unprod cant|
listadeProducto do: [:elem | 
Transcript
show: elem ;cr
]

"printString."! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

!CarritodeCompras methodsFor!
listarCarrito
|unprod cant|
listadeProducto do: [:elem | 
Transcript
show: elem printString ;cr
]

"printString."! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 "s procesoCargarCarrito: carrito productoelegido: productoelegido."



carrito cargarProductoAcarrito: productoelegido.

productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito cargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 "s procesoCargarCarrito: carrito productoelegido: productoelegido."



carrito cargarProductoAcarrito: productoelegido.

productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito cargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

dct do: [:elem | 
Transcript
show: elem;cr
]!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

dct do: [:elem | 
Transcript
show: elem;cr
]!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

dct do: [:elem | 
Transcript
show: elem;cr
]!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

dct do: [:elem | 
Transcript
show: elem;cr
]


dct keysDo: 'uno'.!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

dct do: [:elem | 
Transcript
show: elem;cr
]


dct keysDo: 'uno'.!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

dct do: [:elem | 
Transcript
show: elem;cr
]


dct keysDo: dct.!

!CarritodeCompras methodsFor!
listarCarrito
|unprod clave|
listadeProducto do: [:elem | 
clave:= listadeProducto keyAtValue: elem.
Transcript
show: clave ,'  ',elem printString  ;cr
]

"printString.


keysDo:

valuesDo:

associationsDo:"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.



carrito listarCarrito.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito listarCarrito.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito cargarProductoAcarrito: '2'.
carrito cargarProductoAcarrito: '2'.

carrito listarCarrito.!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

dct do: [:elem | 
Transcript
show: elem;cr
].!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

dct do: [:elem | 
Transcript
show: elem;cr
].

dct keysDo: [ :key | Transcript show: key; cr ].!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

Transcript show: 'usando do';cr.

dct do: [:elem | 
Transcript
show: elem;cr
].

Transcript show: 'usando KEYS';cr.
dct keysDo: [ :key | Transcript show: key; cr ].

Transcript show: 'usando VALUES';cr.
dct valuesDo: [ :value | Transcript show: value; cr ].

Transcript
show: 'usando ASOCIATION';cr.
dct associationsDo: [:value | Transcript show: value; cr].!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

Transcript show: 'usando do';cr.

dct do: [:elem | 
Transcript
show: elem;cr
].!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

Transcript show: 'usando do';cr.

dct do: [:elem | 
Transcript
show: elem;cr
].

Transcript show: 'usando KEYS';cr.
dct keysDo: [ :key | Transcript show: key; cr ].

Transcript show: 'usando VALUES';cr.
dct valuesDo: [ :value | Transcript show: value; cr ].

Transcript
show: 'usando ASOCIATION';cr.
dct associationsDo: [:value | Transcript show: value; cr].!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

dct associationsDo: [:value | Transcript show: value; cr].
!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

dct associationsDo: [:value | Transcript show: value; cr].!

colors := Dictionary newFrom: { #yellow -> Color yellow. #blue -> Color
blue. #red -> Color red }.
colors keysDo: [ :key | Transcript show: key; cr ].
colors valuesDo: [ :value | Transcript show: value; cr ].
colors associationsDo: [:value | Transcript show: value; cr].!

colors := Dictionary newFrom: { #yellow -> Color yellow. #blue -> Color
blue. #red -> Color red }.

colors associationsDo: [:value | Transcript show: value; cr].!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.


dct associationsDo: 'hol'.!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.


dct associationsDo: 'one'.!

colors := Dictionary newFrom: { #yellow -> Color yellow. #blue -> Color
blue. #red -> Color red }.

colors associationsDo: [:value | Transcript show: value; cr].!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.


dct associationsDo: 'one'.!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.


dct associations first key.
!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.


dct associations first key.!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

dct associations select: 
 [:assoc | assoc key size = assoc value size]
!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

dct associations select: 
 [:assoc | assoc key size = assoc value size]!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

dct associations select: 
 [:assoc | assoc key size = assoc value size]
!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

dct associations.!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.



dct associationsDo: [:value | Transcript show: value; cr].
!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

Transcript show: 'usando do';cr.

dct do: [:elem | 
Transcript
show: elem;cr
].

Transcript show: 'usando KEYS';cr.
dct keysDo: [ :key | Transcript show: key; cr ].

Transcript show: 'usando VALUES';cr.
dct valuesDo: [ :value | Transcript show: value; cr ].!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

Transcript show: 'usando do';cr.

dct do: [:elem | 
Transcript
show: elem;cr
].

Transcript show: 'usando KEYS';cr.
dct keysDo: [ :key | Transcript show: key; cr ].

Transcript show: 'usando VALUES';cr.
dct valuesDo: [ :value | Transcript show: value; cr ].!

!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

Transcript show: 'usando VALUES';cr.
dct valuesDo: [ :value | Transcript show: value; cr ].!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

Transcript show: 'usando VALUES';cr.
dct valuesDo: [ :value | Transcript show: value; cr ].!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

Transcript show: 'usando VALUES';cr.
dct valuesDo: [ :value | Transcript show: value; cr ].!

colors := Dictionary newFrom: { #yellow -> Color yellow. #blue -> Color
blue. #red -> Color red }.!

|colors|
colors := Dictionary newFrom: { #yellow -> Color yellow. #blue -> Color
blue. #red -> Color red }.!

|colors|
colors := Dictionary newFrom: { #yellow -> Color yellow. #blue -> Color
blue. #red -> Color red }.

colors associationsDo: [:value | Transcript show: value; cr].


colors keysDo: [ :key | Transcript show: key; cr ].
colors valuesDo: [ :value | Transcript show: value; cr ].!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

Transcript show: 'usando VALUES';cr.
dct valuesDo: [ :value | Transcript show: value; cr ].!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

Transcript show: 'usando do';cr.

dct do: [:elem | 
Transcript
show: elem;cr
].

Transcript show: 'usando KEYS';cr.
dct keysDo: [ :key | Transcript show: key; cr ].!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

Transcript show: 'usando KEYS';cr.
dct keysDo: [ :key | Transcript show: key; cr ].!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

Transcript show: 'usando KEYS';cr.
dct keysDo: [ :key | Transcript show: key; cr ].
!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

Transcript show: 'usando KEYS';cr.
dct keysDo: [ :key | Transcript show: key, dct  at: key ; cr ].!

!CarritodeCompras methodsFor!
listarCarrito
|unprod clave|
"listadeProducto do: [:elem | 
clave:= listadeProducto keyAtValue: elem.
Transcript
show: clave ,'  ',elem printString  ;cr
]"


listadeProducto keysDo: [ :key | clave:= listadeProducto at: key.
Transcript show: key; cr ].



"printString.


keysDo:

valuesDo:

associationsDo:"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito cargarProductoAcarrito: '2'.
carrito cargarProductoAcarrito: '2'.

carrito listarCarrito.
!

!CarritodeCompras methodsFor!
listarCarrito
|unprod clave|
"listadeProducto do: [:elem | 
clave:= listadeProducto keyAtValue: elem.
Transcript
show: clave ,'  ',elem printString  ;cr
]"


listadeProducto keysDo: [ :key | clave:= listadeProducto at: key.
Transcript show: key,' valor ',clave ; cr ].



"printString.


keysDo:

valuesDo:

associationsDo:"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito cargarProductoAcarrito: '2'.
carrito cargarProductoAcarrito: '2'.

carrito listarCarrito.
!

!CarritodeCompras methodsFor!
listarCarrito
|unprod clave|
"listadeProducto do: [:elem | 
clave:= listadeProducto keyAtValue: elem.
Transcript
show: clave ,'  ',elem printString  ;cr
]"


listadeProducto keysDo: [ :key | clave:=listadeProducto at: key .
Transcript show: key,' valor ',clave ; cr ].



"printString.


keysDo:

valuesDo:

associationsDo:"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito cargarProductoAcarrito: '2'.
carrito cargarProductoAcarrito: '2'.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito cargarProductoAcarrito: '2'.
carrito cargarProductoAcarrito: '2'.

carrito listarCarrito.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito cargarProductoAcarrito: '2'.
carrito cargarProductoAcarrito: '2'.

carrito listarCarrito.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito cargarProductoAcarrito: '2'.
carrito cargarProductoAcarrito: '2'.

carrito listarCarrito.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito cargarProductoAcarrito: '2'.
carrito cargarProductoAcarrito: '2'.

carrito listarCarrito.!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.

Transcript show: 'usando KEYS';cr.
dct keysDo: [ :key | Transcript show: key, dct  at: key ; cr ].!

dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.


dct keysDo: [ :key | clave:=dct at: key .
Transcript show: key,' valor ' ; cr ].!


dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.


dct keysDo: [ :key | clave:=dct at: key .
Transcript show: key,' valor ' ,clave ; cr ].
!

!CarritodeCompras methodsFor!
listarCarrito
|unprod valor|
"listadeProducto do: [:elem | 
clave:= listadeProducto keyAtValue: elem.
Transcript
show: clave ,'  ',elem printString  ;cr
]"


listadeProducto keysDo: [ :key | valor :=(listadeProducto at: key) printString .
Transcript show: key,' valor ',valor ; cr ].



"printString.


keysDo:

valuesDo:

associationsDo:"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !


dct := Dictionary new. 
dct at: 'uno' put: 'one'. "Clave 'uno', valor 'one'" 
dct at: 'dos' put: 'two'. "Clave 'dos', valor 'two'" 
dct at: 'tres' put: 'three'. 
dct at: 'cuatro' put: 'four'.


dct keysDo: [ :key | clave:=dct at: key .
Transcript show: key,' valor ' ,clave ; cr ].!

!CarritodeCompras methodsFor!
listarCarrito
|unprod valor|
"listadeProducto do: [:elem | 
clave:= listadeProducto keyAtValue: elem.
Transcript
show: clave ,'  ',elem printString  ;cr
]"


listadeProducto keysDo: [ :key | valor :=(listadeProducto at: key) printString .
Transcript show: key,' valor ',valor ; cr ].



"printString.


keysDo:

valuesDo:

associationsDo:"! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito cargarProductoAcarrito: '2'.
carrito cargarProductoAcarrito: '2'.

carrito listarCarrito.
!

!CarritodeCompras methodsFor!
listarCarrito
|unprod valor|

listadeProducto keysDo: [ :key | valor :=(listadeProducto at: key) printString .
Transcript show: 'identificador de producto',key,' cantidad: ',valor ; cr ].


! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito cargarProductoAcarrito: '2'.
carrito cargarProductoAcarrito: '2'.

carrito listarCarrito.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito cargarProductoAcarrito: '2'.
carrito cargarProductoAcarrito: '2'.

carrito listarCarrito.
!

!CarritodeCompras methodsFor!
listarCarrito
|unprod valor|

listadeProducto keysDo: [ :key | valor :=(listadeProducto at: key) printString .
Transcript show: 'identificador de producto - ',key,' cantidad: ',valor ; cr ].


! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito cargarProductoAcarrito: '2'.
carrito cargarProductoAcarrito: '2'.

carrito listarCarrito.
!

!CarritodeCompras methodsFor!
listarCarrito
|unprod valor|

listadeProducto keysDo: [ :key | valor :=(listadeProducto at: key) printString .
Transcript show: 'identificador de producto - ',key,'    cantidad: ',valor ; cr ].


! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito cargarProductoAcarrito: '2'.
carrito cargarProductoAcarrito: '2'.

carrito listarCarrito.
!

"23:36:55, 08 July 2021: Image saved"!

"23:37:06, 08 July 2021: Image saved"!

"23:37:06, 08 July 2021: Image saved"!

"23:37:07, 08 July 2021: Image saved"!

"23:37:07, 08 July 2021: Image saved"!

"23:37:08, 08 July 2021: Image saved"!

"23:37:08, 08 July 2021: Image saved"!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 "s procesoCargarCarrito: carrito productoelegido: productoelegido."



carrito cargarProductoAcarrito: productoelegido.

productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito cargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.

"--------Pagar Productos -----------"
contFactura:=1.
factura:= Factura CrearFacturanumfactura: contFactura importetotal: precioPagar.
factura emitirTiket.!

!Factura methodsFor!
emitirTiket
| total num|
total :=importetotal printString.
num:= numerofactura printString.
Transcript
show: 'factura - ', num, ' Importe Total: ',total; cr.
"^numerofactura, importetotal."! !
!Factura categoriesFor: #emitirTiket!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 "s procesoCargarCarrito: carrito productoelegido: productoelegido."



carrito cargarProductoAcarrito: productoelegido.

productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito cargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.

"--------Pagar Productos -----------"
contFactura:=1.
factura:= Factura CrearFacturanumfactura: contFactura importetotal: precioPagar .
factura emitirTiket.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 "s procesoCargarCarrito: carrito productoelegido: productoelegido."



carrito cargarProductoAcarrito: productoelegido.

productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito cargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 "s procesoCargarCarrito: carrito productoelegido: productoelegido."



carrito cargarProductoAcarrito: productoelegido.

productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito cargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.

"--------Pagar Productos -----------"
contFactura:=1.
factura:= Factura CrearFacturanumfactura: contFactura importetotal: precioPagar .
factura emitirTiket.!

!Factura methodsFor!
iniFacturanumfactura:unnumfac  importetotal:unimportetotal
numerofactura:=unnumfac.
fecha := Date today.
importetotal:=unimportetotal .! !
!Factura categoriesFor: #iniFacturanumfactura:importetotal:!public! !

!Factura methodsFor!
emitirTiket
| total num fechahoy|
total :=importetotal printString.
num:= numerofactura printString.

Transcript
show: 'factura - ', num, ' Fecha ', fecha ,' Importe Total: ',total; cr.
"^numerofactura, importetotal."! !
!Factura categoriesFor: #emitirTiket!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 "s procesoCargarCarrito: carrito productoelegido: productoelegido."



carrito cargarProductoAcarrito: productoelegido.

productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito cargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.

"--------Pagar Productos -----------"
contFactura:=1.
factura:= Factura CrearFacturanumfactura: contFactura importetotal: precioPagar .
factura emitirTiket.!

!Factura methodsFor!
emitirTiket
| total num fecha1|
total :=importetotal printString.
num:= numerofactura printString.
fecha1:=fecha printString .
Transcript
show: 'factura - ', num, ' Fecha ', fecha1 ,' Importe Total: ',total; cr.
"^numerofactura, importetotal."! !
!Factura categoriesFor: #emitirTiket!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 "s procesoCargarCarrito: carrito productoelegido: productoelegido."



carrito cargarProductoAcarrito: productoelegido.

productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito cargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.

"--------Pagar Productos -----------"
contFactura:=1.
factura:= Factura CrearFacturanumfactura: contFactura importetotal: precioPagar .
factura emitirTiket.!

!Factura methodsFor!
emitirTiket
| total num fecha1|
total :=importetotal printString.
num:= numerofactura printString.
fecha1:=fecha printString .
Transcript
show: 'factura - ', num, '       Fecha ', fecha1 ,'   Importe Total: ',total; cr.
"^numerofactura, importetotal."! !
!Factura categoriesFor: #emitirTiket!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 "s procesoCargarCarrito: carrito productoelegido: productoelegido."



carrito cargarProductoAcarrito: productoelegido.

productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito cargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.

"--------Pagar Productos -----------"
contFactura:=1.
factura:= Factura CrearFacturanumfactura: contFactura importetotal: precioPagar .
factura emitirTiket.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
"ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'."
Transcript clear.
"s llamarMenuPrincipal."
carrito:= CarritodeCompras crearCarrito: '1'.

"------Se simula una compra ------"
precioPagar:= 0.


productoelegido:='1'.

 "s procesoCargarCarrito: carrito productoelegido: productoelegido."



carrito cargarProductoAcarrito: productoelegido.

productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
precioPagar:= precioPagar + (productoComprado verPrecio).

productoComprado verStock.

carrito cargarProductoAcarrito: productoelegido.
productoComprado :=s buscarElProductoEnSupermercado: productoelegido.
productoComprado descontarStock: 1.
carrito listarCarrito.


precioPagar:= precioPagar + (productoComprado verPrecio).

carrito listarCarrito.

"--------Pagar Productos -----------"
contFactura:=1.
factura:= Factura CrearFacturanumfactura: contFactura importetotal: precioPagar .
factura emitirTiket.!

Factura class removeSelector: #CrearFacturanumfactura:mediodepago:fecha:descuento:importetotal: ifAbsent: []!

!Supermercado methodsFor!
oferta
|listaOferta|
listaOferta := productos select:[:prod| prod verPrecio<100 ].
! !
!Supermercado categoriesFor: #oferta!public! !

!Supermercado methodsFor!
oferta
|listaOferta precio idprod|
listaOferta := productos select:[:prod| prod verPrecio<100 ].
listaOferta do: [:unprod | 
idprod :=unprod  verIdentificadorProducto printString.
precio :=unprod  verPrecio printString.
Transcript show: 'id: producto: ',idprod,'     ',unprod verNombreProducto,' precio ',precio
]! !
!Supermercado categoriesFor: #oferta!public! !

"23:55:40, 08 July 2021: Image saved"!

!Supermercado methodsFor!
verOferta
|listaOferta precio idprod|
listaOferta := productos select:[:prod| prod verPrecio<100 ].
listaOferta do: [:unprod | 
idprod :=unprod  verIdentificadorProducto printString.
precio :=unprod  verPrecio printString.
Transcript show: 'id: producto: ',idprod,'     ',unprod verNombreProducto,' precio ',precio
]! !
!Supermercado categoriesFor: #verOferta!public! !

Supermercado removeSelector: #oferta ifAbsent: []!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito cargarProductoAcarrito: '2'.
carrito cargarProductoAcarrito: '2'.

carrito listarCarrito.
s verOferta.!

!Supermercado methodsFor!
verOferta
|listaOferta precio idprod|
Transcript show: 'Lista de Ofertas: ';cr.
listaOferta := productos select:[:prod| prod verPrecio<100 ].
listaOferta do: [:unprod | 
idprod :=unprod  verIdentificadorProducto printString.
precio :=unprod  verPrecio printString.
Transcript show: 'id: producto: ',idprod,'     ',unprod verNombreProducto,' precio ',precio;cr.
]! !
!Supermercado categoriesFor: #verOferta!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito cargarProductoAcarrito: '2'.
carrito cargarProductoAcarrito: '2'.

carrito listarCarrito.
s verOferta.!

!Supermercado methodsFor!
verOferta
|listaOferta precio idprod|
Transcript show: 'Lista de Ofertas: ';cr.
listaOferta := productos select:[:prod| prod verPrecio<35 ].
listaOferta do: [:unprod | 
idprod :=unprod  verIdentificadorProducto printString.
precio :=unprod  verPrecio printString.
Transcript show: 'id: producto: ',idprod,'     ',unprod verNombreProducto,' precio ',precio;cr.
]! !
!Supermercado categoriesFor: #verOferta!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito cargarProductoAcarrito: '2'.
carrito cargarProductoAcarrito: '2'.

carrito listarCarrito.
s verOferta.!

"00:03:00, 09 July 2021: Image saved"!

"00:03:03, 09 July 2021: Image saved"!

"00:03:04, 09 July 2021: Image saved"!

"00:03:04, 09 July 2021: Image saved"!

"00:03:04, 09 July 2021: Image saved"!

!Factura methodsFor!
emitirTiket
| total num fecha1|
total :=importetotal printString.
num:= numerofactura printString.
fecha1:=fecha printString .
Transcript
show: 'factura - ', num, '       Fecha ', fecha1 ,'   Importe Total: ',total; cr.
! !
!Factura categoriesFor: #emitirTiket!public! !

!Supermercado methodsFor!
verProductosPrimeraCalidad
|listaOferta precio idprod|
Transcript show: 'Lista de Ofertas: ';cr.
listaOferta := productos reject: [:prod| prod verPrecio<35 ].
listaOferta do: [:unprod | 
idprod :=unprod  verIdentificadorProducto printString.
precio :=unprod  verPrecio printString.
Transcript show: 'id: producto: ',idprod,'     ',unprod verNombreProducto,' precio ',precio;cr.
]! !
!Supermercado categoriesFor: #verProductosPrimeraCalidad!public! !

!Supermercado methodsFor!
verProductosPrimeraCalidad
|listaOferta precio idprod|
Transcript show: 'Lista de productos de primera marca: ';cr.
listaOferta := productos reject: [:prod| prod verPrecio<35 ].
listaOferta do: [:unprod | 
idprod :=unprod  verIdentificadorProducto printString.
precio :=unprod  verPrecio printString.
Transcript show: 'id: producto: ',idprod,'     ',unprod verNombreProducto,' precio ',precio;cr.
]! !
!Supermercado categoriesFor: #verProductosPrimeraCalidad!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.


carrito cargarProductoAcarrito: '2'.
carrito cargarProductoAcarrito: '2'.

carrito listarCarrito.
s verOferta.
s verProductosPrimeraCalidad.!

!Supermercado methodsFor!
MontoTotal:listaproductoscarrito
|preciototal productoconcreto|
preciototal:=0.
listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
].
^preciototal.! !
!Supermercado categoriesFor: #MontoTotal:!public! !

Supermercado removeSelector: #procesoCargarCarrito:productoelegido: ifAbsent: []!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].!

!Supermercado methodsFor!
realizarCompra:listaproductoscarrito
|preciototal productoconcreto seguircomprando|
listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
].



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
llamarMenuPrincipal
Transcript show: 'MENU SUPERMERCADO
0)salir
1)Mostrar Productos
2)Ver Carrito
3)Ir a Pagar';cr.! !
!Supermercado categoriesFor: #llamarMenuPrincipal!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

s listarProductosDisponible .


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					"s listarProductosDisponible ."
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------'.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito verCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].!

!CarritodeCompras methodsFor!
cargarProductoAcarrito: unProducto
	| esta nuevacantidad |
	"listadeProducto add: unProducto."

	"Averiguo si el producto esta en la lista de productos del carrito"
	esta := true.
	listadeProducto at: unProducto ifAbsent: [esta := false. Transcript  show: 'no hay producto' ].
	"esta
		ifTrue: 
			[nuevacantidad := (listadeProducto at: unProducto) + 1.
			" 
	"actualiza la nueva cantidad que tiene del producto"
			"listadeProducto at: unProducto put: nuevacantidad]

ifFalse: [listadeProducto at: unProducto put: 1. ]"! !
!CarritodeCompras categoriesFor: #cargarProductoAcarrito:!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: '1'.
carrito cargarProductoAcarrito: '1'.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito CargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].!

!CarritodeCompras methodsFor!
cargarProductoAcarrito: unProducto
	| esta nuevacantidad |
	"listadeProducto add: unProducto."

	"Averiguo si el producto esta en la lista de productos del carrito"
	esta := true.
	listadeProducto at: unProducto ifAbsent: [esta := false.].
	esta
		ifTrue: 
			[nuevacantidad := (listadeProducto at: unProducto) + 1.
			
	"actualiza la nueva cantidad que tiene del producto"
			listadeProducto at: unProducto put: nuevacantidad]

ifFalse: [listadeProducto at: unProducto put: 1. ]! !
!CarritodeCompras categoriesFor: #cargarProductoAcarrito:!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
		prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod.
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
Pseleccionado='0' ifTrue: [
		 prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod. ].
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
Pseleccionado='0' ifTrue: [
		 prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod. ].
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
Pseleccionado~='0' ifTrue: [
		 prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod. ].
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
Pseleccionado~='0' ifTrue: [
		 prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod. ].
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito inspect ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].

!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
Pseleccionado~='0' ifTrue: [
		 prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod. ].
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].
!

!CarritodeCompras methodsFor!
listarCarrito
|unprod valor|
(listadeProducto size =0) ifTrue: [Transcript show: ' El carrito no posee productos ';cr. ].
listadeProducto keysDo: [ :key | valor :=(listadeProducto at: key) printString .
Transcript show: 'identificador de producto - ',key,'    cantidad: ',valor ; cr ].


! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
Pseleccionado~='0' ifTrue: [
		 prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod. ].
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].
!

!CarritodeCompras methodsFor!
listarCarrito
|unprod valor|
(listadeProducto size = 0) ifTrue: [Transcript show: ' El carrito no posee productos ';cr. ].
listadeProducto keysDo: [ :key | valor :=(listadeProducto at: key) printString .
Transcript show: 'identificador de producto - ',key,'    cantidad: ',valor ; cr ].


! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
Pseleccionado~='0' ifTrue: [
		 prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod. ].
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito.
carrito verCarrito size.  ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
Pseleccionado~='0' ifTrue: [
		 prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod. ].
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito.
carrito verCarrito size inspect .   ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
Pseleccionado~='0' ifTrue: [
		 prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod. ].
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito.  ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
Pseleccionado~='0' ifTrue: [
		 prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod. ].
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito.  ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: productoa.
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: productoa.

!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.

p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.


productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.

"s listarProductosDisponible ."

carrito:= CarritodeCompras crearCarrito: '1'.
carrito cargarProductoAcarrito: productoa.
carrito listarCarrito.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
Pseleccionado~='0' ifTrue: [
		 prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod. ].
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito.  ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].
!

!Supermercado methodsFor!
realizarCompra:listaproductoscarrito
|preciototal productoconcreto seguircomprando|
listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
].



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal productoconcreto seguircomprando|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando Pseleccionado productoconcreto|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoaComprar|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoaComprar :=self buscarElProductoEnSupermercado: prodSeleccionado.

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoaComprar|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoaComprar :=self buscarElProductoEnSupermercado: prodSeleccionado.

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.


"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
(productoReal~= nil) ifTrue: [ ].

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
self llamarMenuPrincipal.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
(productoReal~= nil) ifTrue: [ ].

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
self llamarMenuPrincipal.
Transcript show:'----------------------------------------------';cr.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
(prodSeleccionado~=0 and productoReal~= nil) ifTrue: [ ].

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
self llamarMenuPrincipal.
Transcript show:'----------------------------------------------';cr.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
(prodSeleccionado~=0 and productoReal~= nil) ifTrue: [ ].

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
self llamarMenuPrincipal.
Transcript show:'----------------------------------------------';cr.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
(prodSeleccionado~=0 and productoReal~= nil) ifTrue: [
carrito cargarProductoAcarrito: prodSeleccionado.
productoReal descontarStock: 1.
 ].

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
self llamarMenuPrincipal.
Transcript show:'----------------------------------------------';cr.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
(prodSeleccionado~=0 and productoReal~= nil) ifTrue: [
carrito cargarProductoAcarrito: prodSeleccionado.
productoReal descontarStock: 1 .
 ].

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
Transcript show:'----------------------------------------------';cr.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
(prodSeleccionado~=0 and productoReal~= nil) ifTrue: [
carrito cargarProductoAcarrito: prodSeleccionado.
productoReal descontarStock: 1 .
 ].

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

"23:36:14, 09 July 2021: Image saved"!
"23:44:23, 09 July 2021: Dolphin Smalltalk Professional started"!

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
Transcript show:'----------------------------------------------';cr.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
(prodSeleccionado~=0 and productoReal~= nil) ifTrue: [
carrito cargarProductoAcarrito: prodSeleccionado.
productoReal descontarStock: 1 .
 ].

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

"23:45:07, 09 July 2021: Image saved"!

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
Transcript show:'----------------------------------------------';cr.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
(prodSeleccionado~=0 and productoReal~= nil) ifTrue: [
carrito cargarProductoAcarrito: prodSeleccionado.
productoReal descontarStock: 1 .
 ].

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.


!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
Pseleccionado~='0' ifTrue: [
		 prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod. ].
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito.  ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
Pseleccionado~='0' ifTrue: [
		 prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod. ].
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito.  ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
Pseleccionado~='0' ifTrue: [
		 prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod. ].
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito.  ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
Pseleccionado~='0' ifTrue: [
		 prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod. ].
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito.  ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.

"s listarProductosDisponible ."


menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [ Transcript clear.
		s listarProductosDisponible .
		[ Pseleccionado~='0'] whileTrue:[
					Transcript clear.
					s listarProductosDisponible .
					Pseleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
					Transcript show:'----------------------------------------------';cr.
					
		"s listarProductosCarritoIdentificador."
		"s buscarElProductoEnSupermercado: Pseleccionado."
Pseleccionado~='0' ifTrue: [
		 prod := s buscarElProductoEnSupermercado: Pseleccionado.
		carrito cargarProductoAcarrito:prod. ].
		"carrito verProductosEnCarrito."
		Transcript clear.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito.  ].
			menu = '3' ifTrue: [ Prompter prompt: '3' ].
			menu = '4' ifTrue: [ Prompter prompt: '4'].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero , 0 para salir'.
].
!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.


s realizarCompra: clienteSelecionado.!

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
Transcript show:'----------------------------------------------';cr.
self listarProductosDisponible.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
(prodSeleccionado~=0 and productoReal~= nil) ifTrue: [
carrito cargarProductoAcarrito: prodSeleccionado.
productoReal descontarStock: 1 .
 ].

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.


s realizarCompra: clienteSelecionado.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.


s realizarCompra: clienteSelecionado.!

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
Transcript show:'----------------------------------------------';cr.
self listarProductosDisponible.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
(prodSeleccionado~=0) ifTrue: [
 (productoReal~= nil)ifTrue: [
carrito cargarProductoAcarrito: prodSeleccionado.
productoReal descontarStock: 1 .
].
 ].

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.


s realizarCompra: clienteSelecionado.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.


s realizarCompra: clienteSelecionado.!

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
Transcript show:'----------------------------------------------';cr.
prodSeleccionado:=1.
[prodSeleccionado~='0'] whileTrue:[
self listarProductosDisponible.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
(prodSeleccionado~=0) ifTrue: [
 (productoReal~= nil)ifTrue: [
carrito cargarProductoAcarrito: prodSeleccionado.
productoReal descontarStock: 1 .
].
 ].
].

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
Transcript show:'----------------------------------------------';cr.
prodSeleccionado:=1.
[prodSeleccionado~='0'] whileTrue:[
self listarProductosDisponible.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
(prodSeleccionado~=0) ifTrue: [
 (productoReal~= nil)ifTrue: [
carrito cargarProductoAcarrito: prodSeleccionado.
productoReal descontarStock: 1 .
].
 ].
].

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
Transcript show:'----------------------------------------------';cr.
prodSeleccionado:=1.
[prodSeleccionado~='0'] whileTrue:[
self listarProductosDisponible.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
(prodSeleccionado~=0) ifTrue: [
 (productoReal~= nil)ifTrue: [
carrito cargarProductoAcarrito: prodSeleccionado.
productoReal descontarStock: 1 .
].
 ].
].

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
Transcript show:'----------------------------------------------';cr.
prodSeleccionado:=1.
[prodSeleccionado~='0'] whileTrue:[
self listarProductosDisponible.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
(prodSeleccionado~=0) ifTrue: [
 (productoReal~= nil)ifTrue: [
carrito cargarProductoAcarrito: prodSeleccionado.
productoReal descontarStock: 1 .
].
 ].
].
^carrito.

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
Transcript show:'----------------------------------------------';cr.
prodSeleccionado:=1.
[prodSeleccionado~='0'] whileTrue:[
Transcript clear.
self listarProductosDisponible.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
(prodSeleccionado~=0) ifTrue: [
 (productoReal~= nil)ifTrue: [
carrito cargarProductoAcarrito: prodSeleccionado.
productoReal descontarStock: 1 .
].
 ].
].
^carrito.

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.


s realizarCompra: clienteSelecionado.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 
Transcript clear.
s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.


s realizarCompra: clienteSelecionado.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
Transcript clear.
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 

s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.


s realizarCompra: clienteSelecionado.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
Transcript clear.
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 

s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.


s realizarCompra: clienteSelecionado.!

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
Transcript show:'----------------------------------------------';cr.
prodSeleccionado:=1.
[prodSeleccionado~='0'] whileTrue:[
Transcript clear.
self listarProductosDisponible.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
(prodSeleccionado~=0) ifTrue: [
 (productoReal~= nil)ifTrue: [
carrito cargarProductoAcarrito: prodSeleccionado.
productoReal descontarStock: 1 .
].
 ].
].
carrito listarCarrito.
^carrito.

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
Transcript clear.
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 

s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.


s realizarCompra: clienteSelecionado.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
Transcript clear.
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 

s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.


s realizarCompra: clienteSelecionado.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
Transcript clear.
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 

s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.


s realizarCompra: clienteSelecionado.!

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
Transcript show:'----------------------------------------------';cr.
prodSeleccionado:=1.
[prodSeleccionado~='0'] whileTrue:[
Transcript clear.
self listarProductosDisponible.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
(prodSeleccionado~=0) ifTrue: [
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
 (productoReal~= nil)ifTrue: [
carrito cargarProductoAcarrito: prodSeleccionado.
productoReal descontarStock: 1 .
].
 ].
].
carrito listarCarrito.
^carrito.

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
realizarCompra:idcliente
|carrito preciototal seguircomprando prodSeleccionado productoReal|
carrito:= CarritodeCompras crearCarrito: idcliente.
self agregarCarrito: carrito.
Transcript show:'----------------------------------------------';cr.
prodSeleccionado:=1.
[prodSeleccionado~='0'] whileTrue:[

self listarProductosDisponible.
prodSeleccionado:= Prompter prompt: 'Ingrese una opcion, 0 para salir y proceder con 	la compra'.
(prodSeleccionado~=0) ifTrue: [
productoReal :=self buscarElProductoEnSupermercado: prodSeleccionado.
 (productoReal~= nil)ifTrue: [
carrito cargarProductoAcarrito: prodSeleccionado.
productoReal descontarStock: 1 .
].
 ].
Transcript clear.
].
carrito listarCarrito.
^carrito.

"listaproductoscarrito do: [: unproducto | 
productoconcreto := self buscarElProductoEnSupermercado: unproducto. 
preciototal:=productoconcreto verPrecio.
]."



"procesoCargarCarrito:carrito productoelegido:productoelegido
|productoComprar|
carrito CargarProductoAcarrito: productoelegido.
productoComprar :=self buscarElProductoEnSupermercado: productoelegido.
productoComprar descontarStock: 1. "
! !
!Supermercado categoriesFor: #realizarCompra:!public! !

!Supermercado methodsFor!
verProductosPrimeraCalidad
|listacalidad1 listacalidad2 precio idprod|
Transcript show: 'Lista de productos de primera marca: ';cr.
listacalidad1 := productos reject: [:prod| prod verPrecio<35 ].

listacalidad2:= listacalidad1 collect: [:each | each verNombreProducto .].


listacalidad2 do: [:unprod | 
idprod :=unprod  verIdentificadorProducto printString.
precio :=unprod  verPrecio printString.
Transcript show: 'id: producto: ',idprod,'     ',unprod verNombreProducto,' precio ',precio;cr.
]! !
!Supermercado categoriesFor: #verProductosPrimeraCalidad!public! !

!Supermercado methodsFor!
verProductosPrimeraCalidad
|listacalidad1 listacalidad2 precio idprod|
Transcript show: 'Lista de productos de primera marca: ';cr.
listacalidad1 := productos reject: [:prod| prod verPrecio<35 ].

listacalidad2:= listacalidad1 collect: [:each | each verNombreProducto .].
listacalidad2 do: [:unprod | 
Transcript show: '-     ',unprod ;cr.
]




"listacalidad1 do: [:unprod | 
idprod :=unprod  verIdentificadorProducto printString.
precio :=unprod  verPrecio printString.
Transcript show: 'id: producto: ',idprod,'     ',unprod verNombreProducto,' precio ',precio;cr.
]"! !
!Supermercado categoriesFor: #verProductosPrimeraCalidad!public! !

!Supermercado methodsFor!
verProductosPrimeraCalidad
|listacalidad1 listacalidad2 precio idprod|
Transcript show: 'Lista de productos de primera marca: ';cr.
listacalidad1 := productos reject: [:prod| prod verPrecio<35 ].
Transcript show: 'Productos de Primera Marca o Calidad'.
listacalidad2:= listacalidad1 collect: [:each | each verNombreProducto .].
listacalidad2 do: [:unprod | 
Transcript show: '-     ',unprod ;cr.
]




"listacalidad1 do: [:unprod | 
idprod :=unprod  verIdentificadorProducto printString.
precio :=unprod  verPrecio printString.
Transcript show: 'id: producto: ',idprod,'     ',unprod verNombreProducto,' precio ',precio;cr.
]"! !
!Supermercado categoriesFor: #verProductosPrimeraCalidad!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
Transcript clear.
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 

s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.

s verProductosPrimeraCalidad.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
Transcript clear.
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 

s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.

s verProductosPrimeraCalidad.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
Transcript clear.
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 

s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.

s verProductosPrimeraCalidad.!

"08:45:49, 12 July 2021: Image saved"!

"08:46:10, 12 July 2021: Dolphin Smalltalk Professional started"!

"08:46:23, 12 July 2021: Image saved"!

!Supermercado methodsFor!
verProductosPrimeraCalidad
|listacalidad1 listacalidad2 precio idprod|
Transcript show: 'Lista de productos de primera marca: ';cr.
listacalidad1 := productos reject: [:prod| prod verPrecio<35 ].
listacalidad2:= listacalidad1 collect: [:each | each verNombreProducto .].
listacalidad2 do: [:unprod | 
Transcript show: '-     ',unprod ;cr.
]




"listacalidad1 do: [:unprod | 
idprod :=unprod  verIdentificadorProducto printString.
precio :=unprod  verPrecio printString.
Transcript show: 'id: producto: ',idprod,'     ',unprod verNombreProducto,' precio ',precio;cr.
]"! !
!Supermercado categoriesFor: #verProductosPrimeraCalidad!public! !

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
Transcript clear.
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 

s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.

"s verProductosPrimeraCalidad."



s realizarCompra: clienteSelecionado.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
Transcript clear.
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 

s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.

"s verProductosPrimeraCalidad."



s realizarCompra: clienteSelecionado.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
Transcript clear.
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 

s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.

"s verProductosPrimeraCalidad."



s realizarCompra: clienteSelecionado.!

!CarritodeCompras methodsFor!
listarCarrito
|unprod valor|
Transcript show: ' Producto en Carrito'.
(listadeProducto size = 0) ifTrue: [Transcript show: ' El carrito no posee productos ';cr. ].
listadeProducto keysDo: [ :key | valor :=(listadeProducto at: key) printString .
Transcript show: 'identificador de producto - ',key,'    cantidad: ',valor ; cr ].


! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

!CarritodeCompras methodsFor!
listarCarrito
|unprod valor|
Transcript show: ' Producto en Carrito'.
(listadeProducto size = 0) ifTrue: [Transcript show: ' El carrito no posee productos ';cr. ].
listadeProducto keysDo: [ :key | valor :=(listadeProducto at: key) printString .
Transcript show: 'identificador de producto - ',key,'    cantidad: ',valor ; cr ].


! !
!CarritodeCompras categoriesFor: #listarCarrito!public! !

Object subclass: #OneOffNoteBubble
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"20:07:57, 12 July 2021: Image saved"!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado ClienteSeleecionado|
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:1.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:2.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras."
Transcript clear.
s verClientes .
ClienteSeleecionado:= Prompter prompt: 'Seleccione un cliente'.
Transcript clear.
s llamarMenuPrincipal.
carrito:= CarritodeCompras crearCarrito: ClienteSeleecionado.
menu:= Prompter prompt:'Ingrese un opcion'.

[menu~='0'] whileTrue:[
		Transcript clear.
		s llamarMenuPrincipal.
			menu = '1' ifTrue: [carrito:= s realizarCompra: ClienteSeleecionado.
		].].
			menu = '2' ifTrue: [ carrito listarCarrito.
								Prompter prompt: 'oprima ok para salir'.
].
			menu = '3' ifTrue: [ "s MontoTotal: carrito"  ].
			menu = '4' ifTrue: [
						        precioAbuscar:= Prompter prompt: 'ingrese un precio' .
							precioAbuscar:=precioAbuscar asNumber.
							s buscarProductosPorPrecio:precioAbuscar .
							Prompter prompt: 'salir'.
							].
			menu = '5' ifTrue: [ s verProductosPrimeraCalidad.
							Prompter prompt: 'salir'. ].
Transcript clear.
s llamarMenuPrincipal.
menu:= Prompter prompt:'Ingrese un numero'.!

"20:18:30, 12 July 2021: Dolphin Smalltalk Professional started"!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
Transcript clear.
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 

s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.

"s verProductosPrimeraCalidad."



s realizarCompra: clienteSelecionado.!

|s a  c e p productoa productob menu carrito unid prod idproducto Pseleccionado clienteSelecionado productoComprado   productoelegido precioPagar   factura  contFactura|
Transcript clear.
s:= Supermercado crearSuperNom:'sunshine'.
c:= Cliente crearPersonaCliente: 1 nom: 'Leandro' ape: 'Oviedo' id:'1'.
s agregarCliente: c.
c:= Cliente crearPersonaCliente: 2 nom: 'Pedro' ape: 'Ramos' id:'2'.
s agregarCliente: c.
e:= Empleado crearPersonaEmpleado: 20 nom: 'Javier' ape: 'Sanches' pues: 'Cajero' sal: 20000.
s agregarEmpleado: e.
e:= Empleado crearPersonaEmpleado: 21 nom: 'ramon' ape: 'Peralta' pues: 'Playero' sal: 22000.
s agregarEmpleado: e.
p:= Producto crearProducto: '1' nombre: 'Manteca' precioUnitario: 20 stock: 30.
s agregarProductoSupermercado: p.
p:= Producto crearProducto: '2' nombre: 'Arroz' precioUnitario: 30 stock: 20.
s agregarProductoSupermercado: p.
productoa :=Producto crearProducto: '3' nombre: 'Leche' precioUnitario: 45 stock: 2.
s agregarProductoSupermercado: productoa.
productob :=Producto crearProducto: '4' nombre: ' Cereal' precioUnitario: 62 stock: 2.
s agregarProductoSupermercado: productob.
"carrito:=CarritodeCompras." 

s verClientes .
clienteSelecionado:= Prompter prompt: 'Seleccione un cliente'.

"s verProductosPrimeraCalidad."
TimePresenter.
TimeToText.
TimeStamp.


s realizarCompra: clienteSelecionado.!

